
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightASSIGNrightNOTleftLTEQLTEQleftPLUSMINUSleftMULTIPLYDIVIDErightISVOIDrightINT_COMPleftATleftDOTID TYPE INTEGER STRING LPAREN RPAREN LBRACE RBRACE COLON COMMA DOT SEMICOLON AT PLUS MINUS MULTIPLY DIVIDE EQ LT LTEQ ASSIGN INT_COMP ARROW TRUE FALSE CASE CLASS ELSE ESAC FI IF IN INHERITS ISVOID LET LOOP NEW NOT OF POOL THEN WHILE\n        program : class_list\n        \n        class_list : class_list class SEMICOLON\n                   | class SEMICOLON\n        \n        class : CLASS TYPE LBRACE features_list_optional RBRACE\n        \n        class : CLASS TYPE INHERITS TYPE LBRACE features_list_optional RBRACE\n        \n        features_list_optional : features_list\n                               | empty\n        \n        features_list : feature SEMICOLON\n                      | feature SEMICOLON features_list\n        \n        feature : ID LPAREN formals_list RPAREN COLON TYPE LBRACE expression RBRACE\n        \n        feature : ID LPAREN RPAREN COLON TYPE LBRACE expression RBRACE\n        \n        feature : ID COLON TYPE ASSIGN expression\n        \n        feature : ID COLON TYPE\n        \n        formals_list : formals_list COMMA formal\n                     | formal\n        \n        formal : ID COLON TYPE\n        \n        expression : ID ASSIGN expression\n        \n        expression : expression AT TYPE DOT ID LPAREN arguments_list_opt RPAREN\n        \n        expression : expression DOT ID LPAREN arguments_list_opt RPAREN\n        \n        expression : ID LPAREN arguments_list_opt RPAREN\n        \n        arguments_list_opt : arguments_list\n                           | empty\n        \n        arguments_list : arguments_list COMMA expression\n                       | expression\n        \n        expression : IF expression THEN expression ELSE expression FI\n        \n        expression : WHILE expression LOOP expression POOL\n        \n        expression : LBRACE block_list RBRACE\n        \n        block_list : block_list expression SEMICOLON\n                   | expression SEMICOLON\n        \n        expression : LET declarations_list IN expression\n        \n        declarations_list : declarations_list COMMA declaration\n                          | declaration\n        \n        declaration : ID COLON TYPE ASSIGN expression\n                    | ID COLON TYPE\n        \n        expression : NEW TYPE\n        \n        expression : ISVOID expression\n        \n        expression : expression PLUS expression\n                   | expression MINUS expression\n                   | expression MULTIPLY expression\n                   | expression DIVIDE expression\n        \n        expression : INT_COMP expression\n        \n        expression : expression LT expression\n                     | expression LTEQ expression\n                     | expression EQ expression\n        \n        expression : NOT expression\n        \n        expression : LPAREN expression RPAREN\n        \n        expression : ID\n        \n        expression : INTEGER\n        \n        expression : STRING\n        \n        expression : TRUE\n        \n        expression : FALSE\n        \n        empty :\n        \n        expression : CASE expression OF actions_list ESAC\n        \n        actions_list : actions_list action SEMICOLON\n                     | action SEMICOLON\n        \n        action : ID COLON TYPE ARROW expression\n        '
    
_lr_action_items = {'CLASS':([0,2,6,8,],[4,4,-3,-2,]),'$end':([1,2,6,8,],[0,-1,-3,-2,]),'SEMICOLON':([3,5,14,17,27,34,39,40,50,51,52,53,72,76,77,78,79,83,90,91,92,93,94,95,96,97,100,101,108,109,116,120,122,127,129,130,134,140,142,143,],[6,8,18,-4,-13,-5,-47,-12,-48,-49,-50,-51,102,-35,-36,-41,-45,-17,-37,-38,-39,-40,-42,-43,-44,-46,-27,115,-11,-20,-30,131,-10,-26,-53,137,-19,-25,-18,-56,]),'TYPE':([4,10,20,29,32,36,46,59,105,132,],[7,16,27,35,38,55,76,88,118,138,]),'LBRACE':([7,16,33,38,41,42,43,44,47,48,49,54,55,56,57,58,61,62,63,64,65,66,67,71,81,98,99,102,103,110,112,115,126,128,133,141,],[9,21,44,56,44,44,44,44,44,44,44,44,81,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-29,44,44,44,-28,44,44,44,44,]),'INHERITS':([7,],[10,]),'RBRACE':([9,11,12,13,18,21,22,28,39,50,51,52,53,71,76,77,78,79,82,83,90,91,92,93,94,95,96,97,100,102,107,109,115,116,127,129,134,140,142,],[-52,17,-6,-7,-8,-52,-9,34,-47,-48,-49,-50,-51,100,-35,-36,-41,-45,108,-17,-37,-38,-39,-40,-42,-43,-44,-46,-27,-29,122,-20,-28,-30,-26,-53,-19,-25,-18,]),'ID':([9,18,19,21,31,33,41,42,43,44,45,47,48,49,54,56,57,58,60,61,62,63,64,65,66,67,71,81,98,99,102,103,104,106,110,111,112,115,119,126,128,131,133,137,141,],[15,15,23,15,23,39,39,39,39,39,75,39,39,39,39,39,39,39,89,39,39,39,39,39,39,39,39,39,39,39,-29,39,75,121,39,124,39,-28,121,39,39,-55,39,-54,39,]),'LPAREN':([15,33,39,41,42,43,44,47,48,49,54,56,57,58,61,62,63,64,65,66,67,71,81,89,98,99,102,103,110,112,115,124,126,128,133,141,],[19,41,58,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,112,41,41,-29,41,41,41,-28,133,41,41,41,41,]),'COLON':([15,23,25,30,75,121,],[20,29,32,36,105,132,]),'RPAREN':([19,24,26,35,37,39,50,51,52,53,58,68,76,77,78,79,83,84,85,86,87,90,91,92,93,94,95,96,97,100,109,112,116,123,125,127,129,133,134,139,140,142,],[25,30,-15,-16,-14,-47,-48,-49,-50,-51,-52,97,-35,-36,-41,-45,-17,109,-21,-22,-24,-37,-38,-39,-40,-42,-43,-44,-46,-27,-20,-52,-30,-23,134,-26,-53,-52,-19,142,-25,-18,]),'COMMA':([24,26,35,37,39,50,51,52,53,73,74,76,77,78,79,83,85,87,90,91,92,93,94,95,96,97,100,109,116,117,118,123,127,129,134,136,140,142,],[31,-15,-16,-14,-47,-48,-49,-50,-51,104,-32,-35,-36,-41,-45,-17,110,-24,-37,-38,-39,-40,-42,-43,-44,-46,-27,-20,-30,-31,-34,-23,-26,-53,-19,-33,-25,-18,]),'ASSIGN':([27,39,118,],[33,57,128,]),'IF':([33,41,42,43,44,47,48,49,54,56,57,58,61,62,63,64,65,66,67,71,81,98,99,102,103,110,112,115,126,128,133,141,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,-29,42,42,42,-28,42,42,42,42,]),'WHILE':([33,41,42,43,44,47,48,49,54,56,57,58,61,62,63,64,65,66,67,71,81,98,99,102,103,110,112,115,126,128,133,141,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,-29,43,43,43,-28,43,43,43,43,]),'LET':([33,41,42,43,44,47,48,49,54,56,57,58,61,62,63,64,65,66,67,71,81,98,99,102,103,110,112,115,126,128,133,141,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,-29,45,45,45,-28,45,45,45,45,]),'NEW':([33,41,42,43,44,47,48,49,54,56,57,58,61,62,63,64,65,66,67,71,81,98,99,102,103,110,112,115,126,128,133,141,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,-29,46,46,46,-28,46,46,46,46,]),'ISVOID':([33,41,42,43,44,47,48,49,54,56,57,58,61,62,63,64,65,66,67,71,81,98,99,102,103,110,112,115,126,128,133,141,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,-29,47,47,47,-28,47,47,47,47,]),'INT_COMP':([33,41,42,43,44,47,48,49,54,56,57,58,61,62,63,64,65,66,67,71,81,98,99,102,103,110,112,115,126,128,133,141,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-29,48,48,48,-28,48,48,48,48,]),'NOT':([33,41,42,43,44,47,48,49,54,56,57,58,61,62,63,64,65,66,67,71,81,98,99,102,103,110,112,115,126,128,133,141,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,-29,49,49,49,-28,49,49,49,49,]),'INTEGER':([33,41,42,43,44,47,48,49,54,56,57,58,61,62,63,64,65,66,67,71,81,98,99,102,103,110,112,115,126,128,133,141,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,-29,50,50,50,-28,50,50,50,50,]),'STRING':([33,41,42,43,44,47,48,49,54,56,57,58,61,62,63,64,65,66,67,71,81,98,99,102,103,110,112,115,126,128,133,141,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,-29,51,51,51,-28,51,51,51,51,]),'TRUE':([33,41,42,43,44,47,48,49,54,56,57,58,61,62,63,64,65,66,67,71,81,98,99,102,103,110,112,115,126,128,133,141,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,-29,52,52,52,-28,52,52,52,52,]),'FALSE':([33,41,42,43,44,47,48,49,54,56,57,58,61,62,63,64,65,66,67,71,81,98,99,102,103,110,112,115,126,128,133,141,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,-29,53,53,53,-28,53,53,53,53,]),'CASE':([33,41,42,43,44,47,48,49,54,56,57,58,61,62,63,64,65,66,67,71,81,98,99,102,103,110,112,115,126,128,133,141,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,-29,54,54,54,-28,54,54,54,54,]),'AT':([39,40,50,51,52,53,68,69,70,72,76,77,78,79,80,82,83,87,90,91,92,93,94,95,96,97,100,101,107,109,113,114,116,123,127,129,134,135,136,140,142,143,],[-47,59,-48,-49,-50,-51,59,59,59,59,-35,59,59,59,59,59,59,59,59,59,59,59,59,59,59,-46,-27,59,59,-20,59,59,59,59,-26,-53,-19,59,59,-25,-18,59,]),'DOT':([39,40,50,51,52,53,68,69,70,72,76,77,78,79,80,82,83,87,88,90,91,92,93,94,95,96,97,100,101,107,109,113,114,116,123,127,129,134,135,136,140,142,143,],[-47,60,-48,-49,-50,-51,60,60,60,60,-35,60,60,60,60,60,60,60,111,60,60,60,60,60,60,60,-46,-27,60,60,-20,60,60,60,60,-26,-53,-19,60,60,-25,-18,60,]),'PLUS':([39,40,50,51,52,53,68,69,70,72,76,77,78,79,80,82,83,87,90,91,92,93,94,95,96,97,100,101,107,109,113,114,116,123,127,129,134,135,136,140,142,143,],[-47,61,-48,-49,-50,-51,61,61,61,61,-35,-36,-41,61,61,61,61,61,-37,-38,-39,-40,61,61,61,-46,-27,61,61,-20,61,61,61,61,-26,-53,-19,61,61,-25,-18,61,]),'MINUS':([39,40,50,51,52,53,68,69,70,72,76,77,78,79,80,82,83,87,90,91,92,93,94,95,96,97,100,101,107,109,113,114,116,123,127,129,134,135,136,140,142,143,],[-47,62,-48,-49,-50,-51,62,62,62,62,-35,-36,-41,62,62,62,62,62,-37,-38,-39,-40,62,62,62,-46,-27,62,62,-20,62,62,62,62,-26,-53,-19,62,62,-25,-18,62,]),'MULTIPLY':([39,40,50,51,52,53,68,69,70,72,76,77,78,79,80,82,83,87,90,91,92,93,94,95,96,97,100,101,107,109,113,114,116,123,127,129,134,135,136,140,142,143,],[-47,63,-48,-49,-50,-51,63,63,63,63,-35,-36,-41,63,63,63,63,63,63,63,-39,-40,63,63,63,-46,-27,63,63,-20,63,63,63,63,-26,-53,-19,63,63,-25,-18,63,]),'DIVIDE':([39,40,50,51,52,53,68,69,70,72,76,77,78,79,80,82,83,87,90,91,92,93,94,95,96,97,100,101,107,109,113,114,116,123,127,129,134,135,136,140,142,143,],[-47,64,-48,-49,-50,-51,64,64,64,64,-35,-36,-41,64,64,64,64,64,64,64,-39,-40,64,64,64,-46,-27,64,64,-20,64,64,64,64,-26,-53,-19,64,64,-25,-18,64,]),'LT':([39,40,50,51,52,53,68,69,70,72,76,77,78,79,80,82,83,87,90,91,92,93,94,95,96,97,100,101,107,109,113,114,116,123,127,129,134,135,136,140,142,143,],[-47,65,-48,-49,-50,-51,65,65,65,65,-35,-36,-41,65,65,65,65,65,-37,-38,-39,-40,-42,-43,-44,-46,-27,65,65,-20,65,65,65,65,-26,-53,-19,65,65,-25,-18,65,]),'LTEQ':([39,40,50,51,52,53,68,69,70,72,76,77,78,79,80,82,83,87,90,91,92,93,94,95,96,97,100,101,107,109,113,114,116,123,127,129,134,135,136,140,142,143,],[-47,66,-48,-49,-50,-51,66,66,66,66,-35,-36,-41,66,66,66,66,66,-37,-38,-39,-40,-42,-43,-44,-46,-27,66,66,-20,66,66,66,66,-26,-53,-19,66,66,-25,-18,66,]),'EQ':([39,40,50,51,52,53,68,69,70,72,76,77,78,79,80,82,83,87,90,91,92,93,94,95,96,97,100,101,107,109,113,114,116,123,127,129,134,135,136,140,142,143,],[-47,67,-48,-49,-50,-51,67,67,67,67,-35,-36,-41,67,67,67,67,67,-37,-38,-39,-40,-42,-43,-44,-46,-27,67,67,-20,67,67,67,67,-26,-53,-19,67,67,-25,-18,67,]),'THEN':([39,50,51,52,53,69,76,77,78,79,83,90,91,92,93,94,95,96,97,100,109,116,127,129,134,140,142,],[-47,-48,-49,-50,-51,98,-35,-36,-41,-45,-17,-37,-38,-39,-40,-42,-43,-44,-46,-27,-20,-30,-26,-53,-19,-25,-18,]),'LOOP':([39,50,51,52,53,70,76,77,78,79,83,90,91,92,93,94,95,96,97,100,109,116,127,129,134,140,142,],[-47,-48,-49,-50,-51,99,-35,-36,-41,-45,-17,-37,-38,-39,-40,-42,-43,-44,-46,-27,-20,-30,-26,-53,-19,-25,-18,]),'OF':([39,50,51,52,53,76,77,78,79,80,83,90,91,92,93,94,95,96,97,100,109,116,127,129,134,140,142,],[-47,-48,-49,-50,-51,-35,-36,-41,-45,106,-17,-37,-38,-39,-40,-42,-43,-44,-46,-27,-20,-30,-26,-53,-19,-25,-18,]),'ELSE':([39,50,51,52,53,76,77,78,79,83,90,91,92,93,94,95,96,97,100,109,113,116,127,129,134,140,142,],[-47,-48,-49,-50,-51,-35,-36,-41,-45,-17,-37,-38,-39,-40,-42,-43,-44,-46,-27,-20,126,-30,-26,-53,-19,-25,-18,]),'POOL':([39,50,51,52,53,76,77,78,79,83,90,91,92,93,94,95,96,97,100,109,114,116,127,129,134,140,142,],[-47,-48,-49,-50,-51,-35,-36,-41,-45,-17,-37,-38,-39,-40,-42,-43,-44,-46,-27,-20,127,-30,-26,-53,-19,-25,-18,]),'FI':([39,50,51,52,53,76,77,78,79,83,90,91,92,93,94,95,96,97,100,109,116,127,129,134,135,140,142,],[-47,-48,-49,-50,-51,-35,-36,-41,-45,-17,-37,-38,-39,-40,-42,-43,-44,-46,-27,-20,-30,-26,-53,-19,140,-25,-18,]),'IN':([39,50,51,52,53,73,74,76,77,78,79,83,90,91,92,93,94,95,96,97,100,109,116,117,118,127,129,134,136,140,142,],[-47,-48,-49,-50,-51,103,-32,-35,-36,-41,-45,-17,-37,-38,-39,-40,-42,-43,-44,-46,-27,-20,-30,-31,-34,-26,-53,-19,-33,-25,-18,]),'ESAC':([119,131,137,],[129,-55,-54,]),'ARROW':([138,],[141,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'class_list':([0,],[2,]),'class':([0,2,],[3,5,]),'features_list_optional':([9,21,],[11,28,]),'features_list':([9,18,21,],[12,22,12,]),'empty':([9,21,58,112,133,],[13,13,86,86,86,]),'feature':([9,18,21,],[14,14,14,]),'formals_list':([19,],[24,]),'formal':([19,31,],[26,37,]),'expression':([33,41,42,43,44,47,48,49,54,56,57,58,61,62,63,64,65,66,67,71,81,98,99,103,110,112,126,128,133,141,],[40,68,69,70,72,77,78,79,80,82,83,87,90,91,92,93,94,95,96,101,107,113,114,116,123,87,135,136,87,143,]),'block_list':([44,],[71,]),'declarations_list':([45,],[73,]),'declaration':([45,104,],[74,117,]),'arguments_list_opt':([58,112,133,],[84,125,139,]),'arguments_list':([58,112,133,],[85,85,85,]),'actions_list':([106,],[119,]),'action':([106,119,],[120,130,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> class_list','program',1,'p_program','parser.py',71),
  ('class_list -> class_list class SEMICOLON','class_list',3,'p_class_list','parser.py',77),
  ('class_list -> class SEMICOLON','class_list',2,'p_class_list','parser.py',78),
  ('class -> CLASS TYPE LBRACE features_list_optional RBRACE','class',5,'p_class','parser.py',84),
  ('class -> CLASS TYPE INHERITS TYPE LBRACE features_list_optional RBRACE','class',7,'p_class_with_inheritance','parser.py',98),
  ('features_list_optional -> features_list','features_list_optional',1,'p_features_list_optional','parser.py',111),
  ('features_list_optional -> empty','features_list_optional',1,'p_features_list_optional','parser.py',112),
  ('features_list -> feature SEMICOLON','features_list',2,'p_features_list','parser.py',118),
  ('features_list -> feature SEMICOLON features_list','features_list',3,'p_features_list','parser.py',119),
  ('feature -> ID LPAREN formals_list RPAREN COLON TYPE LBRACE expression RBRACE','feature',9,'p_feature_method','parser.py',125),
  ('feature -> ID LPAREN RPAREN COLON TYPE LBRACE expression RBRACE','feature',8,'p_feature_method_no_formals','parser.py',137),
  ('feature -> ID COLON TYPE ASSIGN expression','feature',5,'p_feature_attr_initialized','parser.py',149),
  ('feature -> ID COLON TYPE','feature',3,'p_feature_attr','parser.py',160),
  ('formals_list -> formals_list COMMA formal','formals_list',3,'p_formals_list','parser.py',170),
  ('formals_list -> formal','formals_list',1,'p_formals_list','parser.py',171),
  ('formal -> ID COLON TYPE','formal',3,'p_formal','parser.py',177),
  ('expression -> ID ASSIGN expression','expression',3,'p_expression_assignment','parser.py',183),
  ('expression -> expression AT TYPE DOT ID LPAREN arguments_list_opt RPAREN','expression',8,'p_expression_static_dispatch','parser.py',190),
  ('expression -> expression DOT ID LPAREN arguments_list_opt RPAREN','expression',6,'p_expression_dispatch','parser.py',202),
  ('expression -> ID LPAREN arguments_list_opt RPAREN','expression',4,'p_expression_dispatch_self_shortcut','parser.py',213),
  ('arguments_list_opt -> arguments_list','arguments_list_opt',1,'p_arguments_list_opt','parser.py',226),
  ('arguments_list_opt -> empty','arguments_list_opt',1,'p_arguments_list_opt','parser.py',227),
  ('arguments_list -> arguments_list COMMA expression','arguments_list',3,'p_arguments_list','parser.py',233),
  ('arguments_list -> expression','arguments_list',1,'p_arguments_list','parser.py',234),
  ('expression -> IF expression THEN expression ELSE expression FI','expression',7,'p_expression_if_conditional','parser.py',240),
  ('expression -> WHILE expression LOOP expression POOL','expression',5,'p_while_loop','parser.py',250),
  ('expression -> LBRACE block_list RBRACE','expression',3,'p_expression_block','parser.py',260),
  ('block_list -> block_list expression SEMICOLON','block_list',3,'p_block_list','parser.py',266),
  ('block_list -> expression SEMICOLON','block_list',2,'p_block_list','parser.py',267),
  ('expression -> LET declarations_list IN expression','expression',4,'p_expression_let','parser.py',273),
  ('declarations_list -> declarations_list COMMA declaration','declarations_list',3,'p_declarations_list','parser.py',282),
  ('declarations_list -> declaration','declarations_list',1,'p_declarations_list','parser.py',283),
  ('declaration -> ID COLON TYPE ASSIGN expression','declaration',5,'p_declaration','parser.py',289),
  ('declaration -> ID COLON TYPE','declaration',3,'p_declaration','parser.py',290),
  ('expression -> NEW TYPE','expression',2,'p_expression_new','parser.py',302),
  ('expression -> ISVOID expression','expression',2,'p_expression_isvoid','parser.py',309),
  ('expression -> expression PLUS expression','expression',3,'p_expression_math_operations','parser.py',315),
  ('expression -> expression MINUS expression','expression',3,'p_expression_math_operations','parser.py',316),
  ('expression -> expression MULTIPLY expression','expression',3,'p_expression_math_operations','parser.py',317),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_math_operations','parser.py',318),
  ('expression -> INT_COMP expression','expression',2,'p_expression_integer_complement','parser.py',332),
  ('expression -> expression LT expression','expression',3,'p_expression_math_comparisons','parser.py',339),
  ('expression -> expression LTEQ expression','expression',3,'p_expression_math_comparisons','parser.py',340),
  ('expression -> expression EQ expression','expression',3,'p_expression_math_comparisons','parser.py',341),
  ('expression -> NOT expression','expression',2,'p_expression_boolean_complement','parser.py',353),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_with_parenthesis','parser.py',360),
  ('expression -> ID','expression',1,'p_expression_identifier','parser.py',366),
  ('expression -> INTEGER','expression',1,'p_expression_integer','parser.py',373),
  ('expression -> STRING','expression',1,'p_expression_string','parser.py',379),
  ('expression -> TRUE','expression',1,'p_expression_true','parser.py',385),
  ('expression -> FALSE','expression',1,'p_expression_false','parser.py',391),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',397),
  ('expression -> CASE expression OF actions_list ESAC','expression',5,'p_expression_case','parser.py',403),
  ('actions_list -> actions_list action SEMICOLON','actions_list',3,'p_actions_list','parser.py',413),
  ('actions_list -> action SEMICOLON','actions_list',2,'p_actions_list','parser.py',414),
  ('action -> ID COLON TYPE ARROW expression','action',5,'p_action','parser.py',420),
]
