.data

Object : .word, -1, -1, -1, -1, -1, -1
Object_cname : .asciiz, "Object"
IO : .word, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
IO_cname : .asciiz, "IO"
String : .word, -1, -1, -1, -1, -1, -1, -1, -1, -1
String_cname : .asciiz, "String"
Int : .word, -1, -1, -1, -1, -1, -1
Int_cname : .asciiz, "Int"
Bool : .word, -1, -1, -1, -1, -1, -1
Bool_cname : .asciiz, "Bool"
Main : .word, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
Main_cname : .asciiz, "Main"
data_0 : .asciiz, "Ale"
data_1 : .asciiz, "Jorge"
data_2 : .asciiz, "   "
void : .word, -1
empty_string : .asciiz, ""
input_str_buffer : .space, 1024
abort_signal : .asciiz, "Program execution aborted"
case_missmatch : .asciiz, "Execution of a case statement without a matching branch"
case_on_void : .asciiz, "Case on void"
dispatch_on_void : .asciiz, "Dispatch on void"
division_by_zero : .asciiz, "Division by zero"
substr_out_of_range : .asciiz, "Substring out of range"
heap_overflow : .asciiz, "Heap overflow"

.text
.globl main

main:
    #Filling Object type info
    la $t0, Object
    
    la $t1, Object_cname
    sw $t1, 0($t0)
    
    la $t1, Object
    sw $t1, 4($t0)
    
    li $t1, 4
    sw $t1, 8($t0)
    
    #Filling Object vtable
    la $t1, Object_abort
    sw $t1, 12($t0)
    
    la $t1, Object_copy
    sw $t1, 16($t0)
    
    la $t1, Object_type_name
    sw $t1, 20($t0)
    
    #Filling IO type info
    la $t0, IO
    
    la $t1, IO_cname
    sw $t1, 0($t0)
    
    la $t1, Object
    sw $t1, 4($t0)
    
    li $t1, 4
    sw $t1, 8($t0)
    
    #Filling IO vtable
    la $t1, Object_abort
    sw $t1, 12($t0)
    
    la $t1, Object_copy
    sw $t1, 16($t0)
    
    la $t1, Object_type_name
    sw $t1, 20($t0)
    
    la $t1, IO_out_string
    sw $t1, 24($t0)
    
    la $t1, IO_out_int
    sw $t1, 28($t0)
    
    la $t1, IO_in_string
    sw $t1, 32($t0)
    
    la $t1, IO_in_int
    sw $t1, 36($t0)
    
    #Filling String type info
    la $t0, String
    
    la $t1, String_cname
    sw $t1, 0($t0)
    
    la $t1, Object
    sw $t1, 4($t0)
    
    li $t1, 12
    sw $t1, 8($t0)
    
    #Filling String vtable
    la $t1, Object_abort
    sw $t1, 12($t0)
    
    la $t1, Object_copy
    sw $t1, 16($t0)
    
    la $t1, Object_type_name
    sw $t1, 20($t0)
    
    la $t1, String_length
    sw $t1, 24($t0)
    
    la $t1, String_concat
    sw $t1, 28($t0)
    
    la $t1, String_substr
    sw $t1, 32($t0)
    
    #Filling Int type info
    la $t0, Int
    
    la $t1, Int_cname
    sw $t1, 0($t0)
    
    la $t1, Object
    sw $t1, 4($t0)
    
    li $t1, 8
    sw $t1, 8($t0)
    
    #Filling Int vtable
    la $t1, Object_abort
    sw $t1, 12($t0)
    
    la $t1, Object_copy
    sw $t1, 16($t0)
    
    la $t1, Object_type_name
    sw $t1, 20($t0)
    
    #Filling Bool type info
    la $t0, Bool
    
    la $t1, Bool_cname
    sw $t1, 0($t0)
    
    la $t1, Object
    sw $t1, 4($t0)
    
    li $t1, 8
    sw $t1, 8($t0)
    
    #Filling Bool vtable
    la $t1, Object_abort
    sw $t1, 12($t0)
    
    la $t1, Object_copy
    sw $t1, 16($t0)
    
    la $t1, Object_type_name
    sw $t1, 20($t0)
    
    #Filling Main type info
    la $t0, Main
    
    la $t1, Main_cname
    sw $t1, 0($t0)
    
    la $t1, IO
    sw $t1, 4($t0)
    
    li $t1, 4
    sw $t1, 8($t0)
    
    #Filling Main vtable
    la $t1, Object_abort
    sw $t1, 12($t0)
    
    la $t1, Object_copy
    sw $t1, 16($t0)
    
    la $t1, Object_type_name
    sw $t1, 20($t0)
    
    la $t1, IO_out_string
    sw $t1, 24($t0)
    
    la $t1, IO_out_int
    sw $t1, 28($t0)
    
    la $t1, IO_in_string
    sw $t1, 32($t0)
    
    la $t1, IO_in_int
    sw $t1, 36($t0)
    
    la $t1, Main_main
    sw $t1, 40($t0)
    
    la $t1, Main_constructor
    sw $t1, 44($t0)
    
    #Allocating Main instance
    move $fp $sp
    addi $sp, $sp, -4
    li $a0, 4
    li $v0, 9
    syscall
    sw $v0, 0($fp)
    la $t0, Main
    sw $t0, 0($v0)
    
    #Calling Main constructor
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    jal Main_constructor
    
    #Calling main method
    addi $sp, $sp, -8
    jal Main_main
    j exit
    
string_comparer:
    #Comparing lengths
    lw $s0, 4($t0)
    lw $s1, 4($t1)
    bne $s0, $s1, strcmp_neq
    
    #Comparing char by char
    lw $s0, 8($t0)
    lw $s1, 8($t1)
    
    strcmp_loop:
    lb $s2, 0($s0)
    lb $s3, 0($s1)
    bne $s2, $s3, strcmp_neq
    beq $s2, $zero, strcmp_eq
    j strcmp_loop
    
    strcmp_eq:
    li $a0, 1
    jr $ra
    
    strcmp_neq:
    li $a0, 0
    jr $ra
    
abort:
    #Printing message
    li $v0, 4
    syscall
    
    #Aborting execution
    li $v0, 10
    syscall
    
copy:
    copy_loop:
    beq $zero, $a0, copy_end
    lb $t7, 0($t1)
    sb $t7, 0($t0)
    addi $t0, $t0, 1
    addi $t1, $t1, 1
    addi $a0, $a0, -1
    j copy_loop
    
    copy_end:
    jr $ra
    
length:
    li $t6, 0
    
    length_loop:
    lb $t7, 0($a0)
    beq $zero, $t7, length_end
    add $t6, $t6, 1
    add $a0, $a0, 1
    j length_loop
    
    length_end:
    move $a0 $t6
    jr $ra
    
Object_abort:
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, -4
    
    #Saving $fp
    move $fp $sp
    
    #Reserving space for locals
    addi $sp, $sp, 0
    
    #Executing instructions
    la $a0, abort_signal
    j abort
    
    #Restoring saved $ra
    lw $ra, 4($fp)
    
    #Restoring saved $fp
    lw $fp, 8($fp)
    
    #Cleaning stack after call
    addi $sp, $sp, 8
    
    #Return jump
    jr $ra
    
Object_copy:
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, -4
    
    #Saving $fp
    move $fp $sp
    
    #Reserving space for locals
    addi $sp, $sp, -4
    
    #Executing instructions
    #CopyNode
    lw $t1, 12($fp)
    lw $a0, 0($t1)
    lw $a0, 8($a0)
    li $v0, 9
    syscall
    sw $v0, 0($fp)
    move $t0 $v0
    jal copy
    
    #ReturnNode
    lw $a0, 0($fp)
    
    #Restoring saved $ra
    lw $ra, 4($fp)
    
    #Restoring saved $fp
    lw $fp, 8($fp)
    
    #Cleaning stack after call
    addi $sp, $sp, 16
    
    #Return jump
    jr $ra
    
Object_type_name:
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, -4
    
    #Saving $fp
    move $fp $sp
    
    #Reserving space for locals
    addi $sp, $sp, -4
    
    #Executing instructions
    #TypeNameNode
    #Allocating new String instance
    li $a0, 12
    li $v0, 9
    syscall
    sw $v0, 0($fp)
    la $t0, String
    sw $t0, 0($v0)
    sw $v0, 0($fp)
    
    #Determining length
    lw $t0, 12($fp)
    lw $t0, 0($t0)
    lw $a0, 0($t0)
    move $a1 $a0
    jal length
    
    #Storing length and reference to char array
    sw $a0, 4($v0)
    sw $a1, 8($v0)
    
    #ReturnNode
    lw $a0, 0($fp)
    
    #Restoring saved $ra
    lw $ra, 4($fp)
    
    #Restoring saved $fp
    lw $fp, 8($fp)
    
    #Cleaning stack after call
    addi $sp, $sp, 16
    
    #Return jump
    jr $ra
    
IO_out_string:
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, -4
    
    #Saving $fp
    move $fp $sp
    
    #Reserving space for locals
    addi $sp, $sp, 0
    
    #Executing instructions
    #PrintStringNode
    lw $a0, 16($fp)
    lw $a0, 8($a0)
    li $v0, 4
    syscall
    
    
    #ReturnNode
    lw $a0, 12($fp)
    
    #Restoring saved $ra
    lw $ra, 4($fp)
    
    #Restoring saved $fp
    lw $fp, 8($fp)
    
    #Cleaning stack after call
    addi $sp, $sp, 16
    
    #Return jump
    jr $ra
    
IO_out_int:
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, -4
    
    #Saving $fp
    move $fp $sp
    
    #Reserving space for locals
    addi $sp, $sp, 0
    
    #Executing instructions
    #PrintInt
    lw $a0, 16($fp)
    li $v0, 1
    syscall
    
    #ReturnNode
    lw $a0, 12($fp)
    
    #Restoring saved $ra
    lw $ra, 4($fp)
    
    #Restoring saved $fp
    lw $fp, 8($fp)
    
    #Cleaning stack after call
    addi $sp, $sp, 16
    
    #Return jump
    jr $ra
    
IO_in_string:
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, -4
    
    #Saving $fp
    move $fp $sp
    
    #Reserving space for locals
    addi $sp, $sp, -4
    
    #Executing instructions
    #ReadStringNode
    #Reading string to buffer
    la $a0, input_str_buffer
    li $a1, 1024
    li $v0, 8
    syscall
    
    #Saving reference to read string
    move $t1 $a0
    
    #Calculating str length
    jal length
    
    #Allocating char array for new string
    li $v0, 9
    syscall
    move $t0 $v0
    move $t3 $v0
    addi $a0, $a0, -1
    move $t2 $a0
    #Copying bytes from one char array to another
    jal copy
    
    #Null-terminating the string
    sb $zero, 0($t0)
    
    #Allocating new String instance
    li $a0, 12
    li $v0, 9
    syscall
    sw $v0, 0($fp)
    la $t0, String
    sw $t0, 0($v0)
    
    #Storing length and reference to char array
    sw $t2, 4($v0)
    sw $t3, 8($v0)
    
    #ReturnNode
    lw $a0, 0($fp)
    
    #Restoring saved $ra
    lw $ra, 4($fp)
    
    #Restoring saved $fp
    lw $fp, 8($fp)
    
    #Cleaning stack after call
    addi $sp, $sp, 16
    
    #Return jump
    jr $ra
    
IO_in_int:
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, -4
    
    #Saving $fp
    move $fp $sp
    
    #Reserving space for locals
    addi $sp, $sp, -4
    
    #Executing instructions
    #ReadIntNode
    li $v0, 5
    syscall
    sw $v0, 0($fp)
    
    #ReturnNode
    lw $a0, 0($fp)
    
    #Restoring saved $ra
    lw $ra, 4($fp)
    
    #Restoring saved $fp
    lw $fp, 8($fp)
    
    #Cleaning stack after call
    addi $sp, $sp, 16
    
    #Return jump
    jr $ra
    
String_length:
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, -4
    
    #Saving $fp
    move $fp $sp
    
    #Reserving space for locals
    addi $sp, $sp, -4
    
    #Executing instructions
    #LengthNode
    lw $t0, 12($fp)
    lw $t0, 4($t0)
    sw $t0, 0($fp)
    
    #ReturnNode
    lw $a0, 0($fp)
    
    #Restoring saved $ra
    lw $ra, 4($fp)
    
    #Restoring saved $fp
    lw $fp, 8($fp)
    
    #Cleaning stack after call
    addi $sp, $sp, 16
    
    #Return jump
    jr $ra
    
String_concat:
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, -4
    
    #Saving $fp
    move $fp $sp
    
    #Reserving space for locals
    addi $sp, $sp, -4
    
    #Executing instructions
    #Loading length
    lw $s1, 12($fp)
    lw $s1, 4($s1)
    lw $s2, 16($fp)
    lw $s2, 4($s2)
    add $t2, $s1, $s2
    
    #Allocating new char array
    move $a0 $t2
    addi $a0, $a0, 1
    li $v0, 9
    syscall
    move $t0 $v0
    move $t3 $v0
    
    #Copying bytes from first string
    lw $t1, 12($fp)
    lw $t1, 8($t1)
    move $a0 $s1
    jal copy
    
    #Copying bytes from second string
    lw $t1, 16($fp)
    lw $t1, 8($t1)
    move $a0 $s2
    jal copy
    
    #Null-terminating the string
    sb $zero, 0($t0)
    
    #Allocating new String instance
    li $a0, 12
    li $v0, 9
    syscall
    sw $v0, 0($fp)
    la $t0, String
    sw $t0, 0($v0)
    
    #Storing length and reference to char array
    sw $t2, 4($v0)
    sw $t3, 8($v0)
    
    #ReturnNode
    lw $a0, 0($fp)
    
    #Restoring saved $ra
    lw $ra, 4($fp)
    
    #Restoring saved $fp
    lw $fp, 8($fp)
    
    #Cleaning stack after call
    addi $sp, $sp, 20
    
    #Return jump
    jr $ra
    
String_substr:
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, -4
    
    #Saving $fp
    move $fp $sp
    
    #Reserving space for locals
    addi $sp, $sp, -4
    
    #Executing instructions
    #SubstringNode
    #Capturing substr out of range
    lw $s0, 16($fp)
    lw $s1, 20($fp)
    lw $s3, 12($fp)
    lw $s3, 4($s3)
    la $a0, substr_out_of_range
    blt $s0, $zero, abort
    blt $s1, $zero, abort
    add $s0, $s0, $s1
    bgt $s0, $s3, abort
    
    #Allocating new char array
    lw $s0, 20($fp)
    move $a0 $s0
    addi $a0, $a0, 1
    li $v0, 9
    syscall
    move $t0 $v0
    
    #Loading reference to char array of source string
    lw $t1, 12($fp)
    lw $t1, 8($t1)
    lw $s2, 16($fp)
    add $t1, $t1, $s2
    move $s1 $t0
    
    #Copying bytes from one char array to another
    move $a0 $s0
    jal copy
    
    #Null-terminating the string
    sb $zero, 0($t0)
    
    #Allocating new String instance
    li $a0, 12
    li $v0, 9
    syscall
    sw $v0, 0($fp)
    la $t0, String
    sw $t0, 0($v0)
    
    #Storing length and reference to char array
    lw $s0, 20($fp)
    sw $s0, 4($v0)
    sw $s1, 8($v0)
    
    
    #ReturnNode
    lw $a0, 0($fp)
    
    #Restoring saved $ra
    lw $ra, 4($fp)
    
    #Restoring saved $fp
    lw $fp, 8($fp)
    
    #Cleaning stack after call
    addi $sp, $sp, 24
    
    #Return jump
    jr $ra
    
Main_main:
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, -4
    
    #Saving $fp
    move $fp $sp
    
    #Reserving space for locals
    addi $sp, $sp, -28
    
    #Executing instructions
    #LoadNode
    li $a0, 12
    li $v0, 9
    syscall
    sw $v0, -12($fp)
    la $t0, String
    sw $t0, 0($v0)
    li $t0, 3
    sw $t0, 4($v0)
    la $t0, data_0
    sw $t0, 8($v0)
    
    #AssignNode
    lw $t0, -12($fp)
    sw $t0, -4($fp)
    
    #LoadNode
    li $a0, 12
    li $v0, 9
    syscall
    sw $v0, -12($fp)
    la $t0, String
    sw $t0, 0($v0)
    li $t0, 5
    sw $t0, 4($v0)
    la $t0, data_1
    sw $t0, 8($v0)
    
    #AssignNode
    lw $t0, -12($fp)
    sw $t0, -8($fp)
    
    #AssignNode
    lw $t0, -4($fp)
    sw $t0, -16($fp)
    
    #ParamNode
    lw $t0, -16($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -16($fp)
    lw $t0, 0($t0)
    lw $t0, 24($t0)
    jalr $t0
    sw $a0, -12($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -16($fp)
    
    #ParamNode
    lw $t0, -12($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -16($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -16($fp)
    lw $t0, 0($t0)
    lw $t0, 28($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #LoadNode
    li $a0, 12
    li $v0, 9
    syscall
    sw $v0, -12($fp)
    la $t0, String
    sw $t0, 0($v0)
    li $t0, 3
    sw $t0, 4($v0)
    la $t0, data_2
    sw $t0, 8($v0)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -16($fp)
    
    #ParamNode
    lw $t0, -12($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -16($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -16($fp)
    lw $t0, 0($t0)
    lw $t0, 24($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #AssignNode
    lw $t0, -8($fp)
    sw $t0, -16($fp)
    
    #ParamNode
    lw $t0, -16($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -16($fp)
    lw $t0, 0($t0)
    lw $t0, 24($t0)
    jalr $t0
    sw $a0, -12($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -16($fp)
    
    #ParamNode
    lw $t0, -12($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -16($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -16($fp)
    lw $t0, 0($t0)
    lw $t0, 28($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #LoadNode
    li $a0, 12
    li $v0, 9
    syscall
    sw $v0, -12($fp)
    la $t0, String
    sw $t0, 0($v0)
    li $t0, 3
    sw $t0, 4($v0)
    la $t0, data_2
    sw $t0, 8($v0)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -16($fp)
    
    #ParamNode
    lw $t0, -12($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -16($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -16($fp)
    lw $t0, 0($t0)
    lw $t0, 24($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #AssignNode
    lw $t0, -8($fp)
    sw $t0, -16($fp)
    
    #AssignNode
    lw $t0, -4($fp)
    sw $t0, -20($fp)
    
    #ParamNode
    lw $t0, -16($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -20($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -20($fp)
    lw $t0, 0($t0)
    lw $t0, 28($t0)
    jalr $t0
    sw $a0, -12($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -16($fp)
    
    #ParamNode
    lw $t0, -12($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -16($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -16($fp)
    lw $t0, 0($t0)
    lw $t0, 24($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #LoadNode
    li $a0, 12
    li $v0, 9
    syscall
    sw $v0, -12($fp)
    la $t0, String
    sw $t0, 0($v0)
    li $t0, 3
    sw $t0, 4($v0)
    la $t0, data_2
    sw $t0, 8($v0)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -16($fp)
    
    #ParamNode
    lw $t0, -12($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -16($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -16($fp)
    lw $t0, 0($t0)
    lw $t0, 24($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #AssignNode
    li $t0, 1
    sw $t0, -16($fp)
    
    #AssignNode
    li $t0, 2
    sw $t0, -20($fp)
    
    #AssignNode
    lw $t0, -4($fp)
    sw $t0, -24($fp)
    
    #ParamNode
    lw $t0, -20($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -16($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -24($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -24($fp)
    lw $t0, 0($t0)
    lw $t0, 32($t0)
    jalr $t0
    sw $a0, -12($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -16($fp)
    
    #ParamNode
    lw $t0, -12($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -16($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -16($fp)
    lw $t0, 0($t0)
    lw $t0, 24($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #LoadNode
    li $a0, 12
    li $v0, 9
    syscall
    sw $v0, -12($fp)
    la $t0, String
    sw $t0, 0($v0)
    li $t0, 3
    sw $t0, 4($v0)
    la $t0, data_2
    sw $t0, 8($v0)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -16($fp)
    
    #ParamNode
    lw $t0, -12($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -16($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -16($fp)
    lw $t0, 0($t0)
    lw $t0, 24($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #ReturnNode
    lw $a0, 0($fp)
    
    #Restoring saved $ra
    lw $ra, 4($fp)
    
    #Restoring saved $fp
    lw $fp, 8($fp)
    
    #Cleaning stack after call
    addi $sp, $sp, 40
    
    #Return jump
    jr $ra
    
Main_constructor:
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, -4
    
    #Saving $fp
    move $fp $sp
    
    #Reserving space for locals
    addi $sp, $sp, -4
    
    #Executing instructions
    #ReturnNode
    lw $a0, 0($fp)
    
    #Restoring saved $ra
    lw $ra, 4($fp)
    
    #Restoring saved $fp
    lw $fp, 8($fp)
    
    #Cleaning stack after call
    addi $sp, $sp, 16
    
    #Return jump
    jr $ra
    
exit: