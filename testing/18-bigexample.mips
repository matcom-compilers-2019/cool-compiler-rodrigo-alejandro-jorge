.data

Object : .word, -1, -1, -1, -1, -1, -1
Object_cname : .asciiz, "Object"
IO : .word, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
IO_cname : .asciiz, "IO"
String : .word, -1, -1, -1, -1, -1, -1, -1, -1, -1
String_cname : .asciiz, "String"
Int : .word, -1, -1, -1, -1, -1, -1
Int_cname : .asciiz, "Int"
Bool : .word, -1, -1, -1, -1, -1, -1
Bool_cname : .asciiz, "Bool"
P : .word, -1, -1, -1, -1, -1, -1, -1
P_cname : .asciiz, "P"
Blah : .word, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
Blah_cname : .asciiz, "Blah"
A : .word, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
A_cname : .asciiz, "A"
Base : .word, -1, -1, -1, -1, -1, -1, -1
Base_cname : .asciiz, "Base"
Main : .word, -1, -1, -1, -1, -1, -1, -1, -1
Main_cname : .asciiz, "Main"
C1 : .word, -1, -1, -1, -1, -1, -1, -1
C1_cname : .asciiz, "C1"
C2 : .word, -1, -1, -1, -1, -1, -1, -1, -1, -1
C2_cname : .asciiz, "C2"
B : .word, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
B_cname : .asciiz, "B"
Grandparent : .word, -1, -1, -1, -1, -1, -1, -1
Grandparent_cname : .asciiz, "Grandparent"
C : .word, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
C_cname : .asciiz, "C"
Parent : .word, -1, -1, -1, -1, -1, -1, -1
Parent_cname : .asciiz, "Parent"
Child : .word, -1, -1, -1, -1, -1, -1, -1
Child_cname : .asciiz, "Child"
data_0 : .asciiz, "Hi"
data_1 : .asciiz, "basics:
"
data_2 : .asciiz, "more advanced:
"
data_3 : .asciiz, "bigIf
"
data_4 : .asciiz, "bigWhile
"
data_5 : .asciiz, "failed: "
data_6 : .asciiz, "
"
data_7 : .asciiz, "bigMath
"
data_8 : .asciiz, "assertion failed: "
data_9 : .asciiz, "bigAssign
"
data_10 : .asciiz, "bigSelf
"
data_11 : .asciiz, "foo"
data_12 : .asciiz, "bar"
data_13 : .asciiz, "foobar"
data_14 : .asciiz, "bigStrCompare
"
data_15 : .asciiz, "bigCase
"
data_16 : .asciiz, "bigAttrAccess
"
data_17 : .asciiz, "whassup?!"
data_18 : .asciiz, "hello, 	\world
"
data_19 : .asciiz, "printed via dynamic dispatch
"
data_20 : .asciiz, "tested static dispatch and 'new IO'
"
data_21 : .asciiz, "an int: "
data_22 : .asciiz, "gonna make a Blah
"
data_23 : .asciiz, "gonna call doThemAll
"
data_24 : .asciiz, "looks ok!
"
void : .word, -1
empty_string : .asciiz, ""
input_str_buffer : .space, 1024
abort_signal : .asciiz, "Program execution aborted"
case_missmatch : .asciiz, "Execution of a case statement without a matching branch"
case_on_void : .asciiz, "Case on void"
dispatch_on_void : .asciiz, "Dispatch on void"
division_by_zero : .asciiz, "Division by zero"
substr_out_of_range : .asciiz, "Substring out of range"
heap_overflow : .asciiz, "Heap overflow"

.text
.globl main

main:
    #Filling Object type info
    la $t0, Object
    
    la $t1, Object_cname
    sw $t1, 0($t0)
    
    la $t1, Object
    sw $t1, 4($t0)
    
    li $t1, 4
    sw $t1, 8($t0)
    
    #Filling Object vtable
    la $t1, Object_abort
    sw $t1, 12($t0)
    
    la $t1, Object_copy
    sw $t1, 16($t0)
    
    la $t1, Object_type_name
    sw $t1, 20($t0)
    
    #Filling IO type info
    la $t0, IO
    
    la $t1, IO_cname
    sw $t1, 0($t0)
    
    la $t1, Object
    sw $t1, 4($t0)
    
    li $t1, 4
    sw $t1, 8($t0)
    
    #Filling IO vtable
    la $t1, Object_abort
    sw $t1, 12($t0)
    
    la $t1, Object_copy
    sw $t1, 16($t0)
    
    la $t1, Object_type_name
    sw $t1, 20($t0)
    
    la $t1, IO_out_string
    sw $t1, 24($t0)
    
    la $t1, IO_out_int
    sw $t1, 28($t0)
    
    la $t1, IO_in_string
    sw $t1, 32($t0)
    
    la $t1, IO_in_int
    sw $t1, 36($t0)
    
    #Filling String type info
    la $t0, String
    
    la $t1, String_cname
    sw $t1, 0($t0)
    
    la $t1, Object
    sw $t1, 4($t0)
    
    li $t1, 12
    sw $t1, 8($t0)
    
    #Filling String vtable
    la $t1, Object_abort
    sw $t1, 12($t0)
    
    la $t1, Object_copy
    sw $t1, 16($t0)
    
    la $t1, Object_type_name
    sw $t1, 20($t0)
    
    la $t1, String_length
    sw $t1, 24($t0)
    
    la $t1, String_concat
    sw $t1, 28($t0)
    
    la $t1, String_substr
    sw $t1, 32($t0)
    
    #Filling Int type info
    la $t0, Int
    
    la $t1, Int_cname
    sw $t1, 0($t0)
    
    la $t1, Object
    sw $t1, 4($t0)
    
    li $t1, 8
    sw $t1, 8($t0)
    
    #Filling Int vtable
    la $t1, Object_abort
    sw $t1, 12($t0)
    
    la $t1, Object_copy
    sw $t1, 16($t0)
    
    la $t1, Object_type_name
    sw $t1, 20($t0)
    
    #Filling Bool type info
    la $t0, Bool
    
    la $t1, Bool_cname
    sw $t1, 0($t0)
    
    la $t1, Object
    sw $t1, 4($t0)
    
    li $t1, 8
    sw $t1, 8($t0)
    
    #Filling Bool vtable
    la $t1, Object_abort
    sw $t1, 12($t0)
    
    la $t1, Object_copy
    sw $t1, 16($t0)
    
    la $t1, Object_type_name
    sw $t1, 20($t0)
    
    #Filling P type info
    la $t0, P
    
    la $t1, P_cname
    sw $t1, 0($t0)
    
    la $t1, Object
    sw $t1, 4($t0)
    
    li $t1, 8
    sw $t1, 8($t0)
    
    #Filling P vtable
    la $t1, Object_abort
    sw $t1, 12($t0)
    
    la $t1, Object_copy
    sw $t1, 16($t0)
    
    la $t1, Object_type_name
    sw $t1, 20($t0)
    
    la $t1, P_constructor
    sw $t1, 24($t0)
    
    #Filling Blah type info
    la $t0, Blah
    
    la $t1, Blah_cname
    sw $t1, 0($t0)
    
    la $t1, Object
    sw $t1, 4($t0)
    
    li $t1, 36
    sw $t1, 8($t0)
    
    #Filling Blah vtable
    la $t1, Object_abort
    sw $t1, 12($t0)
    
    la $t1, Object_copy
    sw $t1, 16($t0)
    
    la $t1, Object_type_name
    sw $t1, 20($t0)
    
    la $t1, Blah_tiny
    sw $t1, 24($t0)
    
    la $t1, Blah_add
    sw $t1, 28($t0)
    
    la $t1, Blah_compare
    sw $t1, 32($t0)
    
    la $t1, Blah_compareEq
    sw $t1, 36($t0)
    
    la $t1, Blah_isv
    sw $t1, 40($t0)
    
    la $t1, Blah_divByZero
    sw $t1, 44($t0)
    
    la $t1, Blah_cmp
    sw $t1, 48($t0)
    
    la $t1, Blah_ng
    sw $t1, 52($t0)
    
    la $t1, Blah_caller
    sw $t1, 56($t0)
    
    la $t1, Blah_callee
    sw $t1, 60($t0)
    
    la $t1, Blah_get_t
    sw $t1, 64($t0)
    
    la $t1, Blah_useLet
    sw $t1, 68($t0)
    
    la $t1, Blah_useIf
    sw $t1, 72($t0)
    
    la $t1, Blah_useWhile
    sw $t1, 76($t0)
    
    la $t1, Blah_useCase
    sw $t1, 80($t0)
    
    la $t1, Blah_useNew
    sw $t1, 84($t0)
    
    la $t1, Blah_doThemAll
    sw $t1, 88($t0)
    
    la $t1, Blah_bigIf
    sw $t1, 92($t0)
    
    la $t1, Blah_bigWhile
    sw $t1, 96($t0)
    
    la $t1, Blah_bail
    sw $t1, 100($t0)
    
    la $t1, Blah_bigMath
    sw $t1, 104($t0)
    
    la $t1, Blah_assert
    sw $t1, 108($t0)
    
    la $t1, Blah_bigAssign
    sw $t1, 112($t0)
    
    la $t1, Blah_setI
    sw $t1, 116($t0)
    
    la $t1, Blah_getI
    sw $t1, 120($t0)
    
    la $t1, Blah_bigSelf
    sw $t1, 124($t0)
    
    la $t1, Blah_bigStrCompare
    sw $t1, 128($t0)
    
    la $t1, Blah_bigCase
    sw $t1, 132($t0)
    
    la $t1, Blah_bigAttrAccess
    sw $t1, 136($t0)
    
    la $t1, Blah_constructor
    sw $t1, 140($t0)
    
    #Filling A type info
    la $t0, A
    
    la $t1, A_cname
    sw $t1, 0($t0)
    
    la $t1, Object
    sw $t1, 4($t0)
    
    li $t1, 4
    sw $t1, 8($t0)
    
    #Filling A vtable
    la $t1, Object_abort
    sw $t1, 12($t0)
    
    la $t1, Object_copy
    sw $t1, 16($t0)
    
    la $t1, Object_type_name
    sw $t1, 20($t0)
    
    la $t1, A_e
    sw $t1, 24($t0)
    
    la $t1, A_f
    sw $t1, 28($t0)
    
    la $t1, A_g
    sw $t1, 32($t0)
    
    la $t1, A_i
    sw $t1, 36($t0)
    
    la $t1, A_j
    sw $t1, 40($t0)
    
    la $t1, A_constructor
    sw $t1, 44($t0)
    
    #Filling Base type info
    la $t0, Base
    
    la $t1, Base_cname
    sw $t1, 0($t0)
    
    la $t1, Object
    sw $t1, 4($t0)
    
    li $t1, 16
    sw $t1, 8($t0)
    
    #Filling Base vtable
    la $t1, Object_abort
    sw $t1, 12($t0)
    
    la $t1, Object_copy
    sw $t1, 16($t0)
    
    la $t1, Object_type_name
    sw $t1, 20($t0)
    
    la $t1, Base_constructor
    sw $t1, 24($t0)
    
    #Filling Main type info
    la $t0, Main
    
    la $t1, Main_cname
    sw $t1, 0($t0)
    
    la $t1, Object
    sw $t1, 4($t0)
    
    li $t1, 4
    sw $t1, 8($t0)
    
    #Filling Main vtable
    la $t1, Object_abort
    sw $t1, 12($t0)
    
    la $t1, Object_copy
    sw $t1, 16($t0)
    
    la $t1, Object_type_name
    sw $t1, 20($t0)
    
    la $t1, Main_main
    sw $t1, 24($t0)
    
    la $t1, Main_constructor
    sw $t1, 28($t0)
    
    #Filling C1 type info
    la $t0, C1
    
    la $t1, C1_cname
    sw $t1, 0($t0)
    
    la $t1, P
    sw $t1, 4($t0)
    
    li $t1, 8
    sw $t1, 8($t0)
    
    #Filling C1 vtable
    la $t1, Object_abort
    sw $t1, 12($t0)
    
    la $t1, Object_copy
    sw $t1, 16($t0)
    
    la $t1, Object_type_name
    sw $t1, 20($t0)
    
    la $t1, C1_constructor
    sw $t1, 24($t0)
    
    #Filling C2 type info
    la $t0, C2
    
    la $t1, C2_cname
    sw $t1, 0($t0)
    
    la $t1, P
    sw $t1, 4($t0)
    
    li $t1, 8
    sw $t1, 8($t0)
    
    #Filling C2 vtable
    la $t1, Object_abort
    sw $t1, 12($t0)
    
    la $t1, Object_copy
    sw $t1, 16($t0)
    
    la $t1, Object_type_name
    sw $t1, 20($t0)
    
    la $t1, C2_constructor
    sw $t1, 24($t0)
    
    la $t1, C2_getX
    sw $t1, 28($t0)
    
    la $t1, C2_setX
    sw $t1, 32($t0)
    
    #Filling B type info
    la $t0, B
    
    la $t1, B_cname
    sw $t1, 0($t0)
    
    la $t1, A
    sw $t1, 4($t0)
    
    li $t1, 4
    sw $t1, 8($t0)
    
    #Filling B vtable
    la $t1, Object_abort
    sw $t1, 12($t0)
    
    la $t1, Object_copy
    sw $t1, 16($t0)
    
    la $t1, Object_type_name
    sw $t1, 20($t0)
    
    la $t1, B_e
    sw $t1, 24($t0)
    
    la $t1, A_f
    sw $t1, 28($t0)
    
    la $t1, B_g
    sw $t1, 32($t0)
    
    la $t1, A_i
    sw $t1, 36($t0)
    
    la $t1, A_j
    sw $t1, 40($t0)
    
    la $t1, B_constructor
    sw $t1, 44($t0)
    
    la $t1, B_h
    sw $t1, 48($t0)
    
    la $t1, B_k
    sw $t1, 52($t0)
    
    #Filling Grandparent type info
    la $t0, Grandparent
    
    la $t1, Grandparent_cname
    sw $t1, 0($t0)
    
    la $t1, Base
    sw $t1, 4($t0)
    
    li $t1, 28
    sw $t1, 8($t0)
    
    #Filling Grandparent vtable
    la $t1, Object_abort
    sw $t1, 12($t0)
    
    la $t1, Object_copy
    sw $t1, 16($t0)
    
    la $t1, Object_type_name
    sw $t1, 20($t0)
    
    la $t1, Grandparent_constructor
    sw $t1, 24($t0)
    
    #Filling C type info
    la $t0, C
    
    la $t1, C_cname
    sw $t1, 0($t0)
    
    la $t1, B
    sw $t1, 4($t0)
    
    li $t1, 4
    sw $t1, 8($t0)
    
    #Filling C vtable
    la $t1, Object_abort
    sw $t1, 12($t0)
    
    la $t1, Object_copy
    sw $t1, 16($t0)
    
    la $t1, Object_type_name
    sw $t1, 20($t0)
    
    la $t1, C_e
    sw $t1, 24($t0)
    
    la $t1, A_f
    sw $t1, 28($t0)
    
    la $t1, B_g
    sw $t1, 32($t0)
    
    la $t1, C_i
    sw $t1, 36($t0)
    
    la $t1, A_j
    sw $t1, 40($t0)
    
    la $t1, C_constructor
    sw $t1, 44($t0)
    
    la $t1, C_h
    sw $t1, 48($t0)
    
    la $t1, B_k
    sw $t1, 52($t0)
    
    la $t1, C_ell
    sw $t1, 56($t0)
    
    #Filling Parent type info
    la $t0, Parent
    
    la $t1, Parent_cname
    sw $t1, 0($t0)
    
    la $t1, Grandparent
    sw $t1, 4($t0)
    
    li $t1, 40
    sw $t1, 8($t0)
    
    #Filling Parent vtable
    la $t1, Object_abort
    sw $t1, 12($t0)
    
    la $t1, Object_copy
    sw $t1, 16($t0)
    
    la $t1, Object_type_name
    sw $t1, 20($t0)
    
    la $t1, Parent_constructor
    sw $t1, 24($t0)
    
    #Filling Child type info
    la $t0, Child
    
    la $t1, Child_cname
    sw $t1, 0($t0)
    
    la $t1, Parent
    sw $t1, 4($t0)
    
    li $t1, 56
    sw $t1, 8($t0)
    
    #Filling Child vtable
    la $t1, Object_abort
    sw $t1, 12($t0)
    
    la $t1, Object_copy
    sw $t1, 16($t0)
    
    la $t1, Object_type_name
    sw $t1, 20($t0)
    
    la $t1, Child_constructor
    sw $t1, 24($t0)
    
    #Allocating Main instance
    move $fp $sp
    addi $sp, $sp, -4
    li $a0, 4
    li $v0, 9
    syscall
    sw $v0, 0($fp)
    la $t0, Main
    sw $t0, 0($v0)
    
    #Calling Main constructor
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    jal Main_constructor
    
    #Calling main method
    addi $sp, $sp, -8
    jal Main_main
    j exit
    
string_comparer:
    #Comparing lengths
    lw $s0, 4($t0)
    lw $s1, 4($t1)
    bne $s0, $s1, strcmp_neq
    
    #Comparing char by char
    lw $s0, 8($t0)
    lw $s1, 8($t1)
    
    strcmp_loop:
    lb $s2, 0($s0)
    lb $s3, 0($s1)
    bne $s2, $s3, strcmp_neq
    beq $s2, $zero, strcmp_eq
    j strcmp_loop
    
    strcmp_eq:
    li $a0, 1
    jr $ra
    
    strcmp_neq:
    li $a0, 0
    jr $ra
    
abort:
    #Printing message
    li $v0, 4
    syscall
    
    #Aborting execution
    li $v0, 10
    syscall
    
copy:
    copy_loop:
    beq $zero, $a0, copy_end
    lb $t7, 0($t1)
    sb $t7, 0($t0)
    addi $t0, $t0, 1
    addi $t1, $t1, 1
    addi $a0, $a0, -1
    j copy_loop
    
    copy_end:
    jr $ra
    
length:
    li $t6, 0
    
    length_loop:
    lb $t7, 0($a0)
    beq $zero, $t7, length_end
    add $t6, $t6, 1
    add $a0, $a0, 1
    j length_loop
    
    length_end:
    move $a0 $t6
    jr $ra
    
Object_abort:
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, -4
    
    #Saving $fp
    move $fp $sp
    
    #Reserving space for locals
    addi $sp, $sp, 0
    
    #Executing instructions
    la $a0, abort_signal
    j abort
    
    #Restoring saved $ra
    lw $ra, 4($fp)
    
    #Restoring saved $fp
    lw $fp, 8($fp)
    
    #Cleaning stack after call
    addi $sp, $sp, 8
    
    #Return jump
    jr $ra
    
Object_copy:
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, -4
    
    #Saving $fp
    move $fp $sp
    
    #Reserving space for locals
    addi $sp, $sp, -4
    
    #Executing instructions
    #CopyNode
    lw $t1, 12($fp)
    lw $a0, 0($t1)
    lw $a0, 8($a0)
    li $v0, 9
    syscall
    sw $v0, 0($fp)
    move $t0 $v0
    jal copy
    
    #ReturnNode
    lw $a0, 0($fp)
    
    #Restoring saved $ra
    lw $ra, 4($fp)
    
    #Restoring saved $fp
    lw $fp, 8($fp)
    
    #Cleaning stack after call
    addi $sp, $sp, 16
    
    #Return jump
    jr $ra
    
Object_type_name:
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, -4
    
    #Saving $fp
    move $fp $sp
    
    #Reserving space for locals
    addi $sp, $sp, -4
    
    #Executing instructions
    #TypeNameNode
    #Allocating new String instance
    li $a0, 12
    li $v0, 9
    syscall
    sw $v0, 0($fp)
    la $t0, String
    sw $t0, 0($v0)
    sw $v0, 0($fp)
    
    #Determining length
    lw $t0, 12($fp)
    lw $t0, 0($t0)
    lw $a0, 0($t0)
    move $a1 $a0
    jal length
    
    #Storing length and reference to char array
    sw $a0, 4($v0)
    sw $a1, 8($v0)
    
    #ReturnNode
    lw $a0, 0($fp)
    
    #Restoring saved $ra
    lw $ra, 4($fp)
    
    #Restoring saved $fp
    lw $fp, 8($fp)
    
    #Cleaning stack after call
    addi $sp, $sp, 16
    
    #Return jump
    jr $ra
    
IO_out_string:
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, -4
    
    #Saving $fp
    move $fp $sp
    
    #Reserving space for locals
    addi $sp, $sp, 0
    
    #Executing instructions
    #PrintStringNode
    lw $a0, 16($fp)
    lw $a0, 8($a0)
    li $v0, 4
    syscall
    
    
    #ReturnNode
    lw $a0, 12($fp)
    
    #Restoring saved $ra
    lw $ra, 4($fp)
    
    #Restoring saved $fp
    lw $fp, 8($fp)
    
    #Cleaning stack after call
    addi $sp, $sp, 16
    
    #Return jump
    jr $ra
    
IO_out_int:
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, -4
    
    #Saving $fp
    move $fp $sp
    
    #Reserving space for locals
    addi $sp, $sp, 0
    
    #Executing instructions
    #PrintInt
    lw $a0, 16($fp)
    li $v0, 1
    syscall
    
    #ReturnNode
    lw $a0, 12($fp)
    
    #Restoring saved $ra
    lw $ra, 4($fp)
    
    #Restoring saved $fp
    lw $fp, 8($fp)
    
    #Cleaning stack after call
    addi $sp, $sp, 16
    
    #Return jump
    jr $ra
    
IO_in_string:
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, -4
    
    #Saving $fp
    move $fp $sp
    
    #Reserving space for locals
    addi $sp, $sp, -4
    
    #Executing instructions
    #ReadStringNode
    #Reading string to buffer
    la $a0, input_str_buffer
    li $a1, 1024
    li $v0, 8
    syscall
    
    #Saving reference to read string
    move $t1 $a0
    
    #Calculating str length
    jal length
    
    #Allocating char array for new string
    li $v0, 9
    syscall
    move $t0 $v0
    move $t3 $v0
    addi $a0, $a0, -1
    move $t2 $a0
    #Copying bytes from one char array to another
    jal copy
    
    #Null-terminating the string
    sb $zero, 0($t0)
    
    #Allocating new String instance
    li $a0, 12
    li $v0, 9
    syscall
    sw $v0, 0($fp)
    la $t0, String
    sw $t0, 0($v0)
    
    #Storing length and reference to char array
    sw $t2, 4($v0)
    sw $t3, 8($v0)
    
    #ReturnNode
    lw $a0, 0($fp)
    
    #Restoring saved $ra
    lw $ra, 4($fp)
    
    #Restoring saved $fp
    lw $fp, 8($fp)
    
    #Cleaning stack after call
    addi $sp, $sp, 16
    
    #Return jump
    jr $ra
    
IO_in_int:
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, -4
    
    #Saving $fp
    move $fp $sp
    
    #Reserving space for locals
    addi $sp, $sp, -4
    
    #Executing instructions
    #ReadIntNode
    li $v0, 5
    syscall
    sw $v0, 0($fp)
    
    #ReturnNode
    lw $a0, 0($fp)
    
    #Restoring saved $ra
    lw $ra, 4($fp)
    
    #Restoring saved $fp
    lw $fp, 8($fp)
    
    #Cleaning stack after call
    addi $sp, $sp, 16
    
    #Return jump
    jr $ra
    
String_length:
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, -4
    
    #Saving $fp
    move $fp $sp
    
    #Reserving space for locals
    addi $sp, $sp, -4
    
    #Executing instructions
    #LengthNode
    lw $t0, 12($fp)
    lw $t0, 4($t0)
    sw $t0, 0($fp)
    
    #ReturnNode
    lw $a0, 0($fp)
    
    #Restoring saved $ra
    lw $ra, 4($fp)
    
    #Restoring saved $fp
    lw $fp, 8($fp)
    
    #Cleaning stack after call
    addi $sp, $sp, 16
    
    #Return jump
    jr $ra
    
String_concat:
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, -4
    
    #Saving $fp
    move $fp $sp
    
    #Reserving space for locals
    addi $sp, $sp, -4
    
    #Executing instructions
    #Loading length
    lw $s1, 12($fp)
    lw $s1, 4($s1)
    lw $s2, 16($fp)
    lw $s2, 4($s2)
    add $t2, $s1, $s2
    
    #Allocating new char array
    move $a0 $t2
    addi $a0, $a0, 1
    li $v0, 9
    syscall
    move $t0 $v0
    move $t3 $v0
    
    #Copying bytes from first string
    lw $t1, 12($fp)
    lw $t1, 8($t1)
    move $a0 $s1
    jal copy
    
    #Copying bytes from second string
    lw $t1, 16($fp)
    lw $t1, 8($t1)
    move $a0 $s2
    jal copy
    
    #Null-terminating the string
    sb $zero, 0($t0)
    
    #Allocating new String instance
    li $a0, 12
    li $v0, 9
    syscall
    sw $v0, 0($fp)
    la $t0, String
    sw $t0, 0($v0)
    
    #Storing length and reference to char array
    sw $t2, 4($v0)
    sw $t3, 8($v0)
    
    #ReturnNode
    lw $a0, 0($fp)
    
    #Restoring saved $ra
    lw $ra, 4($fp)
    
    #Restoring saved $fp
    lw $fp, 8($fp)
    
    #Cleaning stack after call
    addi $sp, $sp, 20
    
    #Return jump
    jr $ra
    
String_substr:
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, -4
    
    #Saving $fp
    move $fp $sp
    
    #Reserving space for locals
    addi $sp, $sp, -4
    
    #Executing instructions
    #SubstringNode
    #Capturing substr out of range
    lw $s0, 16($fp)
    lw $s1, 20($fp)
    lw $s3, 12($fp)
    lw $s3, 4($s3)
    la $a0, substr_out_of_range
    blt $s0, $zero, abort
    blt $s1, $zero, abort
    add $s0, $s0, $s1
    bgt $s0, $s3, abort
    
    #Allocating new char array
    lw $s0, 20($fp)
    move $a0 $s0
    addi $a0, $a0, 1
    li $v0, 9
    syscall
    move $t0 $v0
    
    #Loading reference to char array of source string
    lw $t1, 12($fp)
    lw $t1, 8($t1)
    lw $s2, 16($fp)
    add $t1, $t1, $s2
    move $s1 $t0
    
    #Copying bytes from one char array to another
    move $a0 $s0
    jal copy
    
    #Null-terminating the string
    sb $zero, 0($t0)
    
    #Allocating new String instance
    li $a0, 12
    li $v0, 9
    syscall
    sw $v0, 0($fp)
    la $t0, String
    sw $t0, 0($v0)
    
    #Storing length and reference to char array
    lw $s0, 20($fp)
    sw $s0, 4($v0)
    sw $s1, 8($v0)
    
    
    #ReturnNode
    lw $a0, 0($fp)
    
    #Restoring saved $ra
    lw $ra, 4($fp)
    
    #Restoring saved $fp
    lw $fp, 8($fp)
    
    #Cleaning stack after call
    addi $sp, $sp, 24
    
    #Return jump
    jr $ra
    
P_constructor:
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, -4
    
    #Saving $fp
    move $fp $sp
    
    #Reserving space for locals
    addi $sp, $sp, -4
    
    #Executing instructions
    #DefaultValueNode
    li $t0, 0
    sw $t0, 0($fp)
    
    #SetAttribNode
    lw $t1, 12($fp)
    lw $t0, 0($fp)
    sw $t0, 4($t1)
    
    #AssignNode
    li $t0, 3
    sw $t0, 0($fp)
    
    #SetAttribNode
    lw $t1, 12($fp)
    lw $t0, 0($fp)
    sw $t0, 4($t1)
    
    #ReturnNode
    lw $a0, 0($fp)
    
    #Restoring saved $ra
    lw $ra, 4($fp)
    
    #Restoring saved $fp
    lw $fp, 8($fp)
    
    #Cleaning stack after call
    addi $sp, $sp, 16
    
    #Return jump
    jr $ra
    
Blah_tiny:
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, -4
    
    #Saving $fp
    move $fp $sp
    
    #Reserving space for locals
    addi $sp, $sp, -4
    
    #Executing instructions
    #LoadNode
    li $a0, 12
    li $v0, 9
    syscall
    sw $v0, 0($fp)
    la $t0, String
    sw $t0, 0($v0)
    li $t0, 2
    sw $t0, 4($v0)
    la $t0, data_0
    sw $t0, 8($v0)
    
    #AssignNode
    li $t0, 0
    sw $t0, 0($fp)
    
    #AssignNode
    li $t0, 0
    sw $t0, 0($fp)
    
    #ReturnNode
    lw $a0, 0($fp)
    
    #Restoring saved $ra
    lw $ra, 4($fp)
    
    #Restoring saved $fp
    lw $fp, 8($fp)
    
    #Cleaning stack after call
    addi $sp, $sp, 16
    
    #Return jump
    jr $ra
    
Blah_add:
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, -4
    
    #Saving $fp
    move $fp $sp
    
    #Reserving space for locals
    addi $sp, $sp, -12
    
    #Executing instructions
    #AssignNode
    li $t0, 1
    sw $t0, -4($fp)
    
    #AssignNode
    li $t0, 2
    sw $t0, -8($fp)
    
    #PlusNode
    lw $t0, -4($fp)
    lw $t1, -8($fp)
    add $t0, $t0, $t1
    sw $t0, 0($fp)
    
    #ReturnNode
    lw $a0, 0($fp)
    
    #Restoring saved $ra
    lw $ra, 4($fp)
    
    #Restoring saved $fp
    lw $fp, 8($fp)
    
    #Cleaning stack after call
    addi $sp, $sp, 24
    
    #Return jump
    jr $ra
    
Blah_compare:
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, -4
    
    #Saving $fp
    move $fp $sp
    
    #Reserving space for locals
    addi $sp, $sp, -12
    
    #Executing instructions
    #AssignNode
    li $t0, 1
    sw $t0, -4($fp)
    
    #AssignNode
    li $t0, 2
    sw $t0, -8($fp)
    
    #LessNode
    lw $t0, -4($fp)
    lw $t1, -8($fp)
    slt $t0, $t0, $t1
    sw $t0, 0($fp)
    
    #ReturnNode
    lw $a0, 0($fp)
    
    #Restoring saved $ra
    lw $ra, 4($fp)
    
    #Restoring saved $fp
    lw $fp, 8($fp)
    
    #Cleaning stack after call
    addi $sp, $sp, 24
    
    #Return jump
    jr $ra
    
Blah_compareEq:
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, -4
    
    #Saving $fp
    move $fp $sp
    
    #Reserving space for locals
    addi $sp, $sp, -12
    
    #Executing instructions
    #AssignNode
    li $t0, 1
    sw $t0, -4($fp)
    
    #AssignNode
    li $t0, 2
    sw $t0, -8($fp)
    
    #EqNode
    lw $t0, -4($fp)
    lw $t1, -8($fp)
    seq $t0, $t0, $t1
    sw $t0, 0($fp)
    
    #ReturnNode
    lw $a0, 0($fp)
    
    #Restoring saved $ra
    lw $ra, 4($fp)
    
    #Restoring saved $fp
    lw $fp, 8($fp)
    
    #Cleaning stack after call
    addi $sp, $sp, 24
    
    #Return jump
    jr $ra
    
Blah_isv:
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, -4
    
    #Saving $fp
    move $fp $sp
    
    #Reserving space for locals
    addi $sp, $sp, -4
    
    #Executing instructions
    #AssignNode
    li $t0, 0
    sw $t0, 0($fp)
    
    #ReturnNode
    lw $a0, 0($fp)
    
    #Restoring saved $ra
    lw $ra, 4($fp)
    
    #Restoring saved $fp
    lw $fp, 8($fp)
    
    #Cleaning stack after call
    addi $sp, $sp, 16
    
    #Return jump
    jr $ra
    
Blah_divByZero:
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, -4
    
    #Saving $fp
    move $fp $sp
    
    #Reserving space for locals
    addi $sp, $sp, -12
    
    #Executing instructions
    #AssignNode
    li $t0, 1
    sw $t0, -4($fp)
    
    #AssignNode
    li $t0, 0
    sw $t0, -8($fp)
    
    #DivideNode
    #Capturing division by zero
    la $a0, division_by_zero
    lw $t0, -8($fp)
    beq $t0, $zero, abort
    
    lw $t0, -4($fp)
    lw $t1, -8($fp)
    div $t0, $t1
    mflo $t0
    sw $t0, 0($fp)
    
    #ReturnNode
    lw $a0, 0($fp)
    
    #Restoring saved $ra
    lw $ra, 4($fp)
    
    #Restoring saved $fp
    lw $fp, 8($fp)
    
    #Cleaning stack after call
    addi $sp, $sp, 24
    
    #Return jump
    jr $ra
    
Blah_cmp:
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, -4
    
    #Saving $fp
    move $fp $sp
    
    #Reserving space for locals
    addi $sp, $sp, -8
    
    #Executing instructions
    #AssignNode
    li $t0, 1
    sw $t0, -4($fp)
    
    #MinusNode
    li $t0, 1
    lw $t1, -4($fp)
    sub $t0, $t0, $t1
    sw $t0, 0($fp)
    
    #ReturnNode
    lw $a0, 0($fp)
    
    #Restoring saved $ra
    lw $ra, 4($fp)
    
    #Restoring saved $fp
    lw $fp, 8($fp)
    
    #Cleaning stack after call
    addi $sp, $sp, 20
    
    #Return jump
    jr $ra
    
Blah_ng:
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, -4
    
    #Saving $fp
    move $fp $sp
    
    #Reserving space for locals
    addi $sp, $sp, -8
    
    #Executing instructions
    #AssignNode
    li $t0, 5
    sw $t0, -4($fp)
    
    #MinusNode
    li $t0, 0
    lw $t1, -4($fp)
    sub $t0, $t0, $t1
    sw $t0, 0($fp)
    
    #ReturnNode
    lw $a0, 0($fp)
    
    #Restoring saved $ra
    lw $ra, 4($fp)
    
    #Restoring saved $fp
    lw $fp, 8($fp)
    
    #Cleaning stack after call
    addi $sp, $sp, 20
    
    #Return jump
    jr $ra
    
Blah_caller:
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, -4
    
    #Saving $fp
    move $fp $sp
    
    #Reserving space for locals
    addi $sp, $sp, -24
    
    #Executing instructions
    #AssignNode
    li $t0, 6
    sw $t0, -8($fp)
    
    #AssignNode
    li $t0, 13
    sw $t0, -12($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -16($fp)
    
    #ParamNode
    lw $t0, -12($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -8($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -16($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #StaticCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    jal Blah_callee
    sw $a0, -4($fp)
    
    #AssignNode
    li $t0, 9
    sw $t0, -12($fp)
    
    #AssignNode
    li $t0, 2
    sw $t0, -16($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -20($fp)
    
    #ParamNode
    lw $t0, -16($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -12($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -20($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #StaticCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    jal Blah_callee
    sw $a0, -8($fp)
    
    #PlusNode
    lw $t0, -4($fp)
    lw $t1, -8($fp)
    add $t0, $t0, $t1
    sw $t0, 0($fp)
    
    #ReturnNode
    lw $a0, 0($fp)
    
    #Restoring saved $ra
    lw $ra, 4($fp)
    
    #Restoring saved $fp
    lw $fp, 8($fp)
    
    #Cleaning stack after call
    addi $sp, $sp, 36
    
    #Return jump
    jr $ra
    
Blah_callee:
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, -4
    
    #Saving $fp
    move $fp $sp
    
    #Reserving space for locals
    addi $sp, $sp, -12
    
    #Executing instructions
    #AssignNode
    lw $t0, 16($fp)
    sw $t0, -4($fp)
    
    #AssignNode
    lw $t0, 20($fp)
    sw $t0, -8($fp)
    
    #PlusNode
    lw $t0, -4($fp)
    lw $t1, -8($fp)
    add $t0, $t0, $t1
    sw $t0, 0($fp)
    
    #ReturnNode
    lw $a0, 0($fp)
    
    #Restoring saved $ra
    lw $ra, 4($fp)
    
    #Restoring saved $fp
    lw $fp, 8($fp)
    
    #Cleaning stack after call
    addi $sp, $sp, 32
    
    #Return jump
    jr $ra
    
Blah_get_t:
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, -4
    
    #Saving $fp
    move $fp $sp
    
    #Reserving space for locals
    addi $sp, $sp, -4
    
    #Executing instructions
    #GetAttribNode
    lw $t0, 12($fp)
    lw $t0, 24($t0)
    sw $t0, 0($fp)
    
    #ReturnNode
    lw $a0, 0($fp)
    
    #Restoring saved $ra
    lw $ra, 4($fp)
    
    #Restoring saved $fp
    lw $fp, 8($fp)
    
    #Cleaning stack after call
    addi $sp, $sp, 16
    
    #Return jump
    jr $ra
    
Blah_useLet:
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, -4
    
    #Saving $fp
    move $fp $sp
    
    #Reserving space for locals
    addi $sp, $sp, -28
    
    #Executing instructions
    #DefaultValueNode
    li $t0, 0
    sw $t0, -16($fp)
    
    #AssignNode
    lw $t0, -16($fp)
    sw $t0, -4($fp)
    
    #AssignNode
    li $t0, 99
    sw $t0, -16($fp)
    
    #AssignNode
    lw $t0, -16($fp)
    sw $t0, -8($fp)
    
    #GetAttribNode
    lw $t0, 12($fp)
    lw $t0, 16($t0)
    sw $t0, -16($fp)
    
    #AssignNode
    lw $t0, -16($fp)
    sw $t0, -12($fp)
    
    #AssignNode
    lw $t0, -4($fp)
    sw $t0, -20($fp)
    
    #AssignNode
    lw $t0, -8($fp)
    sw $t0, -24($fp)
    
    #PlusNode
    lw $t0, -20($fp)
    lw $t1, -24($fp)
    add $t0, $t0, $t1
    sw $t0, -16($fp)
    
    #AssignNode
    lw $t0, -12($fp)
    sw $t0, -20($fp)
    
    #PlusNode
    lw $t0, -16($fp)
    lw $t1, -20($fp)
    add $t0, $t0, $t1
    sw $t0, 0($fp)
    
    #ReturnNode
    lw $a0, 0($fp)
    
    #Restoring saved $ra
    lw $ra, 4($fp)
    
    #Restoring saved $fp
    lw $fp, 8($fp)
    
    #Cleaning stack after call
    addi $sp, $sp, 40
    
    #Return jump
    jr $ra
    
Blah_useIf:
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, -4
    
    #Saving $fp
    move $fp $sp
    
    #Reserving space for locals
    addi $sp, $sp, -20
    
    #Executing instructions
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -8($fp)
    
    #ParamNode
    lw $t0, -8($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -8($fp)
    lw $t0, 0($t0)
    lw $t0, 48($t0)
    jalr $t0
    sw $a0, -4($fp)
    
    #GotoIfNode
    lw $t0, -4($fp)
    bnez $t0, then_label_0
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -12($fp)
    
    #ParamNode
    lw $t0, -12($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -12($fp)
    lw $t0, 0($t0)
    lw $t0, 24($t0)
    jalr $t0
    sw $a0, -8($fp)
    
    #AssignNode
    lw $t0, -8($fp)
    sw $t0, 0($fp)
    
    j fi_label_1
    
    #LabelNode
    
    then_label_0:
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -16($fp)
    
    #ParamNode
    lw $t0, -16($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -16($fp)
    lw $t0, 0($t0)
    lw $t0, 52($t0)
    jalr $t0
    sw $a0, -12($fp)
    
    #AssignNode
    lw $t0, -12($fp)
    sw $t0, 0($fp)
    
    #LabelNode
    
    fi_label_1:
    
    #ReturnNode
    lw $a0, 0($fp)
    
    #Restoring saved $ra
    lw $ra, 4($fp)
    
    #Restoring saved $fp
    lw $fp, 8($fp)
    
    #Cleaning stack after call
    addi $sp, $sp, 32
    
    #Return jump
    jr $ra
    
Blah_useWhile:
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, -4
    
    #Saving $fp
    move $fp $sp
    
    #Reserving space for locals
    addi $sp, $sp, -16
    
    #Executing instructions
    #LabelNode
    
    loop_2:
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -8($fp)
    
    #ParamNode
    lw $t0, -8($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -8($fp)
    lw $t0, 0($t0)
    lw $t0, 48($t0)
    jalr $t0
    sw $a0, -4($fp)
    
    #GotoIfNode
    lw $t0, -4($fp)
    bnez $t0, body_4
    
    j pool_3
    
    #LabelNode
    
    body_4:
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -12($fp)
    
    #ParamNode
    lw $t0, -12($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -12($fp)
    lw $t0, 0($t0)
    lw $t0, 64($t0)
    jalr $t0
    sw $a0, -8($fp)
    
    j loop_2
    
    #LabelNode
    
    pool_3:
    
    #DefaultValueNode
    la $t0, void
    sw $t0, 0($fp)
    
    #ReturnNode
    lw $a0, 0($fp)
    
    #Restoring saved $ra
    lw $ra, 4($fp)
    
    #Restoring saved $fp
    lw $fp, 8($fp)
    
    #Cleaning stack after call
    addi $sp, $sp, 28
    
    #Return jump
    jr $ra
    
Blah_useCase:
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, -4
    
    #Saving $fp
    move $fp $sp
    
    #Reserving space for locals
    addi $sp, $sp, -64
    
    #Executing instructions
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -4($fp)
    
    #TypeOfNode
    #Capturing case on void
    la $a0, case_on_void
    lw $t0, -4($fp)
    la $t1, void
    beq $t0, $t1, abort
    
    #Executing typeof
    lw $t0, -4($fp)
    lw $t0, 0($t0)
    sw $t0, -8($fp)
    
    #LabelNode
    
    loop_5:
    
    #EqNode
    lw $t0, -8($fp)
    la $t1, P
    seq $t0, $t0, $t1
    sw $t0, -12($fp)
    
    #GotoIfNode
    lw $t0, -12($fp)
    bnez $t0, pool_6
    
    #EqNode
    lw $t0, -8($fp)
    la $t1, C
    seq $t0, $t0, $t1
    sw $t0, -12($fp)
    
    #GotoIfNode
    lw $t0, -12($fp)
    bnez $t0, pool_6
    
    #EqNode
    lw $t0, -8($fp)
    la $t1, Blah
    seq $t0, $t0, $t1
    sw $t0, -12($fp)
    
    #GotoIfNode
    lw $t0, -12($fp)
    bnez $t0, pool_6
    
    #ParentOfNode
    lw $t0, -8($fp)
    lw $t0, 4($t0)
    sw $t0, -8($fp)
    
    #EqNode
    lw $t0, -8($fp)
    lw $t1, -8($fp)
    seq $t0, $t0, $t1
    sw $t0, -12($fp)
    
    #GotoIfNode
    lw $t0, -12($fp)
    bnez $t0, pool_6
    
    j loop_5
    
    #LabelNode
    
    pool_6:
    
    #EqNode
    lw $t0, -8($fp)
    la $t1, P
    seq $t0, $t0, $t1
    sw $t0, -20($fp)
    
    #MinusNode
    li $t0, 1
    lw $t1, -20($fp)
    sub $t0, $t0, $t1
    sw $t0, -24($fp)
    
    #GotoIfNode
    lw $t0, -24($fp)
    bnez $t0, next0_8
    
    #AssignNode
    lw $t0, -4($fp)
    sw $t0, -16($fp)
    
    #AssignNode
    li $t0, 3
    sw $t0, -28($fp)
    
    #AssignNode
    lw $t0, -28($fp)
    sw $t0, 0($fp)
    
    j end_7
    
    #LabelNode
    
    next0_8:
    
    #EqNode
    lw $t0, -8($fp)
    la $t1, C
    seq $t0, $t0, $t1
    sw $t0, -36($fp)
    
    #MinusNode
    li $t0, 1
    lw $t1, -36($fp)
    sub $t0, $t0, $t1
    sw $t0, -40($fp)
    
    #GotoIfNode
    lw $t0, -40($fp)
    bnez $t0, next1_9
    
    #AssignNode
    lw $t0, -4($fp)
    sw $t0, -32($fp)
    
    #AssignNode
    li $t0, 4
    sw $t0, -44($fp)
    
    #AssignNode
    lw $t0, -44($fp)
    sw $t0, 0($fp)
    
    j end_7
    
    #LabelNode
    
    next1_9:
    
    #EqNode
    lw $t0, -8($fp)
    la $t1, Blah
    seq $t0, $t0, $t1
    sw $t0, -52($fp)
    
    #MinusNode
    li $t0, 1
    lw $t1, -52($fp)
    sub $t0, $t0, $t1
    sw $t0, -56($fp)
    
    #GotoIfNode
    lw $t0, -56($fp)
    bnez $t0, next2_10
    
    #AssignNode
    lw $t0, -4($fp)
    sw $t0, -48($fp)
    
    #AssignNode
    li $t0, 5
    sw $t0, -60($fp)
    
    #AssignNode
    lw $t0, -60($fp)
    sw $t0, 0($fp)
    
    j end_7
    
    #LabelNode
    
    next2_10:
    
    la $a0, case_missmatch
    j abort
    
    #LabelNode
    
    end_7:
    
    #ReturnNode
    lw $a0, 0($fp)
    
    #Restoring saved $ra
    lw $ra, 4($fp)
    
    #Restoring saved $fp
    lw $fp, 8($fp)
    
    #Cleaning stack after call
    addi $sp, $sp, 76
    
    #Return jump
    jr $ra
    
Blah_useNew:
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, -4
    
    #Saving $fp
    move $fp $sp
    
    #Reserving space for locals
    addi $sp, $sp, -8
    
    #Executing instructions
    #DefaultValueNode
    li $t0, 0
    sw $t0, 0($fp)
    
    #DefaultValueNode
    li $t0, 0
    sw $t0, 0($fp)
    
    #AllocateNode
    li $a0, 4
    li $v0, 9
    syscall
    sw $v0, 0($fp)
    la $t0, C
    sw $t0, 0($v0)
    
    #ParamNode
    lw $t0, 0($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #StaticCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    jal C_constructor
    sw $a0, -4($fp)
    
    #AllocateNode
    li $a0, 4
    li $v0, 9
    syscall
    sw $v0, 0($fp)
    la $t0, Main
    sw $t0, 0($v0)
    
    #ParamNode
    lw $t0, 0($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #StaticCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    jal Main_constructor
    sw $a0, -4($fp)
    
    #AllocateSelfNode
    lw $t0, 12($fp)
    lw $t0, 0($t0)
    lw $a0, 8($t0)
    li $v0, 9
    syscall
    sw $v0, 0($fp)
    sw $t0, 0($v0)
    
    #ParamNode
    lw $t0, 0($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, 12($fp)
    lw $t0, 0($t0)
    lw $t0, 140($t0)
    jalr $t0
    sw $a0, -4($fp)
    
    #ReturnNode
    lw $a0, 0($fp)
    
    #Restoring saved $ra
    lw $ra, 4($fp)
    
    #Restoring saved $fp
    lw $fp, 8($fp)
    
    #Cleaning stack after call
    addi $sp, $sp, 20
    
    #Return jump
    jr $ra
    
Blah_doThemAll:
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, -4
    
    #Saving $fp
    move $fp $sp
    
    #Reserving space for locals
    addi $sp, $sp, -16
    
    #Executing instructions
    #LoadNode
    li $a0, 12
    li $v0, 9
    syscall
    sw $v0, -4($fp)
    la $t0, String
    sw $t0, 0($v0)
    li $t0, 8
    sw $t0, 4($v0)
    la $t0, data_1
    sw $t0, 8($v0)
    
    #GetAttribNode
    lw $t0, 12($fp)
    lw $t0, 28($t0)
    sw $t0, -8($fp)
    
    #ParamNode
    lw $t0, -4($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -8($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #StaticCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    jal IO_out_string
    sw $a0, 0($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -4($fp)
    
    #ParamNode
    lw $t0, -4($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -4($fp)
    lw $t0, 0($t0)
    lw $t0, 24($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -4($fp)
    
    #ParamNode
    lw $t0, -4($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -4($fp)
    lw $t0, 0($t0)
    lw $t0, 28($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -4($fp)
    
    #ParamNode
    lw $t0, -4($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -4($fp)
    lw $t0, 0($t0)
    lw $t0, 32($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -4($fp)
    
    #ParamNode
    lw $t0, -4($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -4($fp)
    lw $t0, 0($t0)
    lw $t0, 36($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -4($fp)
    
    #ParamNode
    lw $t0, -4($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -4($fp)
    lw $t0, 0($t0)
    lw $t0, 40($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -4($fp)
    
    #ParamNode
    lw $t0, -4($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -4($fp)
    lw $t0, 0($t0)
    lw $t0, 48($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -4($fp)
    
    #ParamNode
    lw $t0, -4($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -4($fp)
    lw $t0, 0($t0)
    lw $t0, 52($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -4($fp)
    
    #ParamNode
    lw $t0, -4($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -4($fp)
    lw $t0, 0($t0)
    lw $t0, 56($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #AssignNode
    li $t0, 3
    sw $t0, -4($fp)
    
    #AssignNode
    li $t0, 4
    sw $t0, -8($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -12($fp)
    
    #ParamNode
    lw $t0, -8($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -4($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -12($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -12($fp)
    lw $t0, 0($t0)
    lw $t0, 60($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -4($fp)
    
    #ParamNode
    lw $t0, -4($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -4($fp)
    lw $t0, 0($t0)
    lw $t0, 64($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -4($fp)
    
    #ParamNode
    lw $t0, -4($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -4($fp)
    lw $t0, 0($t0)
    lw $t0, 68($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -4($fp)
    
    #ParamNode
    lw $t0, -4($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -4($fp)
    lw $t0, 0($t0)
    lw $t0, 72($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -4($fp)
    
    #ParamNode
    lw $t0, -4($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -4($fp)
    lw $t0, 0($t0)
    lw $t0, 76($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -4($fp)
    
    #ParamNode
    lw $t0, -4($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -4($fp)
    lw $t0, 0($t0)
    lw $t0, 80($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -4($fp)
    
    #ParamNode
    lw $t0, -4($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -4($fp)
    lw $t0, 0($t0)
    lw $t0, 84($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #LoadNode
    li $a0, 12
    li $v0, 9
    syscall
    sw $v0, -4($fp)
    la $t0, String
    sw $t0, 0($v0)
    li $t0, 15
    sw $t0, 4($v0)
    la $t0, data_2
    sw $t0, 8($v0)
    
    #GetAttribNode
    lw $t0, 12($fp)
    lw $t0, 28($t0)
    sw $t0, -8($fp)
    
    #ParamNode
    lw $t0, -4($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -8($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #StaticCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    jal IO_out_string
    sw $a0, 0($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -4($fp)
    
    #ParamNode
    lw $t0, -4($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -4($fp)
    lw $t0, 0($t0)
    lw $t0, 92($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -4($fp)
    
    #ParamNode
    lw $t0, -4($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -4($fp)
    lw $t0, 0($t0)
    lw $t0, 104($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -4($fp)
    
    #ParamNode
    lw $t0, -4($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -4($fp)
    lw $t0, 0($t0)
    lw $t0, 112($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -4($fp)
    
    #ParamNode
    lw $t0, -4($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -4($fp)
    lw $t0, 0($t0)
    lw $t0, 96($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -4($fp)
    
    #ParamNode
    lw $t0, -4($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -4($fp)
    lw $t0, 0($t0)
    lw $t0, 124($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -4($fp)
    
    #ParamNode
    lw $t0, -4($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -4($fp)
    lw $t0, 0($t0)
    lw $t0, 128($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -4($fp)
    
    #ParamNode
    lw $t0, -4($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -4($fp)
    lw $t0, 0($t0)
    lw $t0, 132($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -4($fp)
    
    #ParamNode
    lw $t0, -4($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -4($fp)
    lw $t0, 0($t0)
    lw $t0, 136($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #AssignNode
    li $t0, 0
    sw $t0, 0($fp)
    
    #ReturnNode
    lw $a0, 0($fp)
    
    #Restoring saved $ra
    lw $ra, 4($fp)
    
    #Restoring saved $fp
    lw $fp, 8($fp)
    
    #Cleaning stack after call
    addi $sp, $sp, 28
    
    #Return jump
    jr $ra
    
Blah_bigIf:
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, -4
    
    #Saving $fp
    move $fp $sp
    
    #Reserving space for locals
    addi $sp, $sp, -32
    
    #Executing instructions
    #LoadNode
    li $a0, 12
    li $v0, 9
    syscall
    sw $v0, -4($fp)
    la $t0, String
    sw $t0, 0($v0)
    li $t0, 6
    sw $t0, 4($v0)
    la $t0, data_3
    sw $t0, 8($v0)
    
    #GetAttribNode
    lw $t0, 12($fp)
    lw $t0, 28($t0)
    sw $t0, -8($fp)
    
    #ParamNode
    lw $t0, -4($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -8($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -8($fp)
    lw $t0, 0($t0)
    lw $t0, 24($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #AssignNode
    li $t0, 1
    sw $t0, -4($fp)
    
    #GotoIfNode
    lw $t0, -4($fp)
    bnez $t0, then_label_11
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -12($fp)
    
    #ParamNode
    lw $t0, -12($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #StaticCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    jal Object_abort
    sw $a0, -8($fp)
    
    #AssignNode
    lw $t0, -8($fp)
    sw $t0, 0($fp)
    
    j fi_label_12
    
    #LabelNode
    
    then_label_11:
    
    #AssignNode
    li $t0, 0
    sw $t0, -16($fp)
    
    #GotoIfNode
    lw $t0, -16($fp)
    bnez $t0, then_label_13
    
    #AssignNode
    li $t0, 0
    sw $t0, -20($fp)
    
    #AssignNode
    lw $t0, -20($fp)
    sw $t0, -12($fp)
    
    j fi_label_14
    
    #LabelNode
    
    then_label_13:
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -28($fp)
    
    #ParamNode
    lw $t0, -28($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #StaticCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    jal Object_abort
    sw $a0, -24($fp)
    
    #AssignNode
    lw $t0, -24($fp)
    sw $t0, -12($fp)
    
    #LabelNode
    
    fi_label_14:
    
    #AssignNode
    lw $t0, -12($fp)
    sw $t0, 0($fp)
    
    #LabelNode
    
    fi_label_12:
    
    #AssignNode
    li $t0, 0
    sw $t0, -4($fp)
    
    #GotoIfNode
    lw $t0, -4($fp)
    bnez $t0, then_label_15
    
    #AssignNode
    li $t0, 0
    sw $t0, -12($fp)
    
    #GotoIfNode
    lw $t0, -12($fp)
    bnez $t0, then_label_17
    
    #AssignNode
    li $t0, 0
    sw $t0, -16($fp)
    
    #AssignNode
    lw $t0, -16($fp)
    sw $t0, -8($fp)
    
    j fi_label_18
    
    #LabelNode
    
    then_label_17:
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -24($fp)
    
    #ParamNode
    lw $t0, -24($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #StaticCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    jal Object_abort
    sw $a0, -20($fp)
    
    #AssignNode
    lw $t0, -20($fp)
    sw $t0, -8($fp)
    
    #LabelNode
    
    fi_label_18:
    
    #AssignNode
    lw $t0, -8($fp)
    sw $t0, 0($fp)
    
    j fi_label_16
    
    #LabelNode
    
    then_label_15:
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -16($fp)
    
    #ParamNode
    lw $t0, -16($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #StaticCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    jal Object_abort
    sw $a0, -12($fp)
    
    #AssignNode
    lw $t0, -12($fp)
    sw $t0, 0($fp)
    
    #LabelNode
    
    fi_label_16:
    
    #AssignNode
    li $t0, 1
    sw $t0, -4($fp)
    
    #GotoIfNode
    lw $t0, -4($fp)
    bnez $t0, then_label_19
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -12($fp)
    
    #ParamNode
    lw $t0, -12($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #StaticCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    jal Object_abort
    sw $a0, -8($fp)
    
    #AssignNode
    lw $t0, -8($fp)
    sw $t0, 0($fp)
    
    j fi_label_20
    
    #LabelNode
    
    then_label_19:
    
    #AssignNode
    li $t0, 1
    sw $t0, -16($fp)
    
    #GotoIfNode
    lw $t0, -16($fp)
    bnez $t0, then_label_21
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -24($fp)
    
    #ParamNode
    lw $t0, -24($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #StaticCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    jal Object_abort
    sw $a0, -20($fp)
    
    #AssignNode
    lw $t0, -20($fp)
    sw $t0, -12($fp)
    
    j fi_label_22
    
    #LabelNode
    
    then_label_21:
    
    #AssignNode
    li $t0, 0
    sw $t0, -24($fp)
    
    #AssignNode
    lw $t0, -24($fp)
    sw $t0, -12($fp)
    
    #LabelNode
    
    fi_label_22:
    
    #AssignNode
    lw $t0, -12($fp)
    sw $t0, 0($fp)
    
    #LabelNode
    
    fi_label_20:
    
    #AssignNode
    li $t0, 0
    sw $t0, -4($fp)
    
    #GotoIfNode
    lw $t0, -4($fp)
    bnez $t0, then_label_23
    
    #AssignNode
    li $t0, 1
    sw $t0, -12($fp)
    
    #GotoIfNode
    lw $t0, -12($fp)
    bnez $t0, then_label_25
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -20($fp)
    
    #ParamNode
    lw $t0, -20($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #StaticCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    jal Object_abort
    sw $a0, -16($fp)
    
    #AssignNode
    lw $t0, -16($fp)
    sw $t0, -8($fp)
    
    j fi_label_26
    
    #LabelNode
    
    then_label_25:
    
    #AssignNode
    li $t0, 0
    sw $t0, -20($fp)
    
    #AssignNode
    lw $t0, -20($fp)
    sw $t0, -8($fp)
    
    #LabelNode
    
    fi_label_26:
    
    #AssignNode
    lw $t0, -8($fp)
    sw $t0, 0($fp)
    
    j fi_label_24
    
    #LabelNode
    
    then_label_23:
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -16($fp)
    
    #ParamNode
    lw $t0, -16($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #StaticCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    jal Object_abort
    sw $a0, -12($fp)
    
    #AssignNode
    lw $t0, -12($fp)
    sw $t0, 0($fp)
    
    #LabelNode
    
    fi_label_24:
    
    #AssignNode
    li $t0, 0
    sw $t0, 0($fp)
    
    #ReturnNode
    lw $a0, 0($fp)
    
    #Restoring saved $ra
    lw $ra, 4($fp)
    
    #Restoring saved $fp
    lw $fp, 8($fp)
    
    #Cleaning stack after call
    addi $sp, $sp, 44
    
    #Return jump
    jr $ra
    
Blah_bigWhile:
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, -4
    
    #Saving $fp
    move $fp $sp
    
    #Reserving space for locals
    addi $sp, $sp, -60
    
    #Executing instructions
    #LoadNode
    li $a0, 12
    li $v0, 9
    syscall
    sw $v0, -36($fp)
    la $t0, String
    sw $t0, 0($v0)
    li $t0, 9
    sw $t0, 4($v0)
    la $t0, data_4
    sw $t0, 8($v0)
    
    #GetAttribNode
    lw $t0, 12($fp)
    lw $t0, 28($t0)
    sw $t0, -40($fp)
    
    #ParamNode
    lw $t0, -36($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -40($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -40($fp)
    lw $t0, 0($t0)
    lw $t0, 24($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #AssignNode
    li $t0, 34
    sw $t0, -36($fp)
    
    #AssignNode
    lw $t0, -36($fp)
    sw $t0, -28($fp)
    
    #AssignNode
    li $t0, 0
    sw $t0, -36($fp)
    
    #AssignNode
    lw $t0, -36($fp)
    sw $t0, -32($fp)
    
    #LabelNode
    
    loop_27:
    
    #AssignNode
    lw $t0, -28($fp)
    sw $t0, -44($fp)
    
    #AssignNode
    li $t0, 10
    sw $t0, -48($fp)
    
    #LessEqNode
    lw $t0, -44($fp)
    lw $t1, -48($fp)
    sleu $t0, $t0, $t1
    sw $t0, -40($fp)
    
    #MinusNode
    li $t0, 1
    lw $t1, -40($fp)
    sub $t0, $t0, $t1
    sw $t0, -36($fp)
    
    #GotoIfNode
    lw $t0, -36($fp)
    bnez $t0, body_29
    
    j pool_28
    
    #LabelNode
    
    body_29:
    
    #AssignNode
    lw $t0, -28($fp)
    sw $t0, -44($fp)
    
    #AssignNode
    li $t0, 1
    sw $t0, -48($fp)
    
    #MinusNode
    lw $t0, -44($fp)
    lw $t1, -48($fp)
    sub $t0, $t0, $t1
    sw $t0, -40($fp)
    
    #AssignNode
    lw $t0, -40($fp)
    sw $t0, -28($fp)
    
    #AssignNode
    lw $t0, -32($fp)
    sw $t0, -44($fp)
    
    #AssignNode
    li $t0, 1
    sw $t0, -48($fp)
    
    #PlusNode
    lw $t0, -44($fp)
    lw $t1, -48($fp)
    add $t0, $t0, $t1
    sw $t0, -40($fp)
    
    #AssignNode
    lw $t0, -40($fp)
    sw $t0, -32($fp)
    
    j loop_27
    
    #LabelNode
    
    pool_28:
    
    #DefaultValueNode
    la $t0, void
    sw $t0, 0($fp)
    
    #AssignNode
    lw $t0, -28($fp)
    sw $t0, -44($fp)
    
    #AssignNode
    li $t0, 10
    sw $t0, -48($fp)
    
    #EqNode
    lw $t0, -44($fp)
    lw $t1, -48($fp)
    seq $t0, $t0, $t1
    sw $t0, -40($fp)
    
    #MinusNode
    li $t0, 1
    lw $t1, -40($fp)
    sub $t0, $t0, $t1
    sw $t0, -36($fp)
    
    #GotoIfNode
    lw $t0, -36($fp)
    bnez $t0, then_label_30
    
    #AssignNode
    lw $t0, -32($fp)
    sw $t0, -52($fp)
    
    #AssignNode
    li $t0, 24
    sw $t0, -56($fp)
    
    #EqNode
    lw $t0, -52($fp)
    lw $t1, -56($fp)
    seq $t0, $t0, $t1
    sw $t0, -48($fp)
    
    #MinusNode
    li $t0, 1
    lw $t1, -48($fp)
    sub $t0, $t0, $t1
    sw $t0, -44($fp)
    
    #GotoIfNode
    lw $t0, -44($fp)
    bnez $t0, then_label_32
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -48($fp)
    
    #AssignNode
    lw $t0, -48($fp)
    sw $t0, -40($fp)
    
    j fi_label_33
    
    #LabelNode
    
    then_label_32:
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -56($fp)
    
    #ParamNode
    lw $t0, -56($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -56($fp)
    lw $t0, 0($t0)
    lw $t0, 12($t0)
    jalr $t0
    sw $a0, -52($fp)
    
    #AssignNode
    lw $t0, -52($fp)
    sw $t0, -40($fp)
    
    #LabelNode
    
    fi_label_33:
    
    #AssignNode
    lw $t0, -40($fp)
    sw $t0, 0($fp)
    
    j fi_label_31
    
    #LabelNode
    
    then_label_30:
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -48($fp)
    
    #ParamNode
    lw $t0, -48($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -48($fp)
    lw $t0, 0($t0)
    lw $t0, 12($t0)
    jalr $t0
    sw $a0, -44($fp)
    
    #AssignNode
    lw $t0, -44($fp)
    sw $t0, 0($fp)
    
    #LabelNode
    
    fi_label_31:
    
    #DefaultValueNode
    li $t0, 0
    sw $t0, -28($fp)
    
    #AssignNode
    lw $t0, -28($fp)
    sw $t0, -4($fp)
    
    #DefaultValueNode
    li $t0, 0
    sw $t0, -28($fp)
    
    #AssignNode
    lw $t0, -28($fp)
    sw $t0, -8($fp)
    
    #DefaultValueNode
    li $t0, 0
    sw $t0, -28($fp)
    
    #AssignNode
    lw $t0, -28($fp)
    sw $t0, -12($fp)
    
    #AssignNode
    li $t0, 0
    sw $t0, -28($fp)
    
    #AssignNode
    lw $t0, -28($fp)
    sw $t0, -16($fp)
    
    #AssignNode
    li $t0, 0
    sw $t0, -28($fp)
    
    #AssignNode
    lw $t0, -28($fp)
    sw $t0, -20($fp)
    
    #AssignNode
    li $t0, 0
    sw $t0, -28($fp)
    
    #AssignNode
    lw $t0, -28($fp)
    sw $t0, -24($fp)
    
    #AssignNode
    li $t0, 0
    sw $t0, 0($fp)
    
    #AssignNode
    lw $t0, 0($fp)
    sw $t0, -4($fp)
    
    #LabelNode
    
    loop_34:
    
    #AssignNode
    lw $t0, -4($fp)
    sw $t0, -32($fp)
    
    #AssignNode
    li $t0, 10
    sw $t0, -36($fp)
    
    #LessNode
    lw $t0, -32($fp)
    lw $t1, -36($fp)
    slt $t0, $t0, $t1
    sw $t0, -28($fp)
    
    #GotoIfNode
    lw $t0, -28($fp)
    bnez $t0, body_36
    
    j pool_35
    
    #LabelNode
    
    body_36:
    
    #AssignNode
    li $t0, 0
    sw $t0, -32($fp)
    
    #AssignNode
    lw $t0, -32($fp)
    sw $t0, -8($fp)
    
    #LabelNode
    
    loop_37:
    
    #AssignNode
    lw $t0, -8($fp)
    sw $t0, -40($fp)
    
    #AssignNode
    li $t0, 10
    sw $t0, -44($fp)
    
    #LessNode
    lw $t0, -40($fp)
    lw $t1, -44($fp)
    slt $t0, $t0, $t1
    sw $t0, -36($fp)
    
    #GotoIfNode
    lw $t0, -36($fp)
    bnez $t0, body_39
    
    j pool_38
    
    #LabelNode
    
    body_39:
    
    #AssignNode
    li $t0, 0
    sw $t0, -40($fp)
    
    #AssignNode
    lw $t0, -40($fp)
    sw $t0, -12($fp)
    
    #LabelNode
    
    loop_40:
    
    #AssignNode
    lw $t0, -12($fp)
    sw $t0, -48($fp)
    
    #AssignNode
    li $t0, 10
    sw $t0, -52($fp)
    
    #LessNode
    lw $t0, -48($fp)
    lw $t1, -52($fp)
    slt $t0, $t0, $t1
    sw $t0, -44($fp)
    
    #GotoIfNode
    lw $t0, -44($fp)
    bnez $t0, body_42
    
    j pool_41
    
    #LabelNode
    
    body_42:
    
    #AssignNode
    lw $t0, -12($fp)
    sw $t0, -52($fp)
    
    #AssignNode
    li $t0, 1
    sw $t0, -56($fp)
    
    #PlusNode
    lw $t0, -52($fp)
    lw $t1, -56($fp)
    add $t0, $t0, $t1
    sw $t0, -48($fp)
    
    #AssignNode
    lw $t0, -48($fp)
    sw $t0, -12($fp)
    
    #AssignNode
    lw $t0, -24($fp)
    sw $t0, -52($fp)
    
    #AssignNode
    li $t0, 1
    sw $t0, -56($fp)
    
    #PlusNode
    lw $t0, -52($fp)
    lw $t1, -56($fp)
    add $t0, $t0, $t1
    sw $t0, -48($fp)
    
    #AssignNode
    lw $t0, -48($fp)
    sw $t0, -24($fp)
    
    j loop_40
    
    #LabelNode
    
    pool_41:
    
    #DefaultValueNode
    la $t0, void
    sw $t0, -40($fp)
    
    #AssignNode
    lw $t0, -8($fp)
    sw $t0, -44($fp)
    
    #AssignNode
    li $t0, 1
    sw $t0, -48($fp)
    
    #PlusNode
    lw $t0, -44($fp)
    lw $t1, -48($fp)
    add $t0, $t0, $t1
    sw $t0, -40($fp)
    
    #AssignNode
    lw $t0, -40($fp)
    sw $t0, -8($fp)
    
    #AssignNode
    lw $t0, -20($fp)
    sw $t0, -44($fp)
    
    #AssignNode
    li $t0, 1
    sw $t0, -48($fp)
    
    #PlusNode
    lw $t0, -44($fp)
    lw $t1, -48($fp)
    add $t0, $t0, $t1
    sw $t0, -40($fp)
    
    #AssignNode
    lw $t0, -40($fp)
    sw $t0, -20($fp)
    
    j loop_37
    
    #LabelNode
    
    pool_38:
    
    #DefaultValueNode
    la $t0, void
    sw $t0, -32($fp)
    
    #AssignNode
    lw $t0, -4($fp)
    sw $t0, -36($fp)
    
    #AssignNode
    li $t0, 1
    sw $t0, -40($fp)
    
    #PlusNode
    lw $t0, -36($fp)
    lw $t1, -40($fp)
    add $t0, $t0, $t1
    sw $t0, -32($fp)
    
    #AssignNode
    lw $t0, -32($fp)
    sw $t0, -4($fp)
    
    #AssignNode
    lw $t0, -16($fp)
    sw $t0, -36($fp)
    
    #AssignNode
    li $t0, 1
    sw $t0, -40($fp)
    
    #PlusNode
    lw $t0, -36($fp)
    lw $t1, -40($fp)
    add $t0, $t0, $t1
    sw $t0, -32($fp)
    
    #AssignNode
    lw $t0, -32($fp)
    sw $t0, -16($fp)
    
    j loop_34
    
    #LabelNode
    
    pool_35:
    
    #DefaultValueNode
    la $t0, void
    sw $t0, 0($fp)
    
    #AssignNode
    lw $t0, -16($fp)
    sw $t0, -32($fp)
    
    #AssignNode
    li $t0, 10
    sw $t0, -36($fp)
    
    #EqNode
    lw $t0, -32($fp)
    lw $t1, -36($fp)
    seq $t0, $t0, $t1
    sw $t0, -28($fp)
    
    #AssignNode
    li $t0, 12
    sw $t0, -32($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -36($fp)
    
    #ParamNode
    lw $t0, -32($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -28($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -36($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -36($fp)
    lw $t0, 0($t0)
    lw $t0, 108($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #AssignNode
    lw $t0, -20($fp)
    sw $t0, -32($fp)
    
    #AssignNode
    li $t0, 100
    sw $t0, -36($fp)
    
    #EqNode
    lw $t0, -32($fp)
    lw $t1, -36($fp)
    seq $t0, $t0, $t1
    sw $t0, -28($fp)
    
    #AssignNode
    li $t0, 123
    sw $t0, -32($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -36($fp)
    
    #ParamNode
    lw $t0, -32($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -28($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -36($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -36($fp)
    lw $t0, 0($t0)
    lw $t0, 108($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #AssignNode
    lw $t0, -24($fp)
    sw $t0, -32($fp)
    
    #AssignNode
    li $t0, 1000
    sw $t0, -36($fp)
    
    #EqNode
    lw $t0, -32($fp)
    lw $t1, -36($fp)
    seq $t0, $t0, $t1
    sw $t0, -28($fp)
    
    #AssignNode
    li $t0, 1234
    sw $t0, -32($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -36($fp)
    
    #ParamNode
    lw $t0, -32($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -28($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -36($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -36($fp)
    lw $t0, 0($t0)
    lw $t0, 108($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #ReturnNode
    lw $a0, 0($fp)
    
    #Restoring saved $ra
    lw $ra, 4($fp)
    
    #Restoring saved $fp
    lw $fp, 8($fp)
    
    #Cleaning stack after call
    addi $sp, $sp, 72
    
    #Return jump
    jr $ra
    
Blah_bail:
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, -4
    
    #Saving $fp
    move $fp $sp
    
    #Reserving space for locals
    addi $sp, $sp, -12
    
    #Executing instructions
    #LoadNode
    li $a0, 12
    li $v0, 9
    syscall
    sw $v0, -4($fp)
    la $t0, String
    sw $t0, 0($v0)
    li $t0, 8
    sw $t0, 4($v0)
    la $t0, data_5
    sw $t0, 8($v0)
    
    #GetAttribNode
    lw $t0, 12($fp)
    lw $t0, 28($t0)
    sw $t0, -8($fp)
    
    #ParamNode
    lw $t0, -4($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -8($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -8($fp)
    lw $t0, 0($t0)
    lw $t0, 24($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #AssignNode
    lw $t0, 16($fp)
    sw $t0, -4($fp)
    
    #GetAttribNode
    lw $t0, 12($fp)
    lw $t0, 28($t0)
    sw $t0, -8($fp)
    
    #ParamNode
    lw $t0, -4($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -8($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -8($fp)
    lw $t0, 0($t0)
    lw $t0, 28($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #LoadNode
    li $a0, 12
    li $v0, 9
    syscall
    sw $v0, -4($fp)
    la $t0, String
    sw $t0, 0($v0)
    li $t0, 1
    sw $t0, 4($v0)
    la $t0, data_6
    sw $t0, 8($v0)
    
    #GetAttribNode
    lw $t0, 12($fp)
    lw $t0, 28($t0)
    sw $t0, -8($fp)
    
    #ParamNode
    lw $t0, -4($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -8($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -8($fp)
    lw $t0, 0($t0)
    lw $t0, 24($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -4($fp)
    
    #ParamNode
    lw $t0, -4($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -4($fp)
    lw $t0, 0($t0)
    lw $t0, 12($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #ReturnNode
    lw $a0, 0($fp)
    
    #Restoring saved $ra
    lw $ra, 4($fp)
    
    #Restoring saved $fp
    lw $fp, 8($fp)
    
    #Cleaning stack after call
    addi $sp, $sp, 28
    
    #Return jump
    jr $ra
    
Blah_bigMath:
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, -4
    
    #Saving $fp
    move $fp $sp
    
    #Reserving space for locals
    addi $sp, $sp, -192
    
    #Executing instructions
    #AssignNode
    li $t0, 1
    sw $t0, -12($fp)
    
    #AssignNode
    li $t0, 2
    sw $t0, -16($fp)
    
    #PlusNode
    lw $t0, -12($fp)
    lw $t1, -16($fp)
    add $t0, $t0, $t1
    sw $t0, -8($fp)
    
    #AssignNode
    li $t0, 3
    sw $t0, -12($fp)
    
    #EqNode
    lw $t0, -8($fp)
    lw $t1, -12($fp)
    seq $t0, $t0, $t1
    sw $t0, -4($fp)
    
    #GotoIfNode
    lw $t0, -4($fp)
    bnez $t0, then_label_43
    
    #AssignNode
    li $t0, 55
    sw $t0, -12($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -16($fp)
    
    #ParamNode
    lw $t0, -12($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -16($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -16($fp)
    lw $t0, 0($t0)
    lw $t0, 100($t0)
    jalr $t0
    sw $a0, -8($fp)
    
    #AssignNode
    lw $t0, -8($fp)
    sw $t0, 0($fp)
    
    j fi_label_44
    
    #LabelNode
    
    then_label_43:
    
    #AssignNode
    li $t0, 0
    sw $t0, -12($fp)
    
    #AssignNode
    lw $t0, -12($fp)
    sw $t0, 0($fp)
    
    #LabelNode
    
    fi_label_44:
    
    #LoadNode
    li $a0, 12
    li $v0, 9
    syscall
    sw $v0, -4($fp)
    la $t0, String
    sw $t0, 0($v0)
    li $t0, 8
    sw $t0, 4($v0)
    la $t0, data_7
    sw $t0, 8($v0)
    
    #GetAttribNode
    lw $t0, 12($fp)
    lw $t0, 28($t0)
    sw $t0, -8($fp)
    
    #ParamNode
    lw $t0, -4($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -8($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -8($fp)
    lw $t0, 0($t0)
    lw $t0, 24($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #AssignNode
    li $t0, 1
    sw $t0, -8($fp)
    
    #AssignNode
    li $t0, 1
    sw $t0, -12($fp)
    
    #EqNode
    lw $t0, -8($fp)
    lw $t1, -12($fp)
    seq $t0, $t0, $t1
    sw $t0, -4($fp)
    
    #GotoIfNode
    lw $t0, -4($fp)
    bnez $t0, then_label_45
    
    #AssignNode
    li $t0, 10
    sw $t0, -12($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -16($fp)
    
    #ParamNode
    lw $t0, -12($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -16($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -16($fp)
    lw $t0, 0($t0)
    lw $t0, 100($t0)
    jalr $t0
    sw $a0, -8($fp)
    
    #AssignNode
    lw $t0, -8($fp)
    sw $t0, 0($fp)
    
    j fi_label_46
    
    #LabelNode
    
    then_label_45:
    
    #AssignNode
    li $t0, 1
    sw $t0, -24($fp)
    
    #AssignNode
    li $t0, 2
    sw $t0, -28($fp)
    
    #PlusNode
    lw $t0, -24($fp)
    lw $t1, -28($fp)
    add $t0, $t0, $t1
    sw $t0, -20($fp)
    
    #AssignNode
    li $t0, 3
    sw $t0, -24($fp)
    
    #EqNode
    lw $t0, -20($fp)
    lw $t1, -24($fp)
    seq $t0, $t0, $t1
    sw $t0, -16($fp)
    
    #GotoIfNode
    lw $t0, -16($fp)
    bnez $t0, then_label_47
    
    #AssignNode
    li $t0, 9
    sw $t0, -24($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -28($fp)
    
    #ParamNode
    lw $t0, -24($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -28($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -28($fp)
    lw $t0, 0($t0)
    lw $t0, 100($t0)
    jalr $t0
    sw $a0, -20($fp)
    
    #AssignNode
    lw $t0, -20($fp)
    sw $t0, -12($fp)
    
    j fi_label_48
    
    #LabelNode
    
    then_label_47:
    
    #AssignNode
    li $t0, 5
    sw $t0, -36($fp)
    
    #AssignNode
    li $t0, 3
    sw $t0, -40($fp)
    
    #MinusNode
    lw $t0, -36($fp)
    lw $t1, -40($fp)
    sub $t0, $t0, $t1
    sw $t0, -32($fp)
    
    #AssignNode
    li $t0, 2
    sw $t0, -36($fp)
    
    #EqNode
    lw $t0, -32($fp)
    lw $t1, -36($fp)
    seq $t0, $t0, $t1
    sw $t0, -28($fp)
    
    #GotoIfNode
    lw $t0, -28($fp)
    bnez $t0, then_label_49
    
    #AssignNode
    li $t0, 8
    sw $t0, -36($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -40($fp)
    
    #ParamNode
    lw $t0, -36($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -40($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -40($fp)
    lw $t0, 0($t0)
    lw $t0, 100($t0)
    jalr $t0
    sw $a0, -32($fp)
    
    #AssignNode
    lw $t0, -32($fp)
    sw $t0, -24($fp)
    
    j fi_label_50
    
    #LabelNode
    
    then_label_49:
    
    #AssignNode
    li $t0, 11
    sw $t0, -48($fp)
    
    #AssignNode
    li $t0, 2
    sw $t0, -52($fp)
    
    #MulNode
    lw $t0, -48($fp)
    lw $t1, -52($fp)
    mult $t0, $t1
    mflo $t0
    sw $t0, -44($fp)
    
    #AssignNode
    li $t0, 22
    sw $t0, -48($fp)
    
    #EqNode
    lw $t0, -44($fp)
    lw $t1, -48($fp)
    seq $t0, $t0, $t1
    sw $t0, -40($fp)
    
    #GotoIfNode
    lw $t0, -40($fp)
    bnez $t0, then_label_51
    
    #AssignNode
    li $t0, 7
    sw $t0, -48($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -52($fp)
    
    #ParamNode
    lw $t0, -48($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -52($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -52($fp)
    lw $t0, 0($t0)
    lw $t0, 100($t0)
    jalr $t0
    sw $a0, -44($fp)
    
    #AssignNode
    lw $t0, -44($fp)
    sw $t0, -36($fp)
    
    j fi_label_52
    
    #LabelNode
    
    then_label_51:
    
    #AssignNode
    li $t0, 99
    sw $t0, -60($fp)
    
    #AssignNode
    li $t0, 11
    sw $t0, -64($fp)
    
    #DivideNode
    #Capturing division by zero
    la $a0, division_by_zero
    lw $t0, -64($fp)
    beq $t0, $zero, abort
    
    lw $t0, -60($fp)
    lw $t1, -64($fp)
    div $t0, $t1
    mflo $t0
    sw $t0, -56($fp)
    
    #AssignNode
    li $t0, 9
    sw $t0, -60($fp)
    
    #EqNode
    lw $t0, -56($fp)
    lw $t1, -60($fp)
    seq $t0, $t0, $t1
    sw $t0, -52($fp)
    
    #GotoIfNode
    lw $t0, -52($fp)
    bnez $t0, then_label_53
    
    #AssignNode
    li $t0, 6
    sw $t0, -60($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -64($fp)
    
    #ParamNode
    lw $t0, -60($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -64($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -64($fp)
    lw $t0, 0($t0)
    lw $t0, 100($t0)
    jalr $t0
    sw $a0, -56($fp)
    
    #AssignNode
    lw $t0, -56($fp)
    sw $t0, -48($fp)
    
    j fi_label_54
    
    #LabelNode
    
    then_label_53:
    
    #AssignNode
    li $t0, 45
    sw $t0, -80($fp)
    
    #AssignNode
    li $t0, 14
    sw $t0, -84($fp)
    
    #PlusNode
    lw $t0, -80($fp)
    lw $t1, -84($fp)
    add $t0, $t0, $t1
    sw $t0, -76($fp)
    
    #AssignNode
    li $t0, 75
    sw $t0, -84($fp)
    
    #AssignNode
    li $t0, 2
    sw $t0, -88($fp)
    
    #MulNode
    lw $t0, -84($fp)
    lw $t1, -88($fp)
    mult $t0, $t1
    mflo $t0
    sw $t0, -80($fp)
    
    #MinusNode
    lw $t0, -76($fp)
    lw $t1, -80($fp)
    sub $t0, $t0, $t1
    sw $t0, -72($fp)
    
    #AssignNode
    li $t0, 100
    sw $t0, -76($fp)
    
    #PlusNode
    lw $t0, -72($fp)
    lw $t1, -76($fp)
    add $t0, $t0, $t1
    sw $t0, -68($fp)
    
    #AssignNode
    li $t0, 9
    sw $t0, -72($fp)
    
    #EqNode
    lw $t0, -68($fp)
    lw $t1, -72($fp)
    seq $t0, $t0, $t1
    sw $t0, -64($fp)
    
    #GotoIfNode
    lw $t0, -64($fp)
    bnez $t0, then_label_55
    
    #AssignNode
    li $t0, 5
    sw $t0, -72($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -76($fp)
    
    #ParamNode
    lw $t0, -72($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -76($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -76($fp)
    lw $t0, 0($t0)
    lw $t0, 100($t0)
    jalr $t0
    sw $a0, -68($fp)
    
    #AssignNode
    lw $t0, -68($fp)
    sw $t0, -60($fp)
    
    j fi_label_56
    
    #LabelNode
    
    then_label_55:
    
    #AssignNode
    li $t0, 100
    sw $t0, -100($fp)
    
    #AssignNode
    li $t0, 2
    sw $t0, -104($fp)
    
    #DivideNode
    #Capturing division by zero
    la $a0, division_by_zero
    lw $t0, -104($fp)
    beq $t0, $zero, abort
    
    lw $t0, -100($fp)
    lw $t1, -104($fp)
    div $t0, $t1
    mflo $t0
    sw $t0, -96($fp)
    
    #AssignNode
    li $t0, 2
    sw $t0, -100($fp)
    
    #DivideNode
    #Capturing division by zero
    la $a0, division_by_zero
    lw $t0, -100($fp)
    beq $t0, $zero, abort
    
    lw $t0, -96($fp)
    lw $t1, -100($fp)
    div $t0, $t1
    mflo $t0
    sw $t0, -92($fp)
    
    #AssignNode
    li $t0, 2
    sw $t0, -96($fp)
    
    #DivideNode
    #Capturing division by zero
    la $a0, division_by_zero
    lw $t0, -96($fp)
    beq $t0, $zero, abort
    
    lw $t0, -92($fp)
    lw $t1, -96($fp)
    div $t0, $t1
    mflo $t0
    sw $t0, -88($fp)
    
    #AssignNode
    li $t0, 2
    sw $t0, -92($fp)
    
    #DivideNode
    #Capturing division by zero
    la $a0, division_by_zero
    lw $t0, -92($fp)
    beq $t0, $zero, abort
    
    lw $t0, -88($fp)
    lw $t1, -92($fp)
    div $t0, $t1
    mflo $t0
    sw $t0, -84($fp)
    
    #AssignNode
    li $t0, 2
    sw $t0, -88($fp)
    
    #DivideNode
    #Capturing division by zero
    la $a0, division_by_zero
    lw $t0, -88($fp)
    beq $t0, $zero, abort
    
    lw $t0, -84($fp)
    lw $t1, -88($fp)
    div $t0, $t1
    mflo $t0
    sw $t0, -80($fp)
    
    #AssignNode
    li $t0, 3
    sw $t0, -84($fp)
    
    #EqNode
    lw $t0, -80($fp)
    lw $t1, -84($fp)
    seq $t0, $t0, $t1
    sw $t0, -76($fp)
    
    #GotoIfNode
    lw $t0, -76($fp)
    bnez $t0, then_label_57
    
    #AssignNode
    li $t0, 4
    sw $t0, -84($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -88($fp)
    
    #ParamNode
    lw $t0, -84($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -88($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -88($fp)
    lw $t0, 0($t0)
    lw $t0, 100($t0)
    jalr $t0
    sw $a0, -80($fp)
    
    #AssignNode
    lw $t0, -80($fp)
    sw $t0, -72($fp)
    
    j fi_label_58
    
    #LabelNode
    
    then_label_57:
    
    #AssignNode
    li $t0, 1
    sw $t0, -96($fp)
    
    #AssignNode
    li $t0, 2
    sw $t0, -104($fp)
    
    #AssignNode
    li $t0, 3
    sw $t0, -108($fp)
    
    #PlusNode
    lw $t0, -104($fp)
    lw $t1, -108($fp)
    add $t0, $t0, $t1
    sw $t0, -100($fp)
    
    #PlusNode
    lw $t0, -96($fp)
    lw $t1, -100($fp)
    add $t0, $t0, $t1
    sw $t0, -92($fp)
    
    #AssignNode
    li $t0, 6
    sw $t0, -96($fp)
    
    #EqNode
    lw $t0, -92($fp)
    lw $t1, -96($fp)
    seq $t0, $t0, $t1
    sw $t0, -88($fp)
    
    #GotoIfNode
    lw $t0, -88($fp)
    bnez $t0, then_label_59
    
    #AssignNode
    li $t0, 3
    sw $t0, -96($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -100($fp)
    
    #ParamNode
    lw $t0, -96($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -100($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -100($fp)
    lw $t0, 0($t0)
    lw $t0, 100($t0)
    jalr $t0
    sw $a0, -92($fp)
    
    #AssignNode
    lw $t0, -92($fp)
    sw $t0, -84($fp)
    
    j fi_label_60
    
    #LabelNode
    
    then_label_59:
    
    #AssignNode
    li $t0, 1
    sw $t0, -108($fp)
    
    #AssignNode
    li $t0, 2
    sw $t0, -116($fp)
    
    #AssignNode
    li $t0, 3
    sw $t0, -124($fp)
    
    #AssignNode
    li $t0, 4
    sw $t0, -132($fp)
    
    #AssignNode
    li $t0, 5
    sw $t0, -136($fp)
    
    #PlusNode
    lw $t0, -132($fp)
    lw $t1, -136($fp)
    add $t0, $t0, $t1
    sw $t0, -128($fp)
    
    #PlusNode
    lw $t0, -124($fp)
    lw $t1, -128($fp)
    add $t0, $t0, $t1
    sw $t0, -120($fp)
    
    #PlusNode
    lw $t0, -116($fp)
    lw $t1, -120($fp)
    add $t0, $t0, $t1
    sw $t0, -112($fp)
    
    #PlusNode
    lw $t0, -108($fp)
    lw $t1, -112($fp)
    add $t0, $t0, $t1
    sw $t0, -104($fp)
    
    #AssignNode
    li $t0, 15
    sw $t0, -108($fp)
    
    #EqNode
    lw $t0, -104($fp)
    lw $t1, -108($fp)
    seq $t0, $t0, $t1
    sw $t0, -100($fp)
    
    #GotoIfNode
    lw $t0, -100($fp)
    bnez $t0, then_label_61
    
    #AssignNode
    li $t0, 2
    sw $t0, -108($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -112($fp)
    
    #ParamNode
    lw $t0, -108($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -112($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -112($fp)
    lw $t0, 0($t0)
    lw $t0, 100($t0)
    jalr $t0
    sw $a0, -104($fp)
    
    #AssignNode
    lw $t0, -104($fp)
    sw $t0, -96($fp)
    
    j fi_label_62
    
    #LabelNode
    
    then_label_61:
    
    #AssignNode
    li $t0, 1
    sw $t0, -120($fp)
    
    #AssignNode
    li $t0, 2
    sw $t0, -128($fp)
    
    #AssignNode
    li $t0, 3
    sw $t0, -136($fp)
    
    #AssignNode
    li $t0, 4
    sw $t0, -144($fp)
    
    #AssignNode
    li $t0, 5
    sw $t0, -152($fp)
    
    #AssignNode
    li $t0, 6
    sw $t0, -160($fp)
    
    #AssignNode
    li $t0, 7
    sw $t0, -168($fp)
    
    #AssignNode
    li $t0, 8
    sw $t0, -176($fp)
    
    #AssignNode
    li $t0, 9
    sw $t0, -184($fp)
    
    #AssignNode
    li $t0, 10
    sw $t0, -188($fp)
    
    #PlusNode
    lw $t0, -184($fp)
    lw $t1, -188($fp)
    add $t0, $t0, $t1
    sw $t0, -180($fp)
    
    #PlusNode
    lw $t0, -176($fp)
    lw $t1, -180($fp)
    add $t0, $t0, $t1
    sw $t0, -172($fp)
    
    #PlusNode
    lw $t0, -168($fp)
    lw $t1, -172($fp)
    add $t0, $t0, $t1
    sw $t0, -164($fp)
    
    #PlusNode
    lw $t0, -160($fp)
    lw $t1, -164($fp)
    add $t0, $t0, $t1
    sw $t0, -156($fp)
    
    #PlusNode
    lw $t0, -152($fp)
    lw $t1, -156($fp)
    add $t0, $t0, $t1
    sw $t0, -148($fp)
    
    #PlusNode
    lw $t0, -144($fp)
    lw $t1, -148($fp)
    add $t0, $t0, $t1
    sw $t0, -140($fp)
    
    #PlusNode
    lw $t0, -136($fp)
    lw $t1, -140($fp)
    add $t0, $t0, $t1
    sw $t0, -132($fp)
    
    #PlusNode
    lw $t0, -128($fp)
    lw $t1, -132($fp)
    add $t0, $t0, $t1
    sw $t0, -124($fp)
    
    #PlusNode
    lw $t0, -120($fp)
    lw $t1, -124($fp)
    add $t0, $t0, $t1
    sw $t0, -116($fp)
    
    #AssignNode
    li $t0, 55
    sw $t0, -120($fp)
    
    #EqNode
    lw $t0, -116($fp)
    lw $t1, -120($fp)
    seq $t0, $t0, $t1
    sw $t0, -112($fp)
    
    #GotoIfNode
    lw $t0, -112($fp)
    bnez $t0, then_label_63
    
    #AssignNode
    li $t0, 1
    sw $t0, -120($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -124($fp)
    
    #ParamNode
    lw $t0, -120($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -124($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -124($fp)
    lw $t0, 0($t0)
    lw $t0, 100($t0)
    jalr $t0
    sw $a0, -116($fp)
    
    #AssignNode
    lw $t0, -116($fp)
    sw $t0, -108($fp)
    
    j fi_label_64
    
    #LabelNode
    
    then_label_63:
    
    #AssignNode
    li $t0, 1
    sw $t0, -120($fp)
    
    #AssignNode
    lw $t0, -120($fp)
    sw $t0, -108($fp)
    
    #LabelNode
    
    fi_label_64:
    
    #AssignNode
    lw $t0, -108($fp)
    sw $t0, -96($fp)
    
    #LabelNode
    
    fi_label_62:
    
    #AssignNode
    lw $t0, -96($fp)
    sw $t0, -84($fp)
    
    #LabelNode
    
    fi_label_60:
    
    #AssignNode
    lw $t0, -84($fp)
    sw $t0, -72($fp)
    
    #LabelNode
    
    fi_label_58:
    
    #AssignNode
    lw $t0, -72($fp)
    sw $t0, -60($fp)
    
    #LabelNode
    
    fi_label_56:
    
    #AssignNode
    lw $t0, -60($fp)
    sw $t0, -48($fp)
    
    #LabelNode
    
    fi_label_54:
    
    #AssignNode
    lw $t0, -48($fp)
    sw $t0, -36($fp)
    
    #LabelNode
    
    fi_label_52:
    
    #AssignNode
    lw $t0, -36($fp)
    sw $t0, -24($fp)
    
    #LabelNode
    
    fi_label_50:
    
    #AssignNode
    lw $t0, -24($fp)
    sw $t0, -12($fp)
    
    #LabelNode
    
    fi_label_48:
    
    #AssignNode
    lw $t0, -12($fp)
    sw $t0, 0($fp)
    
    #LabelNode
    
    fi_label_46:
    
    #AssignNode
    li $t0, 0
    sw $t0, -8($fp)
    
    #MinusNode
    li $t0, 1
    lw $t1, -8($fp)
    sub $t0, $t0, $t1
    sw $t0, -4($fp)
    
    #AssignNode
    li $t0, 250
    sw $t0, -8($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -12($fp)
    
    #ParamNode
    lw $t0, -8($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -4($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -12($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -12($fp)
    lw $t0, 0($t0)
    lw $t0, 108($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #AssignNode
    li $t0, 1
    sw $t0, -12($fp)
    
    #MinusNode
    li $t0, 1
    lw $t1, -12($fp)
    sub $t0, $t0, $t1
    sw $t0, -8($fp)
    
    #MinusNode
    li $t0, 1
    lw $t1, -8($fp)
    sub $t0, $t0, $t1
    sw $t0, -4($fp)
    
    #AssignNode
    li $t0, 251
    sw $t0, -8($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -12($fp)
    
    #ParamNode
    lw $t0, -8($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -4($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -12($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -12($fp)
    lw $t0, 0($t0)
    lw $t0, 108($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #AssignNode
    li $t0, 3
    sw $t0, -8($fp)
    
    #AssignNode
    li $t0, 4
    sw $t0, -12($fp)
    
    #LessNode
    lw $t0, -8($fp)
    lw $t1, -12($fp)
    slt $t0, $t0, $t1
    sw $t0, -4($fp)
    
    #AssignNode
    li $t0, 253
    sw $t0, -8($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -12($fp)
    
    #ParamNode
    lw $t0, -8($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -4($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -12($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -12($fp)
    lw $t0, 0($t0)
    lw $t0, 108($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #AssignNode
    li $t0, 3
    sw $t0, -12($fp)
    
    #AssignNode
    li $t0, 3
    sw $t0, -16($fp)
    
    #LessNode
    lw $t0, -12($fp)
    lw $t1, -16($fp)
    slt $t0, $t0, $t1
    sw $t0, -8($fp)
    
    #MinusNode
    li $t0, 1
    lw $t1, -8($fp)
    sub $t0, $t0, $t1
    sw $t0, -4($fp)
    
    #AssignNode
    li $t0, 254
    sw $t0, -8($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -12($fp)
    
    #ParamNode
    lw $t0, -8($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -4($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -12($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -12($fp)
    lw $t0, 0($t0)
    lw $t0, 108($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #AssignNode
    li $t0, 65
    sw $t0, -8($fp)
    
    #AssignNode
    li $t0, 66
    sw $t0, -12($fp)
    
    #LessEqNode
    lw $t0, -8($fp)
    lw $t1, -12($fp)
    sleu $t0, $t0, $t1
    sw $t0, -4($fp)
    
    #AssignNode
    li $t0, 255
    sw $t0, -8($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -12($fp)
    
    #ParamNode
    lw $t0, -8($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -4($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -12($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -12($fp)
    lw $t0, 0($t0)
    lw $t0, 108($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #AssignNode
    li $t0, 65
    sw $t0, -8($fp)
    
    #AssignNode
    li $t0, 65
    sw $t0, -12($fp)
    
    #LessEqNode
    lw $t0, -8($fp)
    lw $t1, -12($fp)
    sleu $t0, $t0, $t1
    sw $t0, -4($fp)
    
    #AssignNode
    li $t0, 255
    sw $t0, -8($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -12($fp)
    
    #ParamNode
    lw $t0, -8($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -4($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -12($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -12($fp)
    lw $t0, 0($t0)
    lw $t0, 108($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #AssignNode
    li $t0, 2
    sw $t0, -12($fp)
    
    #MinusNode
    li $t0, 0
    lw $t1, -12($fp)
    sub $t0, $t0, $t1
    sw $t0, -8($fp)
    
    #AssignNode
    li $t0, 0
    sw $t0, -16($fp)
    
    #AssignNode
    li $t0, 2
    sw $t0, -20($fp)
    
    #MinusNode
    lw $t0, -16($fp)
    lw $t1, -20($fp)
    sub $t0, $t0, $t1
    sw $t0, -12($fp)
    
    #EqNode
    lw $t0, -8($fp)
    lw $t1, -12($fp)
    seq $t0, $t0, $t1
    sw $t0, -4($fp)
    
    #AssignNode
    li $t0, 257
    sw $t0, -8($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -12($fp)
    
    #ParamNode
    lw $t0, -8($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -4($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -12($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -12($fp)
    lw $t0, 0($t0)
    lw $t0, 108($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #AssignNode
    li $t0, 2
    sw $t0, -12($fp)
    
    #MinusNode
    li $t0, 0
    lw $t1, -12($fp)
    sub $t0, $t0, $t1
    sw $t0, -8($fp)
    
    #AssignNode
    li $t0, 2
    sw $t0, -12($fp)
    
    #LessNode
    lw $t0, -8($fp)
    lw $t1, -12($fp)
    slt $t0, $t0, $t1
    sw $t0, -4($fp)
    
    #AssignNode
    li $t0, 258
    sw $t0, -8($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -12($fp)
    
    #ParamNode
    lw $t0, -8($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -4($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -12($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -12($fp)
    lw $t0, 0($t0)
    lw $t0, 108($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #AssignNode
    li $t0, 0
    sw $t0, -12($fp)
    
    #MinusNode
    li $t0, 0
    lw $t1, -12($fp)
    sub $t0, $t0, $t1
    sw $t0, -8($fp)
    
    #AssignNode
    li $t0, 0
    sw $t0, -12($fp)
    
    #EqNode
    lw $t0, -8($fp)
    lw $t1, -12($fp)
    seq $t0, $t0, $t1
    sw $t0, -4($fp)
    
    #AssignNode
    li $t0, 259
    sw $t0, -8($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -12($fp)
    
    #ParamNode
    lw $t0, -8($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -4($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -12($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -12($fp)
    lw $t0, 0($t0)
    lw $t0, 108($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #ReturnNode
    lw $a0, 0($fp)
    
    #Restoring saved $ra
    lw $ra, 4($fp)
    
    #Restoring saved $fp
    lw $fp, 8($fp)
    
    #Cleaning stack after call
    addi $sp, $sp, 204
    
    #Return jump
    jr $ra
    
Blah_assert:
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, -4
    
    #Saving $fp
    move $fp $sp
    
    #Reserving space for locals
    addi $sp, $sp, -20
    
    #Executing instructions
    #AssignNode
    lw $t0, 16($fp)
    sw $t0, -4($fp)
    
    #GotoIfNode
    lw $t0, -4($fp)
    bnez $t0, then_label_65
    
    #LoadNode
    li $a0, 12
    li $v0, 9
    syscall
    sw $v0, -12($fp)
    la $t0, String
    sw $t0, 0($v0)
    li $t0, 18
    sw $t0, 4($v0)
    la $t0, data_8
    sw $t0, 8($v0)
    
    #GetAttribNode
    lw $t0, 12($fp)
    lw $t0, 28($t0)
    sw $t0, -16($fp)
    
    #ParamNode
    lw $t0, -12($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -16($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -16($fp)
    lw $t0, 0($t0)
    lw $t0, 24($t0)
    jalr $t0
    sw $a0, -8($fp)
    
    #AssignNode
    lw $t0, 20($fp)
    sw $t0, -12($fp)
    
    #GetAttribNode
    lw $t0, 12($fp)
    lw $t0, 28($t0)
    sw $t0, -16($fp)
    
    #ParamNode
    lw $t0, -12($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -16($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -16($fp)
    lw $t0, 0($t0)
    lw $t0, 28($t0)
    jalr $t0
    sw $a0, -8($fp)
    
    #LoadNode
    li $a0, 12
    li $v0, 9
    syscall
    sw $v0, -12($fp)
    la $t0, String
    sw $t0, 0($v0)
    li $t0, 1
    sw $t0, 4($v0)
    la $t0, data_6
    sw $t0, 8($v0)
    
    #GetAttribNode
    lw $t0, 12($fp)
    lw $t0, 28($t0)
    sw $t0, -16($fp)
    
    #ParamNode
    lw $t0, -12($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -16($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -16($fp)
    lw $t0, 0($t0)
    lw $t0, 24($t0)
    jalr $t0
    sw $a0, -8($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -12($fp)
    
    #ParamNode
    lw $t0, -12($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -12($fp)
    lw $t0, 0($t0)
    lw $t0, 12($t0)
    jalr $t0
    sw $a0, -8($fp)
    
    #AssignNode
    lw $t0, -8($fp)
    sw $t0, 0($fp)
    
    j fi_label_66
    
    #LabelNode
    
    then_label_65:
    
    #AssignNode
    li $t0, 1
    sw $t0, -12($fp)
    
    #AssignNode
    lw $t0, -12($fp)
    sw $t0, 0($fp)
    
    #LabelNode
    
    fi_label_66:
    
    #ReturnNode
    lw $a0, 0($fp)
    
    #Restoring saved $ra
    lw $ra, 4($fp)
    
    #Restoring saved $fp
    lw $fp, 8($fp)
    
    #Cleaning stack after call
    addi $sp, $sp, 40
    
    #Return jump
    jr $ra
    
Blah_bigAssign:
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, -4
    
    #Saving $fp
    move $fp $sp
    
    #Reserving space for locals
    addi $sp, $sp, -32
    
    #Executing instructions
    #DefaultValueNode
    li $t0, 0
    sw $t0, -16($fp)
    
    #AssignNode
    lw $t0, -16($fp)
    sw $t0, -4($fp)
    
    #DefaultValueNode
    li $t0, 0
    sw $t0, -16($fp)
    
    #AssignNode
    lw $t0, -16($fp)
    sw $t0, -8($fp)
    
    #DefaultValueNode
    li $t0, 0
    sw $t0, -16($fp)
    
    #AssignNode
    lw $t0, -16($fp)
    sw $t0, -12($fp)
    
    #LoadNode
    li $a0, 12
    li $v0, 9
    syscall
    sw $v0, -16($fp)
    la $t0, String
    sw $t0, 0($v0)
    li $t0, 10
    sw $t0, 4($v0)
    la $t0, data_9
    sw $t0, 8($v0)
    
    #GetAttribNode
    lw $t0, 12($fp)
    lw $t0, 28($t0)
    sw $t0, -20($fp)
    
    #ParamNode
    lw $t0, -16($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -20($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -20($fp)
    lw $t0, 0($t0)
    lw $t0, 24($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #AssignNode
    lw $t0, -4($fp)
    sw $t0, -20($fp)
    
    #AssignNode
    li $t0, 0
    sw $t0, -24($fp)
    
    #EqNode
    lw $t0, -20($fp)
    lw $t1, -24($fp)
    seq $t0, $t0, $t1
    sw $t0, -16($fp)
    
    #AssignNode
    li $t0, 1
    sw $t0, -20($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -24($fp)
    
    #ParamNode
    lw $t0, -20($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -16($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -24($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -24($fp)
    lw $t0, 0($t0)
    lw $t0, 108($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #AssignNode
    lw $t0, -8($fp)
    sw $t0, -20($fp)
    
    #AssignNode
    li $t0, 0
    sw $t0, -24($fp)
    
    #EqNode
    lw $t0, -20($fp)
    lw $t1, -24($fp)
    seq $t0, $t0, $t1
    sw $t0, -16($fp)
    
    #AssignNode
    li $t0, 2
    sw $t0, -20($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -24($fp)
    
    #ParamNode
    lw $t0, -20($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -16($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -24($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -24($fp)
    lw $t0, 0($t0)
    lw $t0, 108($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #AssignNode
    lw $t0, -12($fp)
    sw $t0, -20($fp)
    
    #AssignNode
    li $t0, 0
    sw $t0, -24($fp)
    
    #EqNode
    lw $t0, -20($fp)
    lw $t1, -24($fp)
    seq $t0, $t0, $t1
    sw $t0, -16($fp)
    
    #AssignNode
    li $t0, 3
    sw $t0, -20($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -24($fp)
    
    #ParamNode
    lw $t0, -20($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -16($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -24($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -24($fp)
    lw $t0, 0($t0)
    lw $t0, 108($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #AssignNode
    li $t0, 1
    sw $t0, 0($fp)
    
    #AssignNode
    lw $t0, 0($fp)
    sw $t0, -4($fp)
    
    #AssignNode
    li $t0, 2
    sw $t0, 0($fp)
    
    #AssignNode
    lw $t0, 0($fp)
    sw $t0, -8($fp)
    
    #AssignNode
    li $t0, 3
    sw $t0, 0($fp)
    
    #AssignNode
    lw $t0, 0($fp)
    sw $t0, -12($fp)
    
    #AssignNode
    lw $t0, -4($fp)
    sw $t0, -20($fp)
    
    #AssignNode
    li $t0, 1
    sw $t0, -24($fp)
    
    #EqNode
    lw $t0, -20($fp)
    lw $t1, -24($fp)
    seq $t0, $t0, $t1
    sw $t0, -16($fp)
    
    #AssignNode
    li $t0, 4
    sw $t0, -20($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -24($fp)
    
    #ParamNode
    lw $t0, -20($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -16($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -24($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -24($fp)
    lw $t0, 0($t0)
    lw $t0, 108($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #AssignNode
    lw $t0, -8($fp)
    sw $t0, -20($fp)
    
    #AssignNode
    li $t0, 2
    sw $t0, -24($fp)
    
    #EqNode
    lw $t0, -20($fp)
    lw $t1, -24($fp)
    seq $t0, $t0, $t1
    sw $t0, -16($fp)
    
    #AssignNode
    li $t0, 5
    sw $t0, -20($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -24($fp)
    
    #ParamNode
    lw $t0, -20($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -16($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -24($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -24($fp)
    lw $t0, 0($t0)
    lw $t0, 108($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #AssignNode
    lw $t0, -12($fp)
    sw $t0, -20($fp)
    
    #AssignNode
    li $t0, 3
    sw $t0, -24($fp)
    
    #EqNode
    lw $t0, -20($fp)
    lw $t1, -24($fp)
    seq $t0, $t0, $t1
    sw $t0, -16($fp)
    
    #AssignNode
    li $t0, 6
    sw $t0, -20($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -24($fp)
    
    #ParamNode
    lw $t0, -20($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -16($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -24($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -24($fp)
    lw $t0, 0($t0)
    lw $t0, 108($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #AssignNode
    li $t0, 1
    sw $t0, 0($fp)
    
    #AssignNode
    lw $t0, 0($fp)
    sw $t0, -12($fp)
    
    #AssignNode
    li $t0, 2
    sw $t0, 0($fp)
    
    #AssignNode
    lw $t0, 0($fp)
    sw $t0, -8($fp)
    
    #AssignNode
    li $t0, 3
    sw $t0, 0($fp)
    
    #AssignNode
    lw $t0, 0($fp)
    sw $t0, -4($fp)
    
    #AssignNode
    lw $t0, -12($fp)
    sw $t0, -20($fp)
    
    #AssignNode
    li $t0, 1
    sw $t0, -24($fp)
    
    #EqNode
    lw $t0, -20($fp)
    lw $t1, -24($fp)
    seq $t0, $t0, $t1
    sw $t0, -16($fp)
    
    #AssignNode
    li $t0, 14
    sw $t0, -20($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -24($fp)
    
    #ParamNode
    lw $t0, -20($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -16($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -24($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -24($fp)
    lw $t0, 0($t0)
    lw $t0, 108($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #AssignNode
    lw $t0, -8($fp)
    sw $t0, -20($fp)
    
    #AssignNode
    li $t0, 2
    sw $t0, -24($fp)
    
    #EqNode
    lw $t0, -20($fp)
    lw $t1, -24($fp)
    seq $t0, $t0, $t1
    sw $t0, -16($fp)
    
    #AssignNode
    li $t0, 15
    sw $t0, -20($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -24($fp)
    
    #ParamNode
    lw $t0, -20($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -16($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -24($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -24($fp)
    lw $t0, 0($t0)
    lw $t0, 108($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #AssignNode
    lw $t0, -4($fp)
    sw $t0, -20($fp)
    
    #AssignNode
    li $t0, 3
    sw $t0, -24($fp)
    
    #EqNode
    lw $t0, -20($fp)
    lw $t1, -24($fp)
    seq $t0, $t0, $t1
    sw $t0, -16($fp)
    
    #AssignNode
    li $t0, 16
    sw $t0, -20($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -24($fp)
    
    #ParamNode
    lw $t0, -20($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -16($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -24($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -24($fp)
    lw $t0, 0($t0)
    lw $t0, 108($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #AssignNode
    li $t0, 6
    sw $t0, 0($fp)
    
    #AssignNode
    lw $t0, 0($fp)
    sw $t0, -8($fp)
    
    #AssignNode
    lw $t0, 0($fp)
    sw $t0, -4($fp)
    
    #AssignNode
    lw $t0, -4($fp)
    sw $t0, -20($fp)
    
    #AssignNode
    li $t0, 6
    sw $t0, -24($fp)
    
    #EqNode
    lw $t0, -20($fp)
    lw $t1, -24($fp)
    seq $t0, $t0, $t1
    sw $t0, -16($fp)
    
    #AssignNode
    li $t0, 114
    sw $t0, -20($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -24($fp)
    
    #ParamNode
    lw $t0, -20($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -16($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -24($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -24($fp)
    lw $t0, 0($t0)
    lw $t0, 108($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #AssignNode
    lw $t0, -8($fp)
    sw $t0, -20($fp)
    
    #AssignNode
    li $t0, 6
    sw $t0, -24($fp)
    
    #EqNode
    lw $t0, -20($fp)
    lw $t1, -24($fp)
    seq $t0, $t0, $t1
    sw $t0, -16($fp)
    
    #AssignNode
    li $t0, 115
    sw $t0, -20($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -24($fp)
    
    #ParamNode
    lw $t0, -20($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -16($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -24($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -24($fp)
    lw $t0, 0($t0)
    lw $t0, 108($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #AssignNode
    lw $t0, -12($fp)
    sw $t0, -20($fp)
    
    #AssignNode
    li $t0, 1
    sw $t0, -24($fp)
    
    #EqNode
    lw $t0, -20($fp)
    lw $t1, -24($fp)
    seq $t0, $t0, $t1
    sw $t0, -16($fp)
    
    #AssignNode
    li $t0, 116
    sw $t0, -20($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -24($fp)
    
    #ParamNode
    lw $t0, -20($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -16($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -24($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -24($fp)
    lw $t0, 0($t0)
    lw $t0, 108($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #AssignNode
    lw $t0, -8($fp)
    sw $t0, -16($fp)
    
    #AssignNode
    li $t0, 4
    sw $t0, -20($fp)
    
    #PlusNode
    lw $t0, -16($fp)
    lw $t1, -20($fp)
    add $t0, $t0, $t1
    sw $t0, 0($fp)
    
    #AssignNode
    lw $t0, 0($fp)
    sw $t0, -4($fp)
    
    #AssignNode
    lw $t0, -4($fp)
    sw $t0, -16($fp)
    
    #AssignNode
    li $t0, 3
    sw $t0, -20($fp)
    
    #MinusNode
    lw $t0, -16($fp)
    lw $t1, -20($fp)
    sub $t0, $t0, $t1
    sw $t0, 0($fp)
    
    #AssignNode
    lw $t0, 0($fp)
    sw $t0, -8($fp)
    
    #AssignNode
    lw $t0, -4($fp)
    sw $t0, -20($fp)
    
    #AssignNode
    lw $t0, -8($fp)
    sw $t0, -24($fp)
    
    #MulNode
    lw $t0, -20($fp)
    lw $t1, -24($fp)
    mult $t0, $t1
    mflo $t0
    sw $t0, -16($fp)
    
    #AssignNode
    li $t0, 14
    sw $t0, -20($fp)
    
    #PlusNode
    lw $t0, -16($fp)
    lw $t1, -20($fp)
    add $t0, $t0, $t1
    sw $t0, 0($fp)
    
    #AssignNode
    lw $t0, 0($fp)
    sw $t0, -12($fp)
    
    #AssignNode
    lw $t0, -8($fp)
    sw $t0, -16($fp)
    
    #AssignNode
    li $t0, 1
    sw $t0, -20($fp)
    
    #PlusNode
    lw $t0, -16($fp)
    lw $t1, -20($fp)
    add $t0, $t0, $t1
    sw $t0, 0($fp)
    
    #AssignNode
    lw $t0, 0($fp)
    sw $t0, -8($fp)
    
    #AssignNode
    lw $t0, -4($fp)
    sw $t0, -20($fp)
    
    #AssignNode
    li $t0, 10
    sw $t0, -24($fp)
    
    #EqNode
    lw $t0, -20($fp)
    lw $t1, -24($fp)
    seq $t0, $t0, $t1
    sw $t0, -16($fp)
    
    #AssignNode
    li $t0, 2114
    sw $t0, -20($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -24($fp)
    
    #ParamNode
    lw $t0, -20($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -16($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -24($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -24($fp)
    lw $t0, 0($t0)
    lw $t0, 108($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #AssignNode
    lw $t0, -8($fp)
    sw $t0, -20($fp)
    
    #AssignNode
    li $t0, 8
    sw $t0, -24($fp)
    
    #EqNode
    lw $t0, -20($fp)
    lw $t1, -24($fp)
    seq $t0, $t0, $t1
    sw $t0, -16($fp)
    
    #AssignNode
    li $t0, 3114
    sw $t0, -20($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -24($fp)
    
    #ParamNode
    lw $t0, -20($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -16($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -24($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -24($fp)
    lw $t0, 0($t0)
    lw $t0, 108($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #AssignNode
    lw $t0, -12($fp)
    sw $t0, -20($fp)
    
    #AssignNode
    li $t0, 84
    sw $t0, -24($fp)
    
    #EqNode
    lw $t0, -20($fp)
    lw $t1, -24($fp)
    seq $t0, $t0, $t1
    sw $t0, -16($fp)
    
    #AssignNode
    li $t0, 2116
    sw $t0, -20($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -24($fp)
    
    #ParamNode
    lw $t0, -20($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -16($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -24($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -24($fp)
    lw $t0, 0($t0)
    lw $t0, 108($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #AssignNode
    lw $t0, -8($fp)
    sw $t0, 0($fp)
    
    #AssignNode
    lw $t0, 0($fp)
    sw $t0, -4($fp)
    
    #AssignNode
    lw $t0, -12($fp)
    sw $t0, 0($fp)
    
    #AssignNode
    lw $t0, 0($fp)
    sw $t0, -8($fp)
    
    #AssignNode
    lw $t0, -4($fp)
    sw $t0, 0($fp)
    
    #AssignNode
    lw $t0, 0($fp)
    sw $t0, -12($fp)
    
    #AssignNode
    lw $t0, -4($fp)
    sw $t0, -20($fp)
    
    #AssignNode
    li $t0, 8
    sw $t0, -24($fp)
    
    #EqNode
    lw $t0, -20($fp)
    lw $t1, -24($fp)
    seq $t0, $t0, $t1
    sw $t0, -16($fp)
    
    #AssignNode
    li $t0, 101
    sw $t0, -20($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -24($fp)
    
    #ParamNode
    lw $t0, -20($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -16($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -24($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -24($fp)
    lw $t0, 0($t0)
    lw $t0, 108($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #AssignNode
    lw $t0, -8($fp)
    sw $t0, -20($fp)
    
    #AssignNode
    li $t0, 84
    sw $t0, -24($fp)
    
    #EqNode
    lw $t0, -20($fp)
    lw $t1, -24($fp)
    seq $t0, $t0, $t1
    sw $t0, -16($fp)
    
    #AssignNode
    li $t0, 102
    sw $t0, -20($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -24($fp)
    
    #ParamNode
    lw $t0, -20($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -16($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -24($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -24($fp)
    lw $t0, 0($t0)
    lw $t0, 108($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #AssignNode
    lw $t0, -12($fp)
    sw $t0, -20($fp)
    
    #AssignNode
    li $t0, 8
    sw $t0, -24($fp)
    
    #EqNode
    lw $t0, -20($fp)
    lw $t1, -24($fp)
    seq $t0, $t0, $t1
    sw $t0, -16($fp)
    
    #AssignNode
    li $t0, 103
    sw $t0, -20($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -24($fp)
    
    #ParamNode
    lw $t0, -20($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -16($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -24($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -24($fp)
    lw $t0, 0($t0)
    lw $t0, 108($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #AssignNode
    lw $t0, -4($fp)
    sw $t0, -24($fp)
    
    #AssignNode
    lw $t0, -8($fp)
    sw $t0, -28($fp)
    
    #PlusNode
    lw $t0, -24($fp)
    lw $t1, -28($fp)
    add $t0, $t0, $t1
    sw $t0, -20($fp)
    
    #AssignNode
    li $t0, 92
    sw $t0, -24($fp)
    
    #EqNode
    lw $t0, -20($fp)
    lw $t1, -24($fp)
    seq $t0, $t0, $t1
    sw $t0, -16($fp)
    
    #AssignNode
    li $t0, 104
    sw $t0, -20($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -24($fp)
    
    #ParamNode
    lw $t0, -20($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -16($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -24($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -24($fp)
    lw $t0, 0($t0)
    lw $t0, 108($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #AssignNode
    lw $t0, -4($fp)
    sw $t0, -20($fp)
    
    #AssignNode
    li $t0, 8
    sw $t0, -24($fp)
    
    #EqNode
    lw $t0, -20($fp)
    lw $t1, -24($fp)
    seq $t0, $t0, $t1
    sw $t0, -16($fp)
    
    #AssignNode
    li $t0, 105
    sw $t0, -20($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -24($fp)
    
    #ParamNode
    lw $t0, -20($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -16($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -24($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -24($fp)
    lw $t0, 0($t0)
    lw $t0, 108($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #AssignNode
    lw $t0, -8($fp)
    sw $t0, -20($fp)
    
    #AssignNode
    li $t0, 84
    sw $t0, -24($fp)
    
    #EqNode
    lw $t0, -20($fp)
    lw $t1, -24($fp)
    seq $t0, $t0, $t1
    sw $t0, -16($fp)
    
    #AssignNode
    li $t0, 106
    sw $t0, -20($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -24($fp)
    
    #ParamNode
    lw $t0, -20($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -16($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -24($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -24($fp)
    lw $t0, 0($t0)
    lw $t0, 108($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #ReturnNode
    lw $a0, 0($fp)
    
    #Restoring saved $ra
    lw $ra, 4($fp)
    
    #Restoring saved $fp
    lw $fp, 8($fp)
    
    #Cleaning stack after call
    addi $sp, $sp, 44
    
    #Return jump
    jr $ra
    
Blah_setI:
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, -4
    
    #Saving $fp
    move $fp $sp
    
    #Reserving space for locals
    addi $sp, $sp, -4
    
    #Executing instructions
    #AssignNode
    lw $t0, 16($fp)
    sw $t0, 0($fp)
    
    #SetAttribNode
    lw $t1, 12($fp)
    lw $t0, 0($fp)
    sw $t0, 4($t1)
    
    #ReturnNode
    lw $a0, 0($fp)
    
    #Restoring saved $ra
    lw $ra, 4($fp)
    
    #Restoring saved $fp
    lw $fp, 8($fp)
    
    #Cleaning stack after call
    addi $sp, $sp, 20
    
    #Return jump
    jr $ra
    
Blah_getI:
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, -4
    
    #Saving $fp
    move $fp $sp
    
    #Reserving space for locals
    addi $sp, $sp, -4
    
    #Executing instructions
    #GetAttribNode
    lw $t0, 12($fp)
    lw $t0, 4($t0)
    sw $t0, 0($fp)
    
    #ReturnNode
    lw $a0, 0($fp)
    
    #Restoring saved $ra
    lw $ra, 4($fp)
    
    #Restoring saved $fp
    lw $fp, 8($fp)
    
    #Cleaning stack after call
    addi $sp, $sp, 16
    
    #Return jump
    jr $ra
    
Blah_bigSelf:
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, -4
    
    #Saving $fp
    move $fp $sp
    
    #Reserving space for locals
    addi $sp, $sp, -36
    
    #Executing instructions
    #DefaultValueNode
    la $t0, void
    sw $t0, -16($fp)
    
    #AssignNode
    lw $t0, -16($fp)
    sw $t0, -4($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -16($fp)
    
    #AssignNode
    lw $t0, -16($fp)
    sw $t0, -8($fp)
    
    #AllocateNode
    li $a0, 36
    li $v0, 9
    syscall
    sw $v0, -16($fp)
    la $t0, Blah
    sw $t0, 0($v0)
    
    #ParamNode
    lw $t0, -16($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #StaticCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    jal Blah_constructor
    sw $a0, -20($fp)
    
    #AssignNode
    lw $t0, -16($fp)
    sw $t0, -12($fp)
    
    #LoadNode
    li $a0, 12
    li $v0, 9
    syscall
    sw $v0, -16($fp)
    la $t0, String
    sw $t0, 0($v0)
    li $t0, 8
    sw $t0, 4($v0)
    la $t0, data_10
    sw $t0, 8($v0)
    
    #GetAttribNode
    lw $t0, 12($fp)
    lw $t0, 28($t0)
    sw $t0, -20($fp)
    
    #ParamNode
    lw $t0, -16($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -20($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -20($fp)
    lw $t0, 0($t0)
    lw $t0, 24($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #AssignNode
    lw $t0, -4($fp)
    sw $t0, -20($fp)
    
    #IsVoidNode
    lw $t0, -20($fp)
    la $t1, void
    seq $t0, $t0, $t1
    sw $t0, -16($fp)
    
    #AssignNode
    li $t0, 310
    sw $t0, -20($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -24($fp)
    
    #ParamNode
    lw $t0, -20($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -16($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -24($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -24($fp)
    lw $t0, 0($t0)
    lw $t0, 108($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #AssignNode
    lw $t0, -4($fp)
    sw $t0, -24($fp)
    
    #AssignNode
    lw $t0, -8($fp)
    sw $t0, -28($fp)
    
    #EqNode
    lw $t0, -24($fp)
    lw $t1, -28($fp)
    seq $t0, $t0, $t1
    sw $t0, -20($fp)
    
    #MinusNode
    li $t0, 1
    lw $t1, -20($fp)
    sub $t0, $t0, $t1
    sw $t0, -16($fp)
    
    #AssignNode
    li $t0, 311
    sw $t0, -20($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -24($fp)
    
    #ParamNode
    lw $t0, -20($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -16($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -24($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -24($fp)
    lw $t0, 0($t0)
    lw $t0, 108($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #AssignNode
    lw $t0, -8($fp)
    sw $t0, -24($fp)
    
    #AssignNode
    lw $t0, -12($fp)
    sw $t0, -28($fp)
    
    #EqNode
    lw $t0, -24($fp)
    lw $t1, -28($fp)
    seq $t0, $t0, $t1
    sw $t0, -20($fp)
    
    #MinusNode
    li $t0, 1
    lw $t1, -20($fp)
    sub $t0, $t0, $t1
    sw $t0, -16($fp)
    
    #AssignNode
    li $t0, 312
    sw $t0, -20($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -24($fp)
    
    #ParamNode
    lw $t0, -20($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -16($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -24($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -24($fp)
    lw $t0, 0($t0)
    lw $t0, 108($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #AssignNode
    lw $t0, -4($fp)
    sw $t0, -24($fp)
    
    #AssignNode
    lw $t0, -12($fp)
    sw $t0, -28($fp)
    
    #EqNode
    lw $t0, -24($fp)
    lw $t1, -28($fp)
    seq $t0, $t0, $t1
    sw $t0, -20($fp)
    
    #MinusNode
    li $t0, 1
    lw $t1, -20($fp)
    sub $t0, $t0, $t1
    sw $t0, -16($fp)
    
    #AssignNode
    li $t0, 313
    sw $t0, -20($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -24($fp)
    
    #ParamNode
    lw $t0, -20($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -16($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -24($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -24($fp)
    lw $t0, 0($t0)
    lw $t0, 108($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #AssignNode
    li $t0, 3
    sw $t0, -16($fp)
    
    #AssignNode
    lw $t0, -8($fp)
    sw $t0, -20($fp)
    
    #ParamNode
    lw $t0, -16($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -20($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -20($fp)
    lw $t0, 0($t0)
    lw $t0, 116($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #AssignNode
    li $t0, 4
    sw $t0, -16($fp)
    
    #AssignNode
    lw $t0, -12($fp)
    sw $t0, -20($fp)
    
    #ParamNode
    lw $t0, -16($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -20($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -20($fp)
    lw $t0, 0($t0)
    lw $t0, 116($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #AssignNode
    lw $t0, -8($fp)
    sw $t0, -28($fp)
    
    #ParamNode
    lw $t0, -28($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -28($fp)
    lw $t0, 0($t0)
    lw $t0, 120($t0)
    jalr $t0
    sw $a0, -24($fp)
    
    #AssignNode
    lw $t0, -12($fp)
    sw $t0, -32($fp)
    
    #ParamNode
    lw $t0, -32($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -32($fp)
    lw $t0, 0($t0)
    lw $t0, 120($t0)
    jalr $t0
    sw $a0, -28($fp)
    
    #EqNode
    lw $t0, -24($fp)
    lw $t1, -28($fp)
    seq $t0, $t0, $t1
    sw $t0, -20($fp)
    
    #MinusNode
    li $t0, 1
    lw $t1, -20($fp)
    sub $t0, $t0, $t1
    sw $t0, -16($fp)
    
    #AssignNode
    li $t0, 320
    sw $t0, -20($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -24($fp)
    
    #ParamNode
    lw $t0, -20($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -16($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -24($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -24($fp)
    lw $t0, 0($t0)
    lw $t0, 108($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, 0($fp)
    
    #AssignNode
    lw $t0, 0($fp)
    sw $t0, -12($fp)
    
    #AssignNode
    lw $t0, -8($fp)
    sw $t0, -20($fp)
    
    #AssignNode
    lw $t0, -12($fp)
    sw $t0, -24($fp)
    
    #EqNode
    lw $t0, -20($fp)
    lw $t1, -24($fp)
    seq $t0, $t0, $t1
    sw $t0, -16($fp)
    
    #AssignNode
    li $t0, 314
    sw $t0, -20($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -24($fp)
    
    #ParamNode
    lw $t0, -20($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -16($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -24($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -24($fp)
    lw $t0, 0($t0)
    lw $t0, 108($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #AssignNode
    li $t0, 5
    sw $t0, -16($fp)
    
    #AssignNode
    lw $t0, -8($fp)
    sw $t0, -20($fp)
    
    #ParamNode
    lw $t0, -16($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -20($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -20($fp)
    lw $t0, 0($t0)
    lw $t0, 116($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #AssignNode
    li $t0, 6
    sw $t0, -16($fp)
    
    #AssignNode
    lw $t0, -12($fp)
    sw $t0, -20($fp)
    
    #ParamNode
    lw $t0, -16($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -20($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -20($fp)
    lw $t0, 0($t0)
    lw $t0, 116($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #AssignNode
    lw $t0, -8($fp)
    sw $t0, -24($fp)
    
    #ParamNode
    lw $t0, -24($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -24($fp)
    lw $t0, 0($t0)
    lw $t0, 120($t0)
    jalr $t0
    sw $a0, -20($fp)
    
    #AssignNode
    lw $t0, -12($fp)
    sw $t0, -28($fp)
    
    #ParamNode
    lw $t0, -28($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -28($fp)
    lw $t0, 0($t0)
    lw $t0, 120($t0)
    jalr $t0
    sw $a0, -24($fp)
    
    #EqNode
    lw $t0, -20($fp)
    lw $t1, -24($fp)
    seq $t0, $t0, $t1
    sw $t0, -16($fp)
    
    #AssignNode
    li $t0, 327
    sw $t0, -20($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -24($fp)
    
    #ParamNode
    lw $t0, -20($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -16($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -24($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -24($fp)
    lw $t0, 0($t0)
    lw $t0, 108($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #ReturnNode
    lw $a0, 0($fp)
    
    #Restoring saved $ra
    lw $ra, 4($fp)
    
    #Restoring saved $fp
    lw $fp, 8($fp)
    
    #Cleaning stack after call
    addi $sp, $sp, 48
    
    #Return jump
    jr $ra
    
Blah_bigStrCompare:
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, -4
    
    #Saving $fp
    move $fp $sp
    
    #Reserving space for locals
    addi $sp, $sp, -48
    
    #Executing instructions
    #LoadNode
    li $a0, 12
    li $v0, 9
    syscall
    sw $v0, -24($fp)
    la $t0, String
    sw $t0, 0($v0)
    li $t0, 3
    sw $t0, 4($v0)
    la $t0, data_11
    sw $t0, 8($v0)
    
    #AssignNode
    lw $t0, -24($fp)
    sw $t0, -4($fp)
    
    #LoadNode
    li $a0, 12
    li $v0, 9
    syscall
    sw $v0, -24($fp)
    la $t0, String
    sw $t0, 0($v0)
    li $t0, 3
    sw $t0, 4($v0)
    la $t0, data_12
    sw $t0, 8($v0)
    
    #AssignNode
    lw $t0, -24($fp)
    sw $t0, -8($fp)
    
    #LoadNode
    li $a0, 12
    li $v0, 9
    syscall
    sw $v0, -24($fp)
    la $t0, String
    sw $t0, 0($v0)
    li $t0, 6
    sw $t0, 4($v0)
    la $t0, data_13
    sw $t0, 8($v0)
    
    #AssignNode
    lw $t0, -24($fp)
    sw $t0, -12($fp)
    
    #DefaultValueNode
    li $a0, 12
    li $v0, 9
    syscall
    sw $v0, -24($fp)
    la $t0, String
    sw $t0, 0($v0)
    li $t0, 0
    sw $t0, 4($v0)
    la $t0, empty_string
    sw $t0, 8($v0)
    
    #AssignNode
    lw $t0, -24($fp)
    sw $t0, -16($fp)
    
    #DefaultValueNode
    li $a0, 12
    li $v0, 9
    syscall
    sw $v0, -24($fp)
    la $t0, String
    sw $t0, 0($v0)
    li $t0, 0
    sw $t0, 4($v0)
    la $t0, empty_string
    sw $t0, 8($v0)
    
    #AssignNode
    lw $t0, -24($fp)
    sw $t0, -20($fp)
    
    #LoadNode
    li $a0, 12
    li $v0, 9
    syscall
    sw $v0, -24($fp)
    la $t0, String
    sw $t0, 0($v0)
    li $t0, 14
    sw $t0, 4($v0)
    la $t0, data_14
    sw $t0, 8($v0)
    
    #GetAttribNode
    lw $t0, 12($fp)
    lw $t0, 28($t0)
    sw $t0, -28($fp)
    
    #ParamNode
    lw $t0, -24($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -28($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -28($fp)
    lw $t0, 0($t0)
    lw $t0, 24($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #AssignNode
    lw $t0, -4($fp)
    sw $t0, -32($fp)
    
    #AssignNode
    lw $t0, -8($fp)
    sw $t0, -36($fp)
    
    #StrEqNode
    lw $t0, -32($fp)
    lw $t1, -36($fp)
    jal string_comparer
    sw $a0, -28($fp)
    
    #MinusNode
    li $t0, 1
    lw $t1, -28($fp)
    sub $t0, $t0, $t1
    sw $t0, -24($fp)
    
    #AssignNode
    li $t0, 339
    sw $t0, -28($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -32($fp)
    
    #ParamNode
    lw $t0, -28($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -24($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -32($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -32($fp)
    lw $t0, 0($t0)
    lw $t0, 108($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #AssignNode
    lw $t0, -4($fp)
    sw $t0, -28($fp)
    
    #LoadNode
    li $a0, 12
    li $v0, 9
    syscall
    sw $v0, -32($fp)
    la $t0, String
    sw $t0, 0($v0)
    li $t0, 3
    sw $t0, 4($v0)
    la $t0, data_11
    sw $t0, 8($v0)
    
    #StrEqNode
    lw $t0, -28($fp)
    lw $t1, -32($fp)
    jal string_comparer
    sw $a0, -24($fp)
    
    #AssignNode
    li $t0, 340
    sw $t0, -28($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -32($fp)
    
    #ParamNode
    lw $t0, -28($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -24($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -32($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -32($fp)
    lw $t0, 0($t0)
    lw $t0, 108($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #AssignNode
    lw $t0, -8($fp)
    sw $t0, -28($fp)
    
    #LoadNode
    li $a0, 12
    li $v0, 9
    syscall
    sw $v0, -32($fp)
    la $t0, String
    sw $t0, 0($v0)
    li $t0, 3
    sw $t0, 4($v0)
    la $t0, data_12
    sw $t0, 8($v0)
    
    #StrEqNode
    lw $t0, -28($fp)
    lw $t1, -32($fp)
    jal string_comparer
    sw $a0, -24($fp)
    
    #AssignNode
    li $t0, 341
    sw $t0, -28($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -32($fp)
    
    #ParamNode
    lw $t0, -28($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -24($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -32($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -32($fp)
    lw $t0, 0($t0)
    lw $t0, 108($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #AssignNode
    lw $t0, -16($fp)
    sw $t0, -28($fp)
    
    #AssignNode
    lw $t0, -20($fp)
    sw $t0, -32($fp)
    
    #StrEqNode
    lw $t0, -28($fp)
    lw $t1, -32($fp)
    jal string_comparer
    sw $a0, -24($fp)
    
    #AssignNode
    li $t0, 342
    sw $t0, -28($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -32($fp)
    
    #ParamNode
    lw $t0, -28($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -24($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -32($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -32($fp)
    lw $t0, 0($t0)
    lw $t0, 108($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #AssignNode
    lw $t0, -16($fp)
    sw $t0, -32($fp)
    
    #AssignNode
    lw $t0, -12($fp)
    sw $t0, -36($fp)
    
    #StrEqNode
    lw $t0, -32($fp)
    lw $t1, -36($fp)
    jal string_comparer
    sw $a0, -28($fp)
    
    #MinusNode
    li $t0, 1
    lw $t1, -28($fp)
    sub $t0, $t0, $t1
    sw $t0, -24($fp)
    
    #AssignNode
    li $t0, 346
    sw $t0, -28($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -32($fp)
    
    #ParamNode
    lw $t0, -28($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -24($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -32($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -32($fp)
    lw $t0, 0($t0)
    lw $t0, 108($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #AssignNode
    li $t0, 0
    sw $t0, -24($fp)
    
    #AssignNode
    li $t0, 3
    sw $t0, -28($fp)
    
    #AssignNode
    lw $t0, -12($fp)
    sw $t0, -32($fp)
    
    #ParamNode
    lw $t0, -28($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -24($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -32($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -32($fp)
    lw $t0, 0($t0)
    lw $t0, 32($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #AssignNode
    lw $t0, 0($fp)
    sw $t0, -16($fp)
    
    #AssignNode
    li $t0, 3
    sw $t0, -24($fp)
    
    #AssignNode
    li $t0, 3
    sw $t0, -28($fp)
    
    #AssignNode
    lw $t0, -12($fp)
    sw $t0, -32($fp)
    
    #ParamNode
    lw $t0, -28($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -24($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -32($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -32($fp)
    lw $t0, 0($t0)
    lw $t0, 32($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #AssignNode
    lw $t0, 0($fp)
    sw $t0, -20($fp)
    
    #AssignNode
    lw $t0, -16($fp)
    sw $t0, -32($fp)
    
    #AssignNode
    lw $t0, -20($fp)
    sw $t0, -36($fp)
    
    #StrEqNode
    lw $t0, -32($fp)
    lw $t1, -36($fp)
    jal string_comparer
    sw $a0, -28($fp)
    
    #MinusNode
    li $t0, 1
    lw $t1, -28($fp)
    sub $t0, $t0, $t1
    sw $t0, -24($fp)
    
    #AssignNode
    li $t0, 350
    sw $t0, -28($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -32($fp)
    
    #ParamNode
    lw $t0, -28($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -24($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -32($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -32($fp)
    lw $t0, 0($t0)
    lw $t0, 108($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #AssignNode
    lw $t0, -16($fp)
    sw $t0, -28($fp)
    
    #AssignNode
    lw $t0, -4($fp)
    sw $t0, -32($fp)
    
    #StrEqNode
    lw $t0, -28($fp)
    lw $t1, -32($fp)
    jal string_comparer
    sw $a0, -24($fp)
    
    #AssignNode
    li $t0, 351
    sw $t0, -28($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -32($fp)
    
    #ParamNode
    lw $t0, -28($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -24($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -32($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -32($fp)
    lw $t0, 0($t0)
    lw $t0, 108($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #AssignNode
    lw $t0, -20($fp)
    sw $t0, -28($fp)
    
    #AssignNode
    lw $t0, -8($fp)
    sw $t0, -32($fp)
    
    #StrEqNode
    lw $t0, -28($fp)
    lw $t1, -32($fp)
    jal string_comparer
    sw $a0, -24($fp)
    
    #AssignNode
    li $t0, 352
    sw $t0, -28($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -32($fp)
    
    #ParamNode
    lw $t0, -28($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -24($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -32($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -32($fp)
    lw $t0, 0($t0)
    lw $t0, 108($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #AssignNode
    lw $t0, -16($fp)
    sw $t0, -32($fp)
    
    #AssignNode
    lw $t0, -8($fp)
    sw $t0, -36($fp)
    
    #StrEqNode
    lw $t0, -32($fp)
    lw $t1, -36($fp)
    jal string_comparer
    sw $a0, -28($fp)
    
    #MinusNode
    li $t0, 1
    lw $t1, -28($fp)
    sub $t0, $t0, $t1
    sw $t0, -24($fp)
    
    #AssignNode
    li $t0, 353
    sw $t0, -28($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -32($fp)
    
    #ParamNode
    lw $t0, -28($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -24($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -32($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -32($fp)
    lw $t0, 0($t0)
    lw $t0, 108($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #AssignNode
    li $t0, 1
    sw $t0, -32($fp)
    
    #AssignNode
    li $t0, 1
    sw $t0, -36($fp)
    
    #AssignNode
    lw $t0, -4($fp)
    sw $t0, -40($fp)
    
    #ParamNode
    lw $t0, -36($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -32($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -40($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -40($fp)
    lw $t0, 0($t0)
    lw $t0, 32($t0)
    jalr $t0
    sw $a0, -28($fp)
    
    #AssignNode
    li $t0, 2
    sw $t0, -36($fp)
    
    #AssignNode
    li $t0, 1
    sw $t0, -40($fp)
    
    #AssignNode
    lw $t0, -4($fp)
    sw $t0, -44($fp)
    
    #ParamNode
    lw $t0, -40($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -36($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -44($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -44($fp)
    lw $t0, 0($t0)
    lw $t0, 32($t0)
    jalr $t0
    sw $a0, -32($fp)
    
    #StrEqNode
    lw $t0, -28($fp)
    lw $t1, -32($fp)
    jal string_comparer
    sw $a0, -24($fp)
    
    #AssignNode
    li $t0, 355
    sw $t0, -28($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -32($fp)
    
    #ParamNode
    lw $t0, -28($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -24($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -32($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -32($fp)
    lw $t0, 0($t0)
    lw $t0, 108($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #ReturnNode
    lw $a0, 0($fp)
    
    #Restoring saved $ra
    lw $ra, 4($fp)
    
    #Restoring saved $fp
    lw $fp, 8($fp)
    
    #Cleaning stack after call
    addi $sp, $sp, 60
    
    #Return jump
    jr $ra
    
Blah_bigCase:
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, -4
    
    #Saving $fp
    move $fp $sp
    
    #Reserving space for locals
    addi $sp, $sp, -240
    
    #Executing instructions
    #AllocateNode
    li $a0, 4
    li $v0, 9
    syscall
    sw $v0, -36($fp)
    la $t0, A
    sw $t0, 0($v0)
    
    #ParamNode
    lw $t0, -36($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #StaticCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    jal A_constructor
    sw $a0, -40($fp)
    
    #AssignNode
    lw $t0, -36($fp)
    sw $t0, -4($fp)
    
    #AllocateNode
    li $a0, 4
    li $v0, 9
    syscall
    sw $v0, -36($fp)
    la $t0, B
    sw $t0, 0($v0)
    
    #ParamNode
    lw $t0, -36($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #StaticCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    jal B_constructor
    sw $a0, -40($fp)
    
    #AssignNode
    lw $t0, -36($fp)
    sw $t0, -8($fp)
    
    #AllocateNode
    li $a0, 4
    li $v0, 9
    syscall
    sw $v0, -36($fp)
    la $t0, C
    sw $t0, 0($v0)
    
    #ParamNode
    lw $t0, -36($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #StaticCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    jal C_constructor
    sw $a0, -40($fp)
    
    #AssignNode
    lw $t0, -36($fp)
    sw $t0, -12($fp)
    
    #AllocateNode
    li $a0, 8
    li $v0, 9
    syscall
    sw $v0, -36($fp)
    la $t0, P
    sw $t0, 0($v0)
    
    #ParamNode
    lw $t0, -36($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #StaticCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    jal P_constructor
    sw $a0, -40($fp)
    
    #AssignNode
    lw $t0, -36($fp)
    sw $t0, -16($fp)
    
    #AllocateNode
    li $a0, 8
    li $v0, 9
    syscall
    sw $v0, -36($fp)
    la $t0, C1
    sw $t0, 0($v0)
    
    #ParamNode
    lw $t0, -36($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #StaticCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    jal C1_constructor
    sw $a0, -40($fp)
    
    #AssignNode
    lw $t0, -36($fp)
    sw $t0, -20($fp)
    
    #AllocateNode
    li $a0, 8
    li $v0, 9
    syscall
    sw $v0, -36($fp)
    la $t0, C2
    sw $t0, 0($v0)
    
    #ParamNode
    lw $t0, -36($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #StaticCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    jal C2_constructor
    sw $a0, -40($fp)
    
    #AssignNode
    lw $t0, -36($fp)
    sw $t0, -24($fp)
    
    #DefaultValueNode
    li $t0, 0
    sw $t0, -36($fp)
    
    #AssignNode
    lw $t0, -36($fp)
    sw $t0, -28($fp)
    
    #DefaultValueNode
    la $t0, void
    sw $t0, -36($fp)
    
    #AssignNode
    lw $t0, -36($fp)
    sw $t0, -32($fp)
    
    #LoadNode
    li $a0, 12
    li $v0, 9
    syscall
    sw $v0, -36($fp)
    la $t0, String
    sw $t0, 0($v0)
    li $t0, 8
    sw $t0, 4($v0)
    la $t0, data_15
    sw $t0, 8($v0)
    
    #GetAttribNode
    lw $t0, 12($fp)
    lw $t0, 28($t0)
    sw $t0, -40($fp)
    
    #ParamNode
    lw $t0, -36($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -40($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -40($fp)
    lw $t0, 0($t0)
    lw $t0, 24($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #AssignNode
    lw $t0, -20($fp)
    sw $t0, 0($fp)
    
    #AssignNode
    lw $t0, 0($fp)
    sw $t0, -32($fp)
    
    #AssignNode
    lw $t0, -32($fp)
    sw $t0, -36($fp)
    
    #TypeOfNode
    #Capturing case on void
    la $a0, case_on_void
    lw $t0, -36($fp)
    la $t1, void
    beq $t0, $t1, abort
    
    #Executing typeof
    lw $t0, -36($fp)
    lw $t0, 0($t0)
    sw $t0, -40($fp)
    
    #LabelNode
    
    loop_67:
    
    #EqNode
    lw $t0, -40($fp)
    la $t1, A
    seq $t0, $t0, $t1
    sw $t0, -44($fp)
    
    #GotoIfNode
    lw $t0, -44($fp)
    bnez $t0, pool_68
    
    #EqNode
    lw $t0, -40($fp)
    la $t1, C1
    seq $t0, $t0, $t1
    sw $t0, -44($fp)
    
    #GotoIfNode
    lw $t0, -44($fp)
    bnez $t0, pool_68
    
    #EqNode
    lw $t0, -40($fp)
    la $t1, C2
    seq $t0, $t0, $t1
    sw $t0, -44($fp)
    
    #GotoIfNode
    lw $t0, -44($fp)
    bnez $t0, pool_68
    
    #EqNode
    lw $t0, -40($fp)
    la $t1, Object
    seq $t0, $t0, $t1
    sw $t0, -44($fp)
    
    #GotoIfNode
    lw $t0, -44($fp)
    bnez $t0, pool_68
    
    #ParentOfNode
    lw $t0, -40($fp)
    lw $t0, 4($t0)
    sw $t0, -40($fp)
    
    #EqNode
    lw $t0, -40($fp)
    lw $t1, -40($fp)
    seq $t0, $t0, $t1
    sw $t0, -44($fp)
    
    #GotoIfNode
    lw $t0, -44($fp)
    bnez $t0, pool_68
    
    j loop_67
    
    #LabelNode
    
    pool_68:
    
    #EqNode
    lw $t0, -40($fp)
    la $t1, A
    seq $t0, $t0, $t1
    sw $t0, -140($fp)
    
    #MinusNode
    li $t0, 1
    lw $t1, -140($fp)
    sub $t0, $t0, $t1
    sw $t0, -156($fp)
    
    #GotoIfNode
    lw $t0, -156($fp)
    bnez $t0, next0_70
    
    #AssignNode
    lw $t0, -36($fp)
    sw $t0, -124($fp)
    
    #AssignNode
    li $t0, 1
    sw $t0, -168($fp)
    
    #AssignNode
    lw $t0, -168($fp)
    sw $t0, 0($fp)
    
    j end_69
    
    #LabelNode
    
    next0_70:
    
    #EqNode
    lw $t0, -40($fp)
    la $t1, C1
    seq $t0, $t0, $t1
    sw $t0, -184($fp)
    
    #MinusNode
    li $t0, 1
    lw $t1, -184($fp)
    sub $t0, $t0, $t1
    sw $t0, -196($fp)
    
    #GotoIfNode
    lw $t0, -196($fp)
    bnez $t0, next1_71
    
    #AssignNode
    lw $t0, -36($fp)
    sw $t0, -180($fp)
    
    #AssignNode
    li $t0, 2
    sw $t0, -200($fp)
    
    #AssignNode
    lw $t0, -200($fp)
    sw $t0, 0($fp)
    
    j end_69
    
    #LabelNode
    
    next1_71:
    
    #EqNode
    lw $t0, -40($fp)
    la $t1, C2
    seq $t0, $t0, $t1
    sw $t0, -212($fp)
    
    #MinusNode
    li $t0, 1
    lw $t1, -212($fp)
    sub $t0, $t0, $t1
    sw $t0, -216($fp)
    
    #GotoIfNode
    lw $t0, -216($fp)
    bnez $t0, next2_72
    
    #AssignNode
    lw $t0, -36($fp)
    sw $t0, -204($fp)
    
    #AssignNode
    li $t0, 3
    sw $t0, -220($fp)
    
    #AssignNode
    lw $t0, -220($fp)
    sw $t0, 0($fp)
    
    j end_69
    
    #LabelNode
    
    next2_72:
    
    #EqNode
    lw $t0, -40($fp)
    la $t1, Object
    seq $t0, $t0, $t1
    sw $t0, -228($fp)
    
    #MinusNode
    li $t0, 1
    lw $t1, -228($fp)
    sub $t0, $t0, $t1
    sw $t0, -232($fp)
    
    #GotoIfNode
    lw $t0, -232($fp)
    bnez $t0, next3_73
    
    #AssignNode
    lw $t0, -36($fp)
    sw $t0, -224($fp)
    
    #AssignNode
    li $t0, 4
    sw $t0, -236($fp)
    
    #AssignNode
    lw $t0, -236($fp)
    sw $t0, 0($fp)
    
    j end_69
    
    #LabelNode
    
    next3_73:
    
    la $a0, case_missmatch
    j abort
    
    #LabelNode
    
    end_69:
    
    #AssignNode
    lw $t0, 0($fp)
    sw $t0, -28($fp)
    
    #AssignNode
    lw $t0, -28($fp)
    sw $t0, -40($fp)
    
    #AssignNode
    li $t0, 2
    sw $t0, -44($fp)
    
    #EqNode
    lw $t0, -40($fp)
    lw $t1, -44($fp)
    seq $t0, $t0, $t1
    sw $t0, -36($fp)
    
    #AssignNode
    li $t0, 381
    sw $t0, -40($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -44($fp)
    
    #ParamNode
    lw $t0, -40($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -36($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -44($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -44($fp)
    lw $t0, 0($t0)
    lw $t0, 108($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #AssignNode
    lw $t0, -20($fp)
    sw $t0, 0($fp)
    
    #AssignNode
    lw $t0, 0($fp)
    sw $t0, -32($fp)
    
    #AssignNode
    lw $t0, -32($fp)
    sw $t0, -36($fp)
    
    #TypeOfNode
    #Capturing case on void
    la $a0, case_on_void
    lw $t0, -36($fp)
    la $t1, void
    beq $t0, $t1, abort
    
    #Executing typeof
    lw $t0, -36($fp)
    lw $t0, 0($t0)
    sw $t0, -40($fp)
    
    #LabelNode
    
    loop_74:
    
    #EqNode
    lw $t0, -40($fp)
    la $t1, A
    seq $t0, $t0, $t1
    sw $t0, -44($fp)
    
    #GotoIfNode
    lw $t0, -44($fp)
    bnez $t0, pool_75
    
    #EqNode
    lw $t0, -40($fp)
    la $t1, P
    seq $t0, $t0, $t1
    sw $t0, -44($fp)
    
    #GotoIfNode
    lw $t0, -44($fp)
    bnez $t0, pool_75
    
    #EqNode
    lw $t0, -40($fp)
    la $t1, C2
    seq $t0, $t0, $t1
    sw $t0, -44($fp)
    
    #GotoIfNode
    lw $t0, -44($fp)
    bnez $t0, pool_75
    
    #EqNode
    lw $t0, -40($fp)
    la $t1, Object
    seq $t0, $t0, $t1
    sw $t0, -44($fp)
    
    #GotoIfNode
    lw $t0, -44($fp)
    bnez $t0, pool_75
    
    #ParentOfNode
    lw $t0, -40($fp)
    lw $t0, 4($t0)
    sw $t0, -40($fp)
    
    #EqNode
    lw $t0, -40($fp)
    lw $t1, -40($fp)
    seq $t0, $t0, $t1
    sw $t0, -44($fp)
    
    #GotoIfNode
    lw $t0, -44($fp)
    bnez $t0, pool_75
    
    j loop_74
    
    #LabelNode
    
    pool_75:
    
    #EqNode
    lw $t0, -40($fp)
    la $t1, A
    seq $t0, $t0, $t1
    sw $t0, -124($fp)
    
    #MinusNode
    li $t0, 1
    lw $t1, -124($fp)
    sub $t0, $t0, $t1
    sw $t0, -140($fp)
    
    #GotoIfNode
    lw $t0, -140($fp)
    bnez $t0, next0_77
    
    #AssignNode
    lw $t0, -36($fp)
    sw $t0, -112($fp)
    
    #AssignNode
    li $t0, 1
    sw $t0, -156($fp)
    
    #AssignNode
    lw $t0, -156($fp)
    sw $t0, 0($fp)
    
    j end_76
    
    #LabelNode
    
    next0_77:
    
    #EqNode
    lw $t0, -40($fp)
    la $t1, P
    seq $t0, $t0, $t1
    sw $t0, -168($fp)
    
    #MinusNode
    li $t0, 1
    lw $t1, -168($fp)
    sub $t0, $t0, $t1
    sw $t0, -180($fp)
    
    #GotoIfNode
    lw $t0, -180($fp)
    bnez $t0, next1_78
    
    #AssignNode
    lw $t0, -36($fp)
    sw $t0, -164($fp)
    
    #AssignNode
    li $t0, 2
    sw $t0, -184($fp)
    
    #AssignNode
    lw $t0, -184($fp)
    sw $t0, 0($fp)
    
    j end_76
    
    #LabelNode
    
    next1_78:
    
    #EqNode
    lw $t0, -40($fp)
    la $t1, C2
    seq $t0, $t0, $t1
    sw $t0, -196($fp)
    
    #MinusNode
    li $t0, 1
    lw $t1, -196($fp)
    sub $t0, $t0, $t1
    sw $t0, -200($fp)
    
    #GotoIfNode
    lw $t0, -200($fp)
    bnez $t0, next2_79
    
    #AssignNode
    lw $t0, -36($fp)
    sw $t0, -188($fp)
    
    #AssignNode
    li $t0, 3
    sw $t0, -204($fp)
    
    #AssignNode
    lw $t0, -204($fp)
    sw $t0, 0($fp)
    
    j end_76
    
    #LabelNode
    
    next2_79:
    
    #EqNode
    lw $t0, -40($fp)
    la $t1, Object
    seq $t0, $t0, $t1
    sw $t0, -212($fp)
    
    #MinusNode
    li $t0, 1
    lw $t1, -212($fp)
    sub $t0, $t0, $t1
    sw $t0, -216($fp)
    
    #GotoIfNode
    lw $t0, -216($fp)
    bnez $t0, next3_80
    
    #AssignNode
    lw $t0, -36($fp)
    sw $t0, -208($fp)
    
    #AssignNode
    li $t0, 4
    sw $t0, -220($fp)
    
    #AssignNode
    lw $t0, -220($fp)
    sw $t0, 0($fp)
    
    j end_76
    
    #LabelNode
    
    next3_80:
    
    la $a0, case_missmatch
    j abort
    
    #LabelNode
    
    end_76:
    
    #AssignNode
    lw $t0, 0($fp)
    sw $t0, -28($fp)
    
    #AssignNode
    lw $t0, -28($fp)
    sw $t0, -40($fp)
    
    #AssignNode
    li $t0, 2
    sw $t0, -44($fp)
    
    #EqNode
    lw $t0, -40($fp)
    lw $t1, -44($fp)
    seq $t0, $t0, $t1
    sw $t0, -36($fp)
    
    #AssignNode
    li $t0, 390
    sw $t0, -40($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -44($fp)
    
    #ParamNode
    lw $t0, -40($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -36($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -44($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -44($fp)
    lw $t0, 0($t0)
    lw $t0, 108($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #AssignNode
    lw $t0, -24($fp)
    sw $t0, 0($fp)
    
    #AssignNode
    lw $t0, 0($fp)
    sw $t0, -32($fp)
    
    #AssignNode
    lw $t0, -32($fp)
    sw $t0, -36($fp)
    
    #TypeOfNode
    #Capturing case on void
    la $a0, case_on_void
    lw $t0, -36($fp)
    la $t1, void
    beq $t0, $t1, abort
    
    #Executing typeof
    lw $t0, -36($fp)
    lw $t0, 0($t0)
    sw $t0, -40($fp)
    
    #LabelNode
    
    loop_81:
    
    #EqNode
    lw $t0, -40($fp)
    la $t1, A
    seq $t0, $t0, $t1
    sw $t0, -44($fp)
    
    #GotoIfNode
    lw $t0, -44($fp)
    bnez $t0, pool_82
    
    #EqNode
    lw $t0, -40($fp)
    la $t1, P
    seq $t0, $t0, $t1
    sw $t0, -44($fp)
    
    #GotoIfNode
    lw $t0, -44($fp)
    bnez $t0, pool_82
    
    #EqNode
    lw $t0, -40($fp)
    la $t1, C2
    seq $t0, $t0, $t1
    sw $t0, -44($fp)
    
    #GotoIfNode
    lw $t0, -44($fp)
    bnez $t0, pool_82
    
    #EqNode
    lw $t0, -40($fp)
    la $t1, Object
    seq $t0, $t0, $t1
    sw $t0, -44($fp)
    
    #GotoIfNode
    lw $t0, -44($fp)
    bnez $t0, pool_82
    
    #ParentOfNode
    lw $t0, -40($fp)
    lw $t0, 4($t0)
    sw $t0, -40($fp)
    
    #EqNode
    lw $t0, -40($fp)
    lw $t1, -40($fp)
    seq $t0, $t0, $t1
    sw $t0, -44($fp)
    
    #GotoIfNode
    lw $t0, -44($fp)
    bnez $t0, pool_82
    
    j loop_81
    
    #LabelNode
    
    pool_82:
    
    #EqNode
    lw $t0, -40($fp)
    la $t1, A
    seq $t0, $t0, $t1
    sw $t0, -112($fp)
    
    #MinusNode
    li $t0, 1
    lw $t1, -112($fp)
    sub $t0, $t0, $t1
    sw $t0, -124($fp)
    
    #GotoIfNode
    lw $t0, -124($fp)
    bnez $t0, next0_84
    
    #AssignNode
    lw $t0, -36($fp)
    sw $t0, -104($fp)
    
    #AssignNode
    li $t0, 1
    sw $t0, -140($fp)
    
    #AssignNode
    lw $t0, -140($fp)
    sw $t0, 0($fp)
    
    j end_83
    
    #LabelNode
    
    next0_84:
    
    #EqNode
    lw $t0, -40($fp)
    la $t1, P
    seq $t0, $t0, $t1
    sw $t0, -156($fp)
    
    #MinusNode
    li $t0, 1
    lw $t1, -156($fp)
    sub $t0, $t0, $t1
    sw $t0, -164($fp)
    
    #GotoIfNode
    lw $t0, -164($fp)
    bnez $t0, next1_85
    
    #AssignNode
    lw $t0, -36($fp)
    sw $t0, -152($fp)
    
    #AssignNode
    li $t0, 2
    sw $t0, -168($fp)
    
    #AssignNode
    lw $t0, -168($fp)
    sw $t0, 0($fp)
    
    j end_83
    
    #LabelNode
    
    next1_85:
    
    #EqNode
    lw $t0, -40($fp)
    la $t1, C2
    seq $t0, $t0, $t1
    sw $t0, -180($fp)
    
    #MinusNode
    li $t0, 1
    lw $t1, -180($fp)
    sub $t0, $t0, $t1
    sw $t0, -184($fp)
    
    #GotoIfNode
    lw $t0, -184($fp)
    bnez $t0, next2_86
    
    #AssignNode
    lw $t0, -36($fp)
    sw $t0, -172($fp)
    
    #AssignNode
    li $t0, 3
    sw $t0, -188($fp)
    
    #AssignNode
    lw $t0, -188($fp)
    sw $t0, 0($fp)
    
    j end_83
    
    #LabelNode
    
    next2_86:
    
    #EqNode
    lw $t0, -40($fp)
    la $t1, Object
    seq $t0, $t0, $t1
    sw $t0, -196($fp)
    
    #MinusNode
    li $t0, 1
    lw $t1, -196($fp)
    sub $t0, $t0, $t1
    sw $t0, -200($fp)
    
    #GotoIfNode
    lw $t0, -200($fp)
    bnez $t0, next3_87
    
    #AssignNode
    lw $t0, -36($fp)
    sw $t0, -192($fp)
    
    #AssignNode
    li $t0, 4
    sw $t0, -204($fp)
    
    #AssignNode
    lw $t0, -204($fp)
    sw $t0, 0($fp)
    
    j end_83
    
    #LabelNode
    
    next3_87:
    
    la $a0, case_missmatch
    j abort
    
    #LabelNode
    
    end_83:
    
    #AssignNode
    lw $t0, 0($fp)
    sw $t0, -28($fp)
    
    #AssignNode
    lw $t0, -28($fp)
    sw $t0, -40($fp)
    
    #AssignNode
    li $t0, 3
    sw $t0, -44($fp)
    
    #EqNode
    lw $t0, -40($fp)
    lw $t1, -44($fp)
    seq $t0, $t0, $t1
    sw $t0, -36($fp)
    
    #AssignNode
    li $t0, 399
    sw $t0, -40($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -44($fp)
    
    #ParamNode
    lw $t0, -40($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -36($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -44($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -44($fp)
    lw $t0, 0($t0)
    lw $t0, 108($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #AssignNode
    lw $t0, -20($fp)
    sw $t0, 0($fp)
    
    #AssignNode
    lw $t0, 0($fp)
    sw $t0, -32($fp)
    
    #AssignNode
    lw $t0, -8($fp)
    sw $t0, -36($fp)
    
    #TypeOfNode
    #Capturing case on void
    la $a0, case_on_void
    lw $t0, -36($fp)
    la $t1, void
    beq $t0, $t1, abort
    
    #Executing typeof
    lw $t0, -36($fp)
    lw $t0, 0($t0)
    sw $t0, -40($fp)
    
    #LabelNode
    
    loop_88:
    
    #EqNode
    lw $t0, -40($fp)
    la $t1, A
    seq $t0, $t0, $t1
    sw $t0, -44($fp)
    
    #GotoIfNode
    lw $t0, -44($fp)
    bnez $t0, pool_89
    
    #EqNode
    lw $t0, -40($fp)
    la $t1, C1
    seq $t0, $t0, $t1
    sw $t0, -44($fp)
    
    #GotoIfNode
    lw $t0, -44($fp)
    bnez $t0, pool_89
    
    #EqNode
    lw $t0, -40($fp)
    la $t1, C2
    seq $t0, $t0, $t1
    sw $t0, -44($fp)
    
    #GotoIfNode
    lw $t0, -44($fp)
    bnez $t0, pool_89
    
    #EqNode
    lw $t0, -40($fp)
    la $t1, Object
    seq $t0, $t0, $t1
    sw $t0, -44($fp)
    
    #GotoIfNode
    lw $t0, -44($fp)
    bnez $t0, pool_89
    
    #ParentOfNode
    lw $t0, -40($fp)
    lw $t0, 4($t0)
    sw $t0, -40($fp)
    
    #EqNode
    lw $t0, -40($fp)
    lw $t1, -40($fp)
    seq $t0, $t0, $t1
    sw $t0, -44($fp)
    
    #GotoIfNode
    lw $t0, -44($fp)
    bnez $t0, pool_89
    
    j loop_88
    
    #LabelNode
    
    pool_89:
    
    #EqNode
    lw $t0, -40($fp)
    la $t1, A
    seq $t0, $t0, $t1
    sw $t0, -104($fp)
    
    #MinusNode
    li $t0, 1
    lw $t1, -104($fp)
    sub $t0, $t0, $t1
    sw $t0, -112($fp)
    
    #GotoIfNode
    lw $t0, -112($fp)
    bnez $t0, next0_91
    
    #AssignNode
    lw $t0, -36($fp)
    sw $t0, -88($fp)
    
    #AssignNode
    li $t0, 1
    sw $t0, -124($fp)
    
    #AssignNode
    lw $t0, -124($fp)
    sw $t0, 0($fp)
    
    j end_90
    
    #LabelNode
    
    next0_91:
    
    #EqNode
    lw $t0, -40($fp)
    la $t1, C1
    seq $t0, $t0, $t1
    sw $t0, -140($fp)
    
    #MinusNode
    li $t0, 1
    lw $t1, -140($fp)
    sub $t0, $t0, $t1
    sw $t0, -152($fp)
    
    #GotoIfNode
    lw $t0, -152($fp)
    bnez $t0, next1_92
    
    #AssignNode
    lw $t0, -36($fp)
    sw $t0, -136($fp)
    
    #AssignNode
    li $t0, 2
    sw $t0, -156($fp)
    
    #AssignNode
    lw $t0, -156($fp)
    sw $t0, 0($fp)
    
    j end_90
    
    #LabelNode
    
    next1_92:
    
    #EqNode
    lw $t0, -40($fp)
    la $t1, C2
    seq $t0, $t0, $t1
    sw $t0, -164($fp)
    
    #MinusNode
    li $t0, 1
    lw $t1, -164($fp)
    sub $t0, $t0, $t1
    sw $t0, -168($fp)
    
    #GotoIfNode
    lw $t0, -168($fp)
    bnez $t0, next2_93
    
    #AssignNode
    lw $t0, -36($fp)
    sw $t0, -160($fp)
    
    #AssignNode
    li $t0, 3
    sw $t0, -172($fp)
    
    #AssignNode
    lw $t0, -172($fp)
    sw $t0, 0($fp)
    
    j end_90
    
    #LabelNode
    
    next2_93:
    
    #EqNode
    lw $t0, -40($fp)
    la $t1, Object
    seq $t0, $t0, $t1
    sw $t0, -180($fp)
    
    #MinusNode
    li $t0, 1
    lw $t1, -180($fp)
    sub $t0, $t0, $t1
    sw $t0, -184($fp)
    
    #GotoIfNode
    lw $t0, -184($fp)
    bnez $t0, next3_94
    
    #AssignNode
    lw $t0, -36($fp)
    sw $t0, -176($fp)
    
    #AssignNode
    li $t0, 4
    sw $t0, -188($fp)
    
    #AssignNode
    lw $t0, -188($fp)
    sw $t0, 0($fp)
    
    j end_90
    
    #LabelNode
    
    next3_94:
    
    la $a0, case_missmatch
    j abort
    
    #LabelNode
    
    end_90:
    
    #AssignNode
    lw $t0, 0($fp)
    sw $t0, -28($fp)
    
    #AssignNode
    lw $t0, -28($fp)
    sw $t0, -40($fp)
    
    #AssignNode
    li $t0, 1
    sw $t0, -44($fp)
    
    #EqNode
    lw $t0, -40($fp)
    lw $t1, -44($fp)
    seq $t0, $t0, $t1
    sw $t0, -36($fp)
    
    #AssignNode
    li $t0, 408
    sw $t0, -40($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -44($fp)
    
    #ParamNode
    lw $t0, -40($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -36($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -44($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -44($fp)
    lw $t0, 0($t0)
    lw $t0, 108($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #AssignNode
    lw $t0, -8($fp)
    sw $t0, 0($fp)
    
    #AssignNode
    lw $t0, 0($fp)
    sw $t0, -32($fp)
    
    #AssignNode
    lw $t0, -32($fp)
    sw $t0, -36($fp)
    
    #TypeOfNode
    #Capturing case on void
    la $a0, case_on_void
    lw $t0, -36($fp)
    la $t1, void
    beq $t0, $t1, abort
    
    #Executing typeof
    lw $t0, -36($fp)
    lw $t0, 0($t0)
    sw $t0, -40($fp)
    
    #LabelNode
    
    loop_95:
    
    #EqNode
    lw $t0, -40($fp)
    la $t1, A
    seq $t0, $t0, $t1
    sw $t0, -44($fp)
    
    #GotoIfNode
    lw $t0, -44($fp)
    bnez $t0, pool_96
    
    #EqNode
    lw $t0, -40($fp)
    la $t1, B
    seq $t0, $t0, $t1
    sw $t0, -44($fp)
    
    #GotoIfNode
    lw $t0, -44($fp)
    bnez $t0, pool_96
    
    #EqNode
    lw $t0, -40($fp)
    la $t1, C
    seq $t0, $t0, $t1
    sw $t0, -44($fp)
    
    #GotoIfNode
    lw $t0, -44($fp)
    bnez $t0, pool_96
    
    #ParentOfNode
    lw $t0, -40($fp)
    lw $t0, 4($t0)
    sw $t0, -40($fp)
    
    #EqNode
    lw $t0, -40($fp)
    lw $t1, -40($fp)
    seq $t0, $t0, $t1
    sw $t0, -44($fp)
    
    #GotoIfNode
    lw $t0, -44($fp)
    bnez $t0, pool_96
    
    j loop_95
    
    #LabelNode
    
    pool_96:
    
    #EqNode
    lw $t0, -40($fp)
    la $t1, A
    seq $t0, $t0, $t1
    sw $t0, -88($fp)
    
    #MinusNode
    li $t0, 1
    lw $t1, -88($fp)
    sub $t0, $t0, $t1
    sw $t0, -104($fp)
    
    #GotoIfNode
    lw $t0, -104($fp)
    bnez $t0, next0_98
    
    #AssignNode
    lw $t0, -36($fp)
    sw $t0, -84($fp)
    
    #AssignNode
    li $t0, 1
    sw $t0, -112($fp)
    
    #AssignNode
    lw $t0, -112($fp)
    sw $t0, 0($fp)
    
    j end_97
    
    #LabelNode
    
    next0_98:
    
    #EqNode
    lw $t0, -40($fp)
    la $t1, B
    seq $t0, $t0, $t1
    sw $t0, -124($fp)
    
    #MinusNode
    li $t0, 1
    lw $t1, -124($fp)
    sub $t0, $t0, $t1
    sw $t0, -136($fp)
    
    #GotoIfNode
    lw $t0, -136($fp)
    bnez $t0, next1_99
    
    #AssignNode
    lw $t0, -36($fp)
    sw $t0, -120($fp)
    
    #AssignNode
    li $t0, 2
    sw $t0, -140($fp)
    
    #AssignNode
    lw $t0, -140($fp)
    sw $t0, 0($fp)
    
    j end_97
    
    #LabelNode
    
    next1_99:
    
    #EqNode
    lw $t0, -40($fp)
    la $t1, C
    seq $t0, $t0, $t1
    sw $t0, -152($fp)
    
    #MinusNode
    li $t0, 1
    lw $t1, -152($fp)
    sub $t0, $t0, $t1
    sw $t0, -156($fp)
    
    #GotoIfNode
    lw $t0, -156($fp)
    bnez $t0, next2_100
    
    #AssignNode
    lw $t0, -36($fp)
    sw $t0, -144($fp)
    
    #AssignNode
    li $t0, 3
    sw $t0, -160($fp)
    
    #AssignNode
    lw $t0, -160($fp)
    sw $t0, 0($fp)
    
    j end_97
    
    #LabelNode
    
    next2_100:
    
    la $a0, case_missmatch
    j abort
    
    #LabelNode
    
    end_97:
    
    #AssignNode
    lw $t0, 0($fp)
    sw $t0, -28($fp)
    
    #AssignNode
    lw $t0, -28($fp)
    sw $t0, -40($fp)
    
    #AssignNode
    li $t0, 2
    sw $t0, -44($fp)
    
    #EqNode
    lw $t0, -40($fp)
    lw $t1, -44($fp)
    seq $t0, $t0, $t1
    sw $t0, -36($fp)
    
    #AssignNode
    li $t0, 417
    sw $t0, -40($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -44($fp)
    
    #ParamNode
    lw $t0, -40($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -36($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -44($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -44($fp)
    lw $t0, 0($t0)
    lw $t0, 108($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #AssignNode
    lw $t0, -12($fp)
    sw $t0, 0($fp)
    
    #AssignNode
    lw $t0, 0($fp)
    sw $t0, -32($fp)
    
    #AssignNode
    lw $t0, -32($fp)
    sw $t0, -36($fp)
    
    #TypeOfNode
    #Capturing case on void
    la $a0, case_on_void
    lw $t0, -36($fp)
    la $t1, void
    beq $t0, $t1, abort
    
    #Executing typeof
    lw $t0, -36($fp)
    lw $t0, 0($t0)
    sw $t0, -40($fp)
    
    #LabelNode
    
    loop_101:
    
    #EqNode
    lw $t0, -40($fp)
    la $t1, A
    seq $t0, $t0, $t1
    sw $t0, -44($fp)
    
    #GotoIfNode
    lw $t0, -44($fp)
    bnez $t0, pool_102
    
    #EqNode
    lw $t0, -40($fp)
    la $t1, B
    seq $t0, $t0, $t1
    sw $t0, -44($fp)
    
    #GotoIfNode
    lw $t0, -44($fp)
    bnez $t0, pool_102
    
    #EqNode
    lw $t0, -40($fp)
    la $t1, C
    seq $t0, $t0, $t1
    sw $t0, -44($fp)
    
    #GotoIfNode
    lw $t0, -44($fp)
    bnez $t0, pool_102
    
    #EqNode
    lw $t0, -40($fp)
    la $t1, Object
    seq $t0, $t0, $t1
    sw $t0, -44($fp)
    
    #GotoIfNode
    lw $t0, -44($fp)
    bnez $t0, pool_102
    
    #ParentOfNode
    lw $t0, -40($fp)
    lw $t0, 4($t0)
    sw $t0, -40($fp)
    
    #EqNode
    lw $t0, -40($fp)
    lw $t1, -40($fp)
    seq $t0, $t0, $t1
    sw $t0, -44($fp)
    
    #GotoIfNode
    lw $t0, -44($fp)
    bnez $t0, pool_102
    
    j loop_101
    
    #LabelNode
    
    pool_102:
    
    #EqNode
    lw $t0, -40($fp)
    la $t1, A
    seq $t0, $t0, $t1
    sw $t0, -84($fp)
    
    #MinusNode
    li $t0, 1
    lw $t1, -84($fp)
    sub $t0, $t0, $t1
    sw $t0, -88($fp)
    
    #GotoIfNode
    lw $t0, -88($fp)
    bnez $t0, next0_104
    
    #AssignNode
    lw $t0, -36($fp)
    sw $t0, -72($fp)
    
    #AssignNode
    li $t0, 1
    sw $t0, -104($fp)
    
    #AssignNode
    lw $t0, -104($fp)
    sw $t0, 0($fp)
    
    j end_103
    
    #LabelNode
    
    next0_104:
    
    #EqNode
    lw $t0, -40($fp)
    la $t1, B
    seq $t0, $t0, $t1
    sw $t0, -112($fp)
    
    #MinusNode
    li $t0, 1
    lw $t1, -112($fp)
    sub $t0, $t0, $t1
    sw $t0, -120($fp)
    
    #GotoIfNode
    lw $t0, -120($fp)
    bnez $t0, next1_105
    
    #AssignNode
    lw $t0, -36($fp)
    sw $t0, -108($fp)
    
    #AssignNode
    li $t0, 2
    sw $t0, -124($fp)
    
    #AssignNode
    lw $t0, -124($fp)
    sw $t0, 0($fp)
    
    j end_103
    
    #LabelNode
    
    next1_105:
    
    #EqNode
    lw $t0, -40($fp)
    la $t1, C
    seq $t0, $t0, $t1
    sw $t0, -136($fp)
    
    #MinusNode
    li $t0, 1
    lw $t1, -136($fp)
    sub $t0, $t0, $t1
    sw $t0, -140($fp)
    
    #GotoIfNode
    lw $t0, -140($fp)
    bnez $t0, next2_106
    
    #AssignNode
    lw $t0, -36($fp)
    sw $t0, -128($fp)
    
    #AssignNode
    li $t0, 3
    sw $t0, -144($fp)
    
    #AssignNode
    lw $t0, -144($fp)
    sw $t0, 0($fp)
    
    j end_103
    
    #LabelNode
    
    next2_106:
    
    #EqNode
    lw $t0, -40($fp)
    la $t1, Object
    seq $t0, $t0, $t1
    sw $t0, -152($fp)
    
    #MinusNode
    li $t0, 1
    lw $t1, -152($fp)
    sub $t0, $t0, $t1
    sw $t0, -156($fp)
    
    #GotoIfNode
    lw $t0, -156($fp)
    bnez $t0, next3_107
    
    #AssignNode
    lw $t0, -36($fp)
    sw $t0, -148($fp)
    
    #AssignNode
    li $t0, 4
    sw $t0, -160($fp)
    
    #AssignNode
    lw $t0, -160($fp)
    sw $t0, 0($fp)
    
    j end_103
    
    #LabelNode
    
    next3_107:
    
    la $a0, case_missmatch
    j abort
    
    #LabelNode
    
    end_103:
    
    #AssignNode
    lw $t0, 0($fp)
    sw $t0, -28($fp)
    
    #AssignNode
    lw $t0, -28($fp)
    sw $t0, -40($fp)
    
    #AssignNode
    li $t0, 3
    sw $t0, -44($fp)
    
    #EqNode
    lw $t0, -40($fp)
    lw $t1, -44($fp)
    seq $t0, $t0, $t1
    sw $t0, -36($fp)
    
    #AssignNode
    li $t0, 426
    sw $t0, -40($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -44($fp)
    
    #ParamNode
    lw $t0, -40($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -36($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -44($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -44($fp)
    lw $t0, 0($t0)
    lw $t0, 108($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #AssignNode
    lw $t0, -20($fp)
    sw $t0, 0($fp)
    
    #AssignNode
    lw $t0, 0($fp)
    sw $t0, -32($fp)
    
    #AssignNode
    lw $t0, -32($fp)
    sw $t0, -36($fp)
    
    #TypeOfNode
    #Capturing case on void
    la $a0, case_on_void
    lw $t0, -36($fp)
    la $t1, void
    beq $t0, $t1, abort
    
    #Executing typeof
    lw $t0, -36($fp)
    lw $t0, 0($t0)
    sw $t0, -40($fp)
    
    #LabelNode
    
    loop_108:
    
    #EqNode
    lw $t0, -40($fp)
    la $t1, A
    seq $t0, $t0, $t1
    sw $t0, -44($fp)
    
    #GotoIfNode
    lw $t0, -44($fp)
    bnez $t0, pool_109
    
    #EqNode
    lw $t0, -40($fp)
    la $t1, B
    seq $t0, $t0, $t1
    sw $t0, -44($fp)
    
    #GotoIfNode
    lw $t0, -44($fp)
    bnez $t0, pool_109
    
    #EqNode
    lw $t0, -40($fp)
    la $t1, C
    seq $t0, $t0, $t1
    sw $t0, -44($fp)
    
    #GotoIfNode
    lw $t0, -44($fp)
    bnez $t0, pool_109
    
    #EqNode
    lw $t0, -40($fp)
    la $t1, Object
    seq $t0, $t0, $t1
    sw $t0, -44($fp)
    
    #GotoIfNode
    lw $t0, -44($fp)
    bnez $t0, pool_109
    
    #ParentOfNode
    lw $t0, -40($fp)
    lw $t0, 4($t0)
    sw $t0, -40($fp)
    
    #EqNode
    lw $t0, -40($fp)
    lw $t1, -40($fp)
    seq $t0, $t0, $t1
    sw $t0, -44($fp)
    
    #GotoIfNode
    lw $t0, -44($fp)
    bnez $t0, pool_109
    
    j loop_108
    
    #LabelNode
    
    pool_109:
    
    #EqNode
    lw $t0, -40($fp)
    la $t1, A
    seq $t0, $t0, $t1
    sw $t0, -72($fp)
    
    #MinusNode
    li $t0, 1
    lw $t1, -72($fp)
    sub $t0, $t0, $t1
    sw $t0, -84($fp)
    
    #GotoIfNode
    lw $t0, -84($fp)
    bnez $t0, next0_111
    
    #AssignNode
    lw $t0, -36($fp)
    sw $t0, -68($fp)
    
    #AssignNode
    li $t0, 1
    sw $t0, -88($fp)
    
    #AssignNode
    lw $t0, -88($fp)
    sw $t0, 0($fp)
    
    j end_110
    
    #LabelNode
    
    next0_111:
    
    #EqNode
    lw $t0, -40($fp)
    la $t1, B
    seq $t0, $t0, $t1
    sw $t0, -104($fp)
    
    #MinusNode
    li $t0, 1
    lw $t1, -104($fp)
    sub $t0, $t0, $t1
    sw $t0, -108($fp)
    
    #GotoIfNode
    lw $t0, -108($fp)
    bnez $t0, next1_112
    
    #AssignNode
    lw $t0, -36($fp)
    sw $t0, -92($fp)
    
    #AssignNode
    li $t0, 2
    sw $t0, -112($fp)
    
    #AssignNode
    lw $t0, -112($fp)
    sw $t0, 0($fp)
    
    j end_110
    
    #LabelNode
    
    next1_112:
    
    #EqNode
    lw $t0, -40($fp)
    la $t1, C
    seq $t0, $t0, $t1
    sw $t0, -120($fp)
    
    #MinusNode
    li $t0, 1
    lw $t1, -120($fp)
    sub $t0, $t0, $t1
    sw $t0, -124($fp)
    
    #GotoIfNode
    lw $t0, -124($fp)
    bnez $t0, next2_113
    
    #AssignNode
    lw $t0, -36($fp)
    sw $t0, -116($fp)
    
    #AssignNode
    li $t0, 3
    sw $t0, -128($fp)
    
    #AssignNode
    lw $t0, -128($fp)
    sw $t0, 0($fp)
    
    j end_110
    
    #LabelNode
    
    next2_113:
    
    #EqNode
    lw $t0, -40($fp)
    la $t1, Object
    seq $t0, $t0, $t1
    sw $t0, -136($fp)
    
    #MinusNode
    li $t0, 1
    lw $t1, -136($fp)
    sub $t0, $t0, $t1
    sw $t0, -140($fp)
    
    #GotoIfNode
    lw $t0, -140($fp)
    bnez $t0, next3_114
    
    #AssignNode
    lw $t0, -36($fp)
    sw $t0, -132($fp)
    
    #AssignNode
    li $t0, 4
    sw $t0, -144($fp)
    
    #AssignNode
    lw $t0, -144($fp)
    sw $t0, 0($fp)
    
    j end_110
    
    #LabelNode
    
    next3_114:
    
    la $a0, case_missmatch
    j abort
    
    #LabelNode
    
    end_110:
    
    #AssignNode
    lw $t0, 0($fp)
    sw $t0, -28($fp)
    
    #AssignNode
    lw $t0, -28($fp)
    sw $t0, -40($fp)
    
    #AssignNode
    li $t0, 4
    sw $t0, -44($fp)
    
    #EqNode
    lw $t0, -40($fp)
    lw $t1, -44($fp)
    seq $t0, $t0, $t1
    sw $t0, -36($fp)
    
    #AssignNode
    li $t0, 438
    sw $t0, -40($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -44($fp)
    
    #ParamNode
    lw $t0, -40($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -36($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -44($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -44($fp)
    lw $t0, 0($t0)
    lw $t0, 108($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #AssignNode
    lw $t0, -8($fp)
    sw $t0, 0($fp)
    
    #AssignNode
    lw $t0, 0($fp)
    sw $t0, -32($fp)
    
    #AssignNode
    lw $t0, -32($fp)
    sw $t0, -36($fp)
    
    #TypeOfNode
    #Capturing case on void
    la $a0, case_on_void
    lw $t0, -36($fp)
    la $t1, void
    beq $t0, $t1, abort
    
    #Executing typeof
    lw $t0, -36($fp)
    lw $t0, 0($t0)
    sw $t0, -40($fp)
    
    #LabelNode
    
    loop_115:
    
    #EqNode
    lw $t0, -40($fp)
    la $t1, Object
    seq $t0, $t0, $t1
    sw $t0, -44($fp)
    
    #GotoIfNode
    lw $t0, -44($fp)
    bnez $t0, pool_116
    
    #ParentOfNode
    lw $t0, -40($fp)
    lw $t0, 4($t0)
    sw $t0, -40($fp)
    
    #EqNode
    lw $t0, -40($fp)
    lw $t1, -40($fp)
    seq $t0, $t0, $t1
    sw $t0, -44($fp)
    
    #GotoIfNode
    lw $t0, -44($fp)
    bnez $t0, pool_116
    
    j loop_115
    
    #LabelNode
    
    pool_116:
    
    #EqNode
    lw $t0, -40($fp)
    la $t1, Object
    seq $t0, $t0, $t1
    sw $t0, -68($fp)
    
    #MinusNode
    li $t0, 1
    lw $t1, -68($fp)
    sub $t0, $t0, $t1
    sw $t0, -72($fp)
    
    #GotoIfNode
    lw $t0, -72($fp)
    bnez $t0, next0_118
    
    #AssignNode
    lw $t0, -36($fp)
    sw $t0, -60($fp)
    
    #AssignNode
    li $t0, 4
    sw $t0, -84($fp)
    
    #AssignNode
    lw $t0, -84($fp)
    sw $t0, 0($fp)
    
    j end_117
    
    #LabelNode
    
    next0_118:
    
    la $a0, case_missmatch
    j abort
    
    #LabelNode
    
    end_117:
    
    #AssignNode
    lw $t0, 0($fp)
    sw $t0, -28($fp)
    
    #AssignNode
    lw $t0, -28($fp)
    sw $t0, -40($fp)
    
    #AssignNode
    li $t0, 4
    sw $t0, -44($fp)
    
    #EqNode
    lw $t0, -40($fp)
    lw $t1, -44($fp)
    seq $t0, $t0, $t1
    sw $t0, -36($fp)
    
    #AssignNode
    li $t0, 444
    sw $t0, -40($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -44($fp)
    
    #ParamNode
    lw $t0, -40($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -36($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -44($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -44($fp)
    lw $t0, 0($t0)
    lw $t0, 108($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #AssignNode
    li $t0, 1
    sw $t0, 0($fp)
    
    #BoxNode
    lw $t1, 0($fp)
    li $a0, 8
    li $v0, 9
    syscall
    sw $v0, -36($fp)
    la $t0, Bool
    sw $t0, 0($v0)
    sb $t1, 4($v0)
    
    #AssignNode
    lw $t0, -36($fp)
    sw $t0, -32($fp)
    
    #AssignNode
    lw $t0, -32($fp)
    sw $t0, -36($fp)
    
    #TypeOfNode
    #Capturing case on void
    la $a0, case_on_void
    lw $t0, -36($fp)
    la $t1, void
    beq $t0, $t1, abort
    
    #Executing typeof
    lw $t0, -36($fp)
    lw $t0, 0($t0)
    sw $t0, -40($fp)
    
    #LabelNode
    
    loop_119:
    
    #EqNode
    lw $t0, -40($fp)
    la $t1, Bool
    seq $t0, $t0, $t1
    sw $t0, -44($fp)
    
    #GotoIfNode
    lw $t0, -44($fp)
    bnez $t0, pool_120
    
    #EqNode
    lw $t0, -40($fp)
    la $t1, B
    seq $t0, $t0, $t1
    sw $t0, -44($fp)
    
    #GotoIfNode
    lw $t0, -44($fp)
    bnez $t0, pool_120
    
    #EqNode
    lw $t0, -40($fp)
    la $t1, C
    seq $t0, $t0, $t1
    sw $t0, -44($fp)
    
    #GotoIfNode
    lw $t0, -44($fp)
    bnez $t0, pool_120
    
    #ParentOfNode
    lw $t0, -40($fp)
    lw $t0, 4($t0)
    sw $t0, -40($fp)
    
    #EqNode
    lw $t0, -40($fp)
    lw $t1, -40($fp)
    seq $t0, $t0, $t1
    sw $t0, -44($fp)
    
    #GotoIfNode
    lw $t0, -44($fp)
    bnez $t0, pool_120
    
    j loop_119
    
    #LabelNode
    
    pool_120:
    
    #EqNode
    lw $t0, -40($fp)
    la $t1, Bool
    seq $t0, $t0, $t1
    sw $t0, -60($fp)
    
    #MinusNode
    li $t0, 1
    lw $t1, -60($fp)
    sub $t0, $t0, $t1
    sw $t0, -68($fp)
    
    #GotoIfNode
    lw $t0, -68($fp)
    bnez $t0, next0_122
    
    #AssignNode
    lw $t0, -36($fp)
    sw $t0, -52($fp)
    
    #AssignNode
    li $t0, 1
    sw $t0, -72($fp)
    
    #AssignNode
    lw $t0, -72($fp)
    sw $t0, 0($fp)
    
    j end_121
    
    #LabelNode
    
    next0_122:
    
    #EqNode
    lw $t0, -40($fp)
    la $t1, B
    seq $t0, $t0, $t1
    sw $t0, -84($fp)
    
    #MinusNode
    li $t0, 1
    lw $t1, -84($fp)
    sub $t0, $t0, $t1
    sw $t0, -88($fp)
    
    #GotoIfNode
    lw $t0, -88($fp)
    bnez $t0, next1_123
    
    #AssignNode
    lw $t0, -36($fp)
    sw $t0, -76($fp)
    
    #AssignNode
    li $t0, 2
    sw $t0, -92($fp)
    
    #AssignNode
    lw $t0, -92($fp)
    sw $t0, 0($fp)
    
    j end_121
    
    #LabelNode
    
    next1_123:
    
    #EqNode
    lw $t0, -40($fp)
    la $t1, C
    seq $t0, $t0, $t1
    sw $t0, -104($fp)
    
    #MinusNode
    li $t0, 1
    lw $t1, -104($fp)
    sub $t0, $t0, $t1
    sw $t0, -108($fp)
    
    #GotoIfNode
    lw $t0, -108($fp)
    bnez $t0, next2_124
    
    #AssignNode
    lw $t0, -36($fp)
    sw $t0, -100($fp)
    
    #AssignNode
    li $t0, 3
    sw $t0, -112($fp)
    
    #AssignNode
    lw $t0, -112($fp)
    sw $t0, 0($fp)
    
    j end_121
    
    #LabelNode
    
    next2_124:
    
    la $a0, case_missmatch
    j abort
    
    #LabelNode
    
    end_121:
    
    #AssignNode
    lw $t0, 0($fp)
    sw $t0, -28($fp)
    
    #AssignNode
    lw $t0, -28($fp)
    sw $t0, -40($fp)
    
    #AssignNode
    li $t0, 1
    sw $t0, -44($fp)
    
    #EqNode
    lw $t0, -40($fp)
    lw $t1, -44($fp)
    seq $t0, $t0, $t1
    sw $t0, -36($fp)
    
    #AssignNode
    li $t0, 453
    sw $t0, -40($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -44($fp)
    
    #ParamNode
    lw $t0, -40($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -36($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -44($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -44($fp)
    lw $t0, 0($t0)
    lw $t0, 108($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #AssignNode
    li $t0, 2
    sw $t0, 0($fp)
    
    #BoxNode
    lw $t1, 0($fp)
    li $a0, 8
    li $v0, 9
    syscall
    sw $v0, -36($fp)
    la $t0, Int
    sw $t0, 0($v0)
    sb $t1, 4($v0)
    
    #AssignNode
    lw $t0, -36($fp)
    sw $t0, -32($fp)
    
    #AssignNode
    li $t0, 3
    sw $t0, -36($fp)
    
    #BoxNode
    lw $t1, -36($fp)
    li $a0, 8
    li $v0, 9
    syscall
    sw $v0, -40($fp)
    la $t0, Int
    sw $t0, 0($v0)
    sb $t1, 4($v0)
    
    #TypeOfNode
    #Capturing case on void
    la $a0, case_on_void
    lw $t0, -40($fp)
    la $t1, void
    beq $t0, $t1, abort
    
    #Executing typeof
    lw $t0, -40($fp)
    lw $t0, 0($t0)
    sw $t0, -44($fp)
    
    #LabelNode
    
    loop_125:
    
    #EqNode
    lw $t0, -44($fp)
    la $t1, Object
    seq $t0, $t0, $t1
    sw $t0, -52($fp)
    
    #GotoIfNode
    lw $t0, -52($fp)
    bnez $t0, pool_126
    
    #ParentOfNode
    lw $t0, -44($fp)
    lw $t0, 4($t0)
    sw $t0, -44($fp)
    
    #EqNode
    lw $t0, -44($fp)
    lw $t1, -44($fp)
    seq $t0, $t0, $t1
    sw $t0, -52($fp)
    
    #GotoIfNode
    lw $t0, -52($fp)
    bnez $t0, pool_126
    
    j loop_125
    
    #LabelNode
    
    pool_126:
    
    #EqNode
    lw $t0, -44($fp)
    la $t1, Object
    seq $t0, $t0, $t1
    sw $t0, -60($fp)
    
    #MinusNode
    li $t0, 1
    lw $t1, -60($fp)
    sub $t0, $t0, $t1
    sw $t0, -68($fp)
    
    #GotoIfNode
    lw $t0, -68($fp)
    bnez $t0, next0_128
    
    #UnboxNode
    lw $t1, -40($fp)
    lw $t1, 4($t1)
    sw $t1, -40($fp)
    
    #AssignNode
    lw $t0, -40($fp)
    sw $t0, -56($fp)
    
    #AssignNode
    li $t0, 4
    sw $t0, -72($fp)
    
    #AssignNode
    lw $t0, -72($fp)
    sw $t0, 0($fp)
    
    j end_127
    
    #LabelNode
    
    next0_128:
    
    la $a0, case_missmatch
    j abort
    
    #LabelNode
    
    end_127:
    
    #AssignNode
    lw $t0, 0($fp)
    sw $t0, -28($fp)
    
    #AssignNode
    lw $t0, -28($fp)
    sw $t0, -40($fp)
    
    #AssignNode
    li $t0, 4
    sw $t0, -44($fp)
    
    #EqNode
    lw $t0, -40($fp)
    lw $t1, -44($fp)
    seq $t0, $t0, $t1
    sw $t0, -36($fp)
    
    #AssignNode
    li $t0, 459
    sw $t0, -40($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -44($fp)
    
    #ParamNode
    lw $t0, -40($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -36($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -44($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -44($fp)
    lw $t0, 0($t0)
    lw $t0, 108($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #LoadNode
    li $a0, 12
    li $v0, 9
    syscall
    sw $v0, 0($fp)
    la $t0, String
    sw $t0, 0($v0)
    li $t0, 6
    sw $t0, 4($v0)
    la $t0, data_13
    sw $t0, 8($v0)
    
    #AssignNode
    lw $t0, 0($fp)
    sw $t0, -32($fp)
    
    #AssignNode
    li $t0, 2
    sw $t0, -40($fp)
    
    #AssignNode
    li $t0, 2
    sw $t0, -44($fp)
    
    #LoadNode
    li $a0, 12
    li $v0, 9
    syscall
    sw $v0, -52($fp)
    la $t0, String
    sw $t0, 0($v0)
    li $t0, 6
    sw $t0, 4($v0)
    la $t0, data_13
    sw $t0, 8($v0)
    
    #ParamNode
    lw $t0, -44($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -40($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -52($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -52($fp)
    lw $t0, 0($t0)
    lw $t0, 32($t0)
    jalr $t0
    sw $a0, -36($fp)
    
    #TypeOfNode
    #Capturing case on void
    la $a0, case_on_void
    lw $t0, -36($fp)
    la $t1, void
    beq $t0, $t1, abort
    
    #Executing typeof
    lw $t0, -36($fp)
    lw $t0, 0($t0)
    sw $t0, -40($fp)
    
    #LabelNode
    
    loop_129:
    
    #EqNode
    lw $t0, -40($fp)
    la $t1, Bool
    seq $t0, $t0, $t1
    sw $t0, -44($fp)
    
    #GotoIfNode
    lw $t0, -44($fp)
    bnez $t0, pool_130
    
    #EqNode
    lw $t0, -40($fp)
    la $t1, String
    seq $t0, $t0, $t1
    sw $t0, -44($fp)
    
    #GotoIfNode
    lw $t0, -44($fp)
    bnez $t0, pool_130
    
    #EqNode
    lw $t0, -40($fp)
    la $t1, C
    seq $t0, $t0, $t1
    sw $t0, -44($fp)
    
    #GotoIfNode
    lw $t0, -44($fp)
    bnez $t0, pool_130
    
    #EqNode
    lw $t0, -40($fp)
    la $t1, Object
    seq $t0, $t0, $t1
    sw $t0, -44($fp)
    
    #GotoIfNode
    lw $t0, -44($fp)
    bnez $t0, pool_130
    
    #ParentOfNode
    lw $t0, -40($fp)
    lw $t0, 4($t0)
    sw $t0, -40($fp)
    
    #EqNode
    lw $t0, -40($fp)
    lw $t1, -40($fp)
    seq $t0, $t0, $t1
    sw $t0, -44($fp)
    
    #GotoIfNode
    lw $t0, -44($fp)
    bnez $t0, pool_130
    
    j loop_129
    
    #LabelNode
    
    pool_130:
    
    #EqNode
    lw $t0, -40($fp)
    la $t1, Bool
    seq $t0, $t0, $t1
    sw $t0, -52($fp)
    
    #MinusNode
    li $t0, 1
    lw $t1, -52($fp)
    sub $t0, $t0, $t1
    sw $t0, -56($fp)
    
    #GotoIfNode
    lw $t0, -56($fp)
    bnez $t0, next0_132
    
    #AssignNode
    lw $t0, -36($fp)
    sw $t0, -48($fp)
    
    #AssignNode
    li $t0, 1
    sw $t0, -60($fp)
    
    #AssignNode
    lw $t0, -60($fp)
    sw $t0, 0($fp)
    
    j end_131
    
    #LabelNode
    
    next0_132:
    
    #EqNode
    lw $t0, -40($fp)
    la $t1, String
    seq $t0, $t0, $t1
    sw $t0, -68($fp)
    
    #MinusNode
    li $t0, 1
    lw $t1, -68($fp)
    sub $t0, $t0, $t1
    sw $t0, -72($fp)
    
    #GotoIfNode
    lw $t0, -72($fp)
    bnez $t0, next1_133
    
    #AssignNode
    lw $t0, -36($fp)
    sw $t0, -64($fp)
    
    #AssignNode
    li $t0, 2
    sw $t0, -76($fp)
    
    #AssignNode
    lw $t0, -76($fp)
    sw $t0, 0($fp)
    
    j end_131
    
    #LabelNode
    
    next1_133:
    
    #EqNode
    lw $t0, -40($fp)
    la $t1, C
    seq $t0, $t0, $t1
    sw $t0, -84($fp)
    
    #MinusNode
    li $t0, 1
    lw $t1, -84($fp)
    sub $t0, $t0, $t1
    sw $t0, -88($fp)
    
    #GotoIfNode
    lw $t0, -88($fp)
    bnez $t0, next2_134
    
    #AssignNode
    lw $t0, -36($fp)
    sw $t0, -80($fp)
    
    #AssignNode
    li $t0, 3
    sw $t0, -92($fp)
    
    #AssignNode
    lw $t0, -92($fp)
    sw $t0, 0($fp)
    
    j end_131
    
    #LabelNode
    
    next2_134:
    
    #EqNode
    lw $t0, -40($fp)
    la $t1, Object
    seq $t0, $t0, $t1
    sw $t0, -100($fp)
    
    #MinusNode
    li $t0, 1
    lw $t1, -100($fp)
    sub $t0, $t0, $t1
    sw $t0, -104($fp)
    
    #GotoIfNode
    lw $t0, -104($fp)
    bnez $t0, next3_135
    
    #AssignNode
    lw $t0, -36($fp)
    sw $t0, -96($fp)
    
    #AssignNode
    li $t0, 4
    sw $t0, -108($fp)
    
    #AssignNode
    lw $t0, -108($fp)
    sw $t0, 0($fp)
    
    j end_131
    
    #LabelNode
    
    next3_135:
    
    la $a0, case_missmatch
    j abort
    
    #LabelNode
    
    end_131:
    
    #AssignNode
    lw $t0, 0($fp)
    sw $t0, -28($fp)
    
    #AssignNode
    lw $t0, -28($fp)
    sw $t0, -40($fp)
    
    #AssignNode
    li $t0, 2
    sw $t0, -44($fp)
    
    #EqNode
    lw $t0, -40($fp)
    lw $t1, -44($fp)
    seq $t0, $t0, $t1
    sw $t0, -36($fp)
    
    #AssignNode
    li $t0, 468
    sw $t0, -40($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -44($fp)
    
    #ParamNode
    lw $t0, -40($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -36($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -44($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -44($fp)
    lw $t0, 0($t0)
    lw $t0, 108($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #ReturnNode
    lw $a0, 0($fp)
    
    #Restoring saved $ra
    lw $ra, 4($fp)
    
    #Restoring saved $fp
    lw $fp, 8($fp)
    
    #Cleaning stack after call
    addi $sp, $sp, 252
    
    #Return jump
    jr $ra
    
Blah_bigAttrAccess:
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, -4
    
    #Saving $fp
    move $fp $sp
    
    #Reserving space for locals
    addi $sp, $sp, -20
    
    #Executing instructions
    #AllocateNode
    li $a0, 8
    li $v0, 9
    syscall
    sw $v0, -8($fp)
    la $t0, C2
    sw $t0, 0($v0)
    
    #ParamNode
    lw $t0, -8($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #StaticCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    jal C2_constructor
    sw $a0, -12($fp)
    
    #AssignNode
    lw $t0, -8($fp)
    sw $t0, -4($fp)
    
    #LoadNode
    li $a0, 12
    li $v0, 9
    syscall
    sw $v0, -8($fp)
    la $t0, String
    sw $t0, 0($v0)
    li $t0, 14
    sw $t0, 4($v0)
    la $t0, data_16
    sw $t0, 8($v0)
    
    #GetAttribNode
    lw $t0, 12($fp)
    lw $t0, 28($t0)
    sw $t0, -12($fp)
    
    #ParamNode
    lw $t0, -8($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -12($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -12($fp)
    lw $t0, 0($t0)
    lw $t0, 24($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #AssignNode
    lw $t0, -4($fp)
    sw $t0, -16($fp)
    
    #ParamNode
    lw $t0, -16($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -16($fp)
    lw $t0, 0($t0)
    lw $t0, 28($t0)
    jalr $t0
    sw $a0, -12($fp)
    
    #AssignNode
    li $t0, 3
    sw $t0, -16($fp)
    
    #EqNode
    lw $t0, -12($fp)
    lw $t1, -16($fp)
    seq $t0, $t0, $t1
    sw $t0, -8($fp)
    
    #AssignNode
    li $t0, 496
    sw $t0, -12($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -16($fp)
    
    #ParamNode
    lw $t0, -12($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -8($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -16($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -16($fp)
    lw $t0, 0($t0)
    lw $t0, 108($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #AssignNode
    li $t0, 5
    sw $t0, -8($fp)
    
    #AssignNode
    lw $t0, -4($fp)
    sw $t0, -12($fp)
    
    #ParamNode
    lw $t0, -8($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -12($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -12($fp)
    lw $t0, 0($t0)
    lw $t0, 32($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #AssignNode
    lw $t0, -4($fp)
    sw $t0, -16($fp)
    
    #ParamNode
    lw $t0, -16($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -16($fp)
    lw $t0, 0($t0)
    lw $t0, 28($t0)
    jalr $t0
    sw $a0, -12($fp)
    
    #AssignNode
    li $t0, 5
    sw $t0, -16($fp)
    
    #EqNode
    lw $t0, -12($fp)
    lw $t1, -16($fp)
    seq $t0, $t0, $t1
    sw $t0, -8($fp)
    
    #AssignNode
    li $t0, 498
    sw $t0, -12($fp)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -16($fp)
    
    #ParamNode
    lw $t0, -12($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -8($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -16($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -16($fp)
    lw $t0, 0($t0)
    lw $t0, 108($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #ReturnNode
    lw $a0, 0($fp)
    
    #Restoring saved $ra
    lw $ra, 4($fp)
    
    #Restoring saved $fp
    lw $fp, 8($fp)
    
    #Cleaning stack after call
    addi $sp, $sp, 32
    
    #Return jump
    jr $ra
    
Blah_constructor:
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, -4
    
    #Saving $fp
    move $fp $sp
    
    #Reserving space for locals
    addi $sp, $sp, -8
    
    #Executing instructions
    #DefaultValueNode
    li $t0, 0
    sw $t0, 0($fp)
    
    #SetAttribNode
    lw $t1, 12($fp)
    lw $t0, 0($fp)
    sw $t0, 4($t1)
    
    #DefaultValueNode
    li $t0, 0
    sw $t0, 0($fp)
    
    #SetAttribNode
    lw $t1, 12($fp)
    lw $t0, 0($fp)
    sw $t0, 8($t1)
    
    #DefaultValueNode
    li $a0, 12
    li $v0, 9
    syscall
    sw $v0, 0($fp)
    la $t0, String
    sw $t0, 0($v0)
    li $t0, 0
    sw $t0, 4($v0)
    la $t0, empty_string
    sw $t0, 8($v0)
    
    #SetAttribNode
    lw $t1, 12($fp)
    lw $t0, 0($fp)
    sw $t0, 12($t1)
    
    #DefaultValueNode
    li $t0, 0
    sw $t0, 0($fp)
    
    #SetAttribNode
    lw $t1, 12($fp)
    lw $t0, 0($fp)
    sw $t0, 16($t1)
    
    #DefaultValueNode
    li $t0, 0
    sw $t0, 0($fp)
    
    #SetAttribNode
    lw $t1, 12($fp)
    lw $t0, 0($fp)
    sw $t0, 20($t1)
    
    #DefaultValueNode
    li $a0, 12
    li $v0, 9
    syscall
    sw $v0, 0($fp)
    la $t0, String
    sw $t0, 0($v0)
    li $t0, 0
    sw $t0, 4($v0)
    la $t0, empty_string
    sw $t0, 8($v0)
    
    #SetAttribNode
    lw $t1, 12($fp)
    lw $t0, 0($fp)
    sw $t0, 24($t1)
    
    #DefaultValueNode
    la $t0, void
    sw $t0, 0($fp)
    
    #SetAttribNode
    lw $t1, 12($fp)
    lw $t0, 0($fp)
    sw $t0, 28($t1)
    
    #DefaultValueNode
    la $t0, void
    sw $t0, 0($fp)
    
    #SetAttribNode
    lw $t1, 12($fp)
    lw $t0, 0($fp)
    sw $t0, 32($t1)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -4($fp)
    
    #ParamNode
    lw $t0, -4($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -4($fp)
    lw $t0, 0($t0)
    lw $t0, 24($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #SetAttribNode
    lw $t1, 12($fp)
    lw $t0, 0($fp)
    sw $t0, 16($t1)
    
    #AssignNode
    li $t0, 1
    sw $t0, 0($fp)
    
    #SetAttribNode
    lw $t1, 12($fp)
    lw $t0, 0($fp)
    sw $t0, 20($t1)
    
    #AssignNode
    lw $t0, 12($fp)
    sw $t0, -4($fp)
    
    #ParamNode
    lw $t0, -4($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #StaticCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    jal Blah_add
    sw $a0, 0($fp)
    
    #LoadNode
    li $a0, 12
    li $v0, 9
    syscall
    sw $v0, 0($fp)
    la $t0, String
    sw $t0, 0($v0)
    li $t0, 9
    sw $t0, 4($v0)
    la $t0, data_17
    sw $t0, 8($v0)
    
    #SetAttribNode
    lw $t1, 12($fp)
    lw $t0, 0($fp)
    sw $t0, 24($t1)
    
    #AllocateNode
    li $a0, 4
    li $v0, 9
    syscall
    sw $v0, 0($fp)
    la $t0, IO
    sw $t0, 0($v0)
    
    #ParamNode
    lw $t0, 0($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #SetAttribNode
    lw $t1, 12($fp)
    lw $t0, 0($fp)
    sw $t0, 28($t1)
    
    #ReturnNode
    lw $a0, 0($fp)
    
    #Restoring saved $ra
    lw $ra, 4($fp)
    
    #Restoring saved $fp
    lw $fp, 8($fp)
    
    #Cleaning stack after call
    addi $sp, $sp, 20
    
    #Return jump
    jr $ra
    
A_e:
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, -4
    
    #Saving $fp
    move $fp $sp
    
    #Reserving space for locals
    addi $sp, $sp, -4
    
    #Executing instructions
    #AssignNode
    li $t0, 0
    sw $t0, 0($fp)
    
    #ReturnNode
    lw $a0, 0($fp)
    
    #Restoring saved $ra
    lw $ra, 4($fp)
    
    #Restoring saved $fp
    lw $fp, 8($fp)
    
    #Cleaning stack after call
    addi $sp, $sp, 16
    
    #Return jump
    jr $ra
    
A_f:
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, -4
    
    #Saving $fp
    move $fp $sp
    
    #Reserving space for locals
    addi $sp, $sp, -4
    
    #Executing instructions
    #AssignNode
    li $t0, 0
    sw $t0, 0($fp)
    
    #ReturnNode
    lw $a0, 0($fp)
    
    #Restoring saved $ra
    lw $ra, 4($fp)
    
    #Restoring saved $fp
    lw $fp, 8($fp)
    
    #Cleaning stack after call
    addi $sp, $sp, 16
    
    #Return jump
    jr $ra
    
A_g:
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, -4
    
    #Saving $fp
    move $fp $sp
    
    #Reserving space for locals
    addi $sp, $sp, -4
    
    #Executing instructions
    #AssignNode
    li $t0, 0
    sw $t0, 0($fp)
    
    #ReturnNode
    lw $a0, 0($fp)
    
    #Restoring saved $ra
    lw $ra, 4($fp)
    
    #Restoring saved $fp
    lw $fp, 8($fp)
    
    #Cleaning stack after call
    addi $sp, $sp, 16
    
    #Return jump
    jr $ra
    
A_i:
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, -4
    
    #Saving $fp
    move $fp $sp
    
    #Reserving space for locals
    addi $sp, $sp, -4
    
    #Executing instructions
    #AssignNode
    li $t0, 0
    sw $t0, 0($fp)
    
    #ReturnNode
    lw $a0, 0($fp)
    
    #Restoring saved $ra
    lw $ra, 4($fp)
    
    #Restoring saved $fp
    lw $fp, 8($fp)
    
    #Cleaning stack after call
    addi $sp, $sp, 16
    
    #Return jump
    jr $ra
    
A_j:
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, -4
    
    #Saving $fp
    move $fp $sp
    
    #Reserving space for locals
    addi $sp, $sp, -4
    
    #Executing instructions
    #AssignNode
    li $t0, 0
    sw $t0, 0($fp)
    
    #ReturnNode
    lw $a0, 0($fp)
    
    #Restoring saved $ra
    lw $ra, 4($fp)
    
    #Restoring saved $fp
    lw $fp, 8($fp)
    
    #Cleaning stack after call
    addi $sp, $sp, 16
    
    #Return jump
    jr $ra
    
A_constructor:
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, -4
    
    #Saving $fp
    move $fp $sp
    
    #Reserving space for locals
    addi $sp, $sp, -4
    
    #Executing instructions
    #ReturnNode
    lw $a0, 0($fp)
    
    #Restoring saved $ra
    lw $ra, 4($fp)
    
    #Restoring saved $fp
    lw $fp, 8($fp)
    
    #Cleaning stack after call
    addi $sp, $sp, 16
    
    #Return jump
    jr $ra
    
Base_constructor:
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, -4
    
    #Saving $fp
    move $fp $sp
    
    #Reserving space for locals
    addi $sp, $sp, -4
    
    #Executing instructions
    #DefaultValueNode
    li $t0, 0
    sw $t0, 0($fp)
    
    #SetAttribNode
    lw $t1, 12($fp)
    lw $t0, 0($fp)
    sw $t0, 4($t1)
    
    #DefaultValueNode
    li $a0, 12
    li $v0, 9
    syscall
    sw $v0, 0($fp)
    la $t0, String
    sw $t0, 0($v0)
    li $t0, 0
    sw $t0, 4($v0)
    la $t0, empty_string
    sw $t0, 8($v0)
    
    #SetAttribNode
    lw $t1, 12($fp)
    lw $t0, 0($fp)
    sw $t0, 8($t1)
    
    #DefaultValueNode
    li $t0, 0
    sw $t0, 0($fp)
    
    #SetAttribNode
    lw $t1, 12($fp)
    lw $t0, 0($fp)
    sw $t0, 12($t1)
    
    #ReturnNode
    lw $a0, 0($fp)
    
    #Restoring saved $ra
    lw $ra, 4($fp)
    
    #Restoring saved $fp
    lw $fp, 8($fp)
    
    #Cleaning stack after call
    addi $sp, $sp, 16
    
    #Return jump
    jr $ra
    
Main_main:
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, -4
    
    #Saving $fp
    move $fp $sp
    
    #Reserving space for locals
    addi $sp, $sp, -24
    
    #Executing instructions
    #AllocateNode
    li $a0, 4
    li $v0, 9
    syscall
    sw $v0, -16($fp)
    la $t0, IO
    sw $t0, 0($v0)
    
    #ParamNode
    lw $t0, -16($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #AssignNode
    lw $t0, -16($fp)
    sw $t0, -4($fp)
    
    #DefaultValueNode
    la $t0, void
    sw $t0, -16($fp)
    
    #AssignNode
    lw $t0, -16($fp)
    sw $t0, -8($fp)
    
    #LoadNode
    li $a0, 12
    li $v0, 9
    syscall
    sw $v0, -16($fp)
    la $t0, String
    sw $t0, 0($v0)
    li $t0, 15
    sw $t0, 4($v0)
    la $t0, data_18
    sw $t0, 8($v0)
    
    #AssignNode
    lw $t0, -4($fp)
    sw $t0, -20($fp)
    
    #ParamNode
    lw $t0, -16($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -20($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #StaticCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    jal IO_out_string
    sw $a0, 0($fp)
    
    #LoadNode
    li $a0, 12
    li $v0, 9
    syscall
    sw $v0, -16($fp)
    la $t0, String
    sw $t0, 0($v0)
    li $t0, 29
    sw $t0, 4($v0)
    la $t0, data_19
    sw $t0, 8($v0)
    
    #AssignNode
    lw $t0, -4($fp)
    sw $t0, -20($fp)
    
    #ParamNode
    lw $t0, -16($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -20($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -20($fp)
    lw $t0, 0($t0)
    lw $t0, 24($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #LoadNode
    li $a0, 12
    li $v0, 9
    syscall
    sw $v0, -16($fp)
    la $t0, String
    sw $t0, 0($v0)
    li $t0, 36
    sw $t0, 4($v0)
    la $t0, data_20
    sw $t0, 8($v0)
    
    #AssignNode
    lw $t0, -4($fp)
    sw $t0, -20($fp)
    
    #ParamNode
    lw $t0, -16($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -20($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #StaticCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    jal IO_out_string
    sw $a0, 0($fp)
    
    #AssignNode
    li $t0, 3
    sw $t0, -16($fp)
    
    #AssignNode
    lw $t0, -16($fp)
    sw $t0, -12($fp)
    
    #LoadNode
    li $a0, 12
    li $v0, 9
    syscall
    sw $v0, -16($fp)
    la $t0, String
    sw $t0, 0($v0)
    li $t0, 8
    sw $t0, 4($v0)
    la $t0, data_21
    sw $t0, 8($v0)
    
    #AssignNode
    lw $t0, -4($fp)
    sw $t0, -20($fp)
    
    #ParamNode
    lw $t0, -16($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -20($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #StaticCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    jal IO_out_string
    sw $a0, 0($fp)
    
    #AssignNode
    lw $t0, -12($fp)
    sw $t0, -16($fp)
    
    #AssignNode
    lw $t0, -4($fp)
    sw $t0, -20($fp)
    
    #ParamNode
    lw $t0, -16($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -20($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #StaticCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    jal IO_out_int
    sw $a0, 0($fp)
    
    #LoadNode
    li $a0, 12
    li $v0, 9
    syscall
    sw $v0, -16($fp)
    la $t0, String
    sw $t0, 0($v0)
    li $t0, 1
    sw $t0, 4($v0)
    la $t0, data_6
    sw $t0, 8($v0)
    
    #AssignNode
    lw $t0, -4($fp)
    sw $t0, -20($fp)
    
    #ParamNode
    lw $t0, -16($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -20($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #StaticCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    jal IO_out_string
    sw $a0, 0($fp)
    
    #LoadNode
    li $a0, 12
    li $v0, 9
    syscall
    sw $v0, -12($fp)
    la $t0, String
    sw $t0, 0($v0)
    li $t0, 18
    sw $t0, 4($v0)
    la $t0, data_22
    sw $t0, 8($v0)
    
    #AssignNode
    lw $t0, -4($fp)
    sw $t0, -16($fp)
    
    #ParamNode
    lw $t0, -12($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -16($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -16($fp)
    lw $t0, 0($t0)
    lw $t0, 24($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #AllocateNode
    li $a0, 36
    li $v0, 9
    syscall
    sw $v0, 0($fp)
    la $t0, Blah
    sw $t0, 0($v0)
    
    #ParamNode
    lw $t0, 0($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #StaticCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    jal Blah_constructor
    sw $a0, -12($fp)
    
    #AssignNode
    lw $t0, 0($fp)
    sw $t0, -8($fp)
    
    #LoadNode
    li $a0, 12
    li $v0, 9
    syscall
    sw $v0, -12($fp)
    la $t0, String
    sw $t0, 0($v0)
    li $t0, 21
    sw $t0, 4($v0)
    la $t0, data_23
    sw $t0, 8($v0)
    
    #AssignNode
    lw $t0, -4($fp)
    sw $t0, -16($fp)
    
    #ParamNode
    lw $t0, -12($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -16($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -16($fp)
    lw $t0, 0($t0)
    lw $t0, 24($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #AssignNode
    lw $t0, -8($fp)
    sw $t0, -12($fp)
    
    #ParamNode
    lw $t0, -12($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -12($fp)
    lw $t0, 0($t0)
    lw $t0, 88($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #LoadNode
    li $a0, 12
    li $v0, 9
    syscall
    sw $v0, -12($fp)
    la $t0, String
    sw $t0, 0($v0)
    li $t0, 10
    sw $t0, 4($v0)
    la $t0, data_24
    sw $t0, 8($v0)
    
    #AssignNode
    lw $t0, -4($fp)
    sw $t0, -16($fp)
    
    #ParamNode
    lw $t0, -12($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #ParamNode
    lw $t0, -16($fp)
    sw $t0, 0($sp)
    addi $sp, $sp, -4
    
    #DynamicCallNode
    #Capturing dispatch on void
    la $a0, dispatch_on_void
    lw $t0, 4($sp)
    la $t1, void
    beq $t0, $t1, abort
    
    sw $fp, 0($sp)
    addi $sp, $sp, -4
    lw $t0, -16($fp)
    lw $t0, 0($t0)
    lw $t0, 24($t0)
    jalr $t0
    sw $a0, 0($fp)
    
    #ReturnNode
    lw $a0, 0($fp)
    
    #Restoring saved $ra
    lw $ra, 4($fp)
    
    #Restoring saved $fp
    lw $fp, 8($fp)
    
    #Cleaning stack after call
    addi $sp, $sp, 36
    
    #Return jump
    jr $ra
    
Main_constructor:
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, -4
    
    #Saving $fp
    move $fp $sp
    
    #Reserving space for locals
    addi $sp, $sp, -4
    
    #Executing instructions
    #ReturnNode
    lw $a0, 0($fp)
    
    #Restoring saved $ra
    lw $ra, 4($fp)
    
    #Restoring saved $fp
    lw $fp, 8($fp)
    
    #Cleaning stack after call
    addi $sp, $sp, 16
    
    #Return jump
    jr $ra
    
C1_constructor:
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, -4
    
    #Saving $fp
    move $fp $sp
    
    #Reserving space for locals
    addi $sp, $sp, -4
    
    #Executing instructions
    #ReturnNode
    lw $a0, 0($fp)
    
    #Restoring saved $ra
    lw $ra, 4($fp)
    
    #Restoring saved $fp
    lw $fp, 8($fp)
    
    #Cleaning stack after call
    addi $sp, $sp, 16
    
    #Return jump
    jr $ra
    
C2_getX:
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, -4
    
    #Saving $fp
    move $fp $sp
    
    #Reserving space for locals
    addi $sp, $sp, -4
    
    #Executing instructions
    #GetAttribNode
    lw $t0, 12($fp)
    lw $t0, 4($t0)
    sw $t0, 0($fp)
    
    #ReturnNode
    lw $a0, 0($fp)
    
    #Restoring saved $ra
    lw $ra, 4($fp)
    
    #Restoring saved $fp
    lw $fp, 8($fp)
    
    #Cleaning stack after call
    addi $sp, $sp, 16
    
    #Return jump
    jr $ra
    
C2_setX:
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, -4
    
    #Saving $fp
    move $fp $sp
    
    #Reserving space for locals
    addi $sp, $sp, -4
    
    #Executing instructions
    #AssignNode
    lw $t0, 16($fp)
    sw $t0, 0($fp)
    
    #SetAttribNode
    lw $t1, 12($fp)
    lw $t0, 0($fp)
    sw $t0, 4($t1)
    
    #ReturnNode
    lw $a0, 0($fp)
    
    #Restoring saved $ra
    lw $ra, 4($fp)
    
    #Restoring saved $fp
    lw $fp, 8($fp)
    
    #Cleaning stack after call
    addi $sp, $sp, 20
    
    #Return jump
    jr $ra
    
C2_constructor:
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, -4
    
    #Saving $fp
    move $fp $sp
    
    #Reserving space for locals
    addi $sp, $sp, -4
    
    #Executing instructions
    #ReturnNode
    lw $a0, 0($fp)
    
    #Restoring saved $ra
    lw $ra, 4($fp)
    
    #Restoring saved $fp
    lw $fp, 8($fp)
    
    #Cleaning stack after call
    addi $sp, $sp, 16
    
    #Return jump
    jr $ra
    
B_e:
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, -4
    
    #Saving $fp
    move $fp $sp
    
    #Reserving space for locals
    addi $sp, $sp, -4
    
    #Executing instructions
    #AssignNode
    li $t0, 0
    sw $t0, 0($fp)
    
    #ReturnNode
    lw $a0, 0($fp)
    
    #Restoring saved $ra
    lw $ra, 4($fp)
    
    #Restoring saved $fp
    lw $fp, 8($fp)
    
    #Cleaning stack after call
    addi $sp, $sp, 16
    
    #Return jump
    jr $ra
    
B_g:
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, -4
    
    #Saving $fp
    move $fp $sp
    
    #Reserving space for locals
    addi $sp, $sp, -4
    
    #Executing instructions
    #AssignNode
    li $t0, 0
    sw $t0, 0($fp)
    
    #ReturnNode
    lw $a0, 0($fp)
    
    #Restoring saved $ra
    lw $ra, 4($fp)
    
    #Restoring saved $fp
    lw $fp, 8($fp)
    
    #Cleaning stack after call
    addi $sp, $sp, 16
    
    #Return jump
    jr $ra
    
B_h:
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, -4
    
    #Saving $fp
    move $fp $sp
    
    #Reserving space for locals
    addi $sp, $sp, -4
    
    #Executing instructions
    #AssignNode
    li $t0, 0
    sw $t0, 0($fp)
    
    #ReturnNode
    lw $a0, 0($fp)
    
    #Restoring saved $ra
    lw $ra, 4($fp)
    
    #Restoring saved $fp
    lw $fp, 8($fp)
    
    #Cleaning stack after call
    addi $sp, $sp, 16
    
    #Return jump
    jr $ra
    
B_k:
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, -4
    
    #Saving $fp
    move $fp $sp
    
    #Reserving space for locals
    addi $sp, $sp, -4
    
    #Executing instructions
    #AssignNode
    li $t0, 0
    sw $t0, 0($fp)
    
    #ReturnNode
    lw $a0, 0($fp)
    
    #Restoring saved $ra
    lw $ra, 4($fp)
    
    #Restoring saved $fp
    lw $fp, 8($fp)
    
    #Cleaning stack after call
    addi $sp, $sp, 16
    
    #Return jump
    jr $ra
    
B_constructor:
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, -4
    
    #Saving $fp
    move $fp $sp
    
    #Reserving space for locals
    addi $sp, $sp, -4
    
    #Executing instructions
    #ReturnNode
    lw $a0, 0($fp)
    
    #Restoring saved $ra
    lw $ra, 4($fp)
    
    #Restoring saved $fp
    lw $fp, 8($fp)
    
    #Cleaning stack after call
    addi $sp, $sp, 16
    
    #Return jump
    jr $ra
    
Grandparent_constructor:
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, -4
    
    #Saving $fp
    move $fp $sp
    
    #Reserving space for locals
    addi $sp, $sp, -4
    
    #Executing instructions
    #DefaultValueNode
    la $t0, void
    sw $t0, 0($fp)
    
    #SetAttribNode
    lw $t1, 12($fp)
    lw $t0, 0($fp)
    sw $t0, 16($t1)
    
    #DefaultValueNode
    li $t0, 0
    sw $t0, 0($fp)
    
    #SetAttribNode
    lw $t1, 12($fp)
    lw $t0, 0($fp)
    sw $t0, 20($t1)
    
    #DefaultValueNode
    la $t0, void
    sw $t0, 0($fp)
    
    #SetAttribNode
    lw $t1, 12($fp)
    lw $t0, 0($fp)
    sw $t0, 24($t1)
    
    #ReturnNode
    lw $a0, 0($fp)
    
    #Restoring saved $ra
    lw $ra, 4($fp)
    
    #Restoring saved $fp
    lw $fp, 8($fp)
    
    #Cleaning stack after call
    addi $sp, $sp, 16
    
    #Return jump
    jr $ra
    
C_e:
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, -4
    
    #Saving $fp
    move $fp $sp
    
    #Reserving space for locals
    addi $sp, $sp, -4
    
    #Executing instructions
    #AssignNode
    li $t0, 0
    sw $t0, 0($fp)
    
    #ReturnNode
    lw $a0, 0($fp)
    
    #Restoring saved $ra
    lw $ra, 4($fp)
    
    #Restoring saved $fp
    lw $fp, 8($fp)
    
    #Cleaning stack after call
    addi $sp, $sp, 16
    
    #Return jump
    jr $ra
    
C_h:
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, -4
    
    #Saving $fp
    move $fp $sp
    
    #Reserving space for locals
    addi $sp, $sp, -4
    
    #Executing instructions
    #AssignNode
    li $t0, 0
    sw $t0, 0($fp)
    
    #ReturnNode
    lw $a0, 0($fp)
    
    #Restoring saved $ra
    lw $ra, 4($fp)
    
    #Restoring saved $fp
    lw $fp, 8($fp)
    
    #Cleaning stack after call
    addi $sp, $sp, 16
    
    #Return jump
    jr $ra
    
C_i:
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, -4
    
    #Saving $fp
    move $fp $sp
    
    #Reserving space for locals
    addi $sp, $sp, -4
    
    #Executing instructions
    #AssignNode
    li $t0, 0
    sw $t0, 0($fp)
    
    #ReturnNode
    lw $a0, 0($fp)
    
    #Restoring saved $ra
    lw $ra, 4($fp)
    
    #Restoring saved $fp
    lw $fp, 8($fp)
    
    #Cleaning stack after call
    addi $sp, $sp, 16
    
    #Return jump
    jr $ra
    
C_ell:
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, -4
    
    #Saving $fp
    move $fp $sp
    
    #Reserving space for locals
    addi $sp, $sp, -4
    
    #Executing instructions
    #AssignNode
    li $t0, 0
    sw $t0, 0($fp)
    
    #ReturnNode
    lw $a0, 0($fp)
    
    #Restoring saved $ra
    lw $ra, 4($fp)
    
    #Restoring saved $fp
    lw $fp, 8($fp)
    
    #Cleaning stack after call
    addi $sp, $sp, 16
    
    #Return jump
    jr $ra
    
C_constructor:
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, -4
    
    #Saving $fp
    move $fp $sp
    
    #Reserving space for locals
    addi $sp, $sp, -4
    
    #Executing instructions
    #ReturnNode
    lw $a0, 0($fp)
    
    #Restoring saved $ra
    lw $ra, 4($fp)
    
    #Restoring saved $fp
    lw $fp, 8($fp)
    
    #Cleaning stack after call
    addi $sp, $sp, 16
    
    #Return jump
    jr $ra
    
Parent_constructor:
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, -4
    
    #Saving $fp
    move $fp $sp
    
    #Reserving space for locals
    addi $sp, $sp, -4
    
    #Executing instructions
    #DefaultValueNode
    la $t0, void
    sw $t0, 0($fp)
    
    #SetAttribNode
    lw $t1, 12($fp)
    lw $t0, 0($fp)
    sw $t0, 28($t1)
    
    #DefaultValueNode
    li $t0, 0
    sw $t0, 0($fp)
    
    #SetAttribNode
    lw $t1, 12($fp)
    lw $t0, 0($fp)
    sw $t0, 32($t1)
    
    #DefaultValueNode
    li $t0, 0
    sw $t0, 0($fp)
    
    #SetAttribNode
    lw $t1, 12($fp)
    lw $t0, 0($fp)
    sw $t0, 36($t1)
    
    #ReturnNode
    lw $a0, 0($fp)
    
    #Restoring saved $ra
    lw $ra, 4($fp)
    
    #Restoring saved $fp
    lw $fp, 8($fp)
    
    #Cleaning stack after call
    addi $sp, $sp, 16
    
    #Return jump
    jr $ra
    
Child_constructor:
    #Pushing $ra
    sw $ra, 0($sp)
    addi $sp, $sp, -4
    
    #Saving $fp
    move $fp $sp
    
    #Reserving space for locals
    addi $sp, $sp, -4
    
    #Executing instructions
    #DefaultValueNode
    la $t0, void
    sw $t0, 0($fp)
    
    #SetAttribNode
    lw $t1, 12($fp)
    lw $t0, 0($fp)
    sw $t0, 40($t1)
    
    #DefaultValueNode
    la $t0, void
    sw $t0, 0($fp)
    
    #SetAttribNode
    lw $t1, 12($fp)
    lw $t0, 0($fp)
    sw $t0, 44($t1)
    
    #DefaultValueNode
    la $t0, void
    sw $t0, 0($fp)
    
    #SetAttribNode
    lw $t1, 12($fp)
    lw $t0, 0($fp)
    sw $t0, 48($t1)
    
    #DefaultValueNode
    li $a0, 12
    li $v0, 9
    syscall
    sw $v0, 0($fp)
    la $t0, String
    sw $t0, 0($v0)
    li $t0, 0
    sw $t0, 4($v0)
    la $t0, empty_string
    sw $t0, 8($v0)
    
    #SetAttribNode
    lw $t1, 12($fp)
    lw $t0, 0($fp)
    sw $t0, 52($t1)
    
    #ReturnNode
    lw $a0, 0($fp)
    
    #Restoring saved $ra
    lw $ra, 4($fp)
    
    #Restoring saved $fp
    lw $fp, 8($fp)
    
    #Cleaning stack after call
    addi $sp, $sp, 16
    
    #Return jump
    jr $ra
    
exit: